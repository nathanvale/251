// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Box 1`] = `
{
  about?: string
  accept?: string
  acceptCharset?: string
  accessKey?: string
  action?: string
  alignItems?: ResponsiveProp<
    | "center"
    | "flex-end"
    | "flex-start"
    | "stretch"
  >
  alignSelf?: ResponsiveProp<
    | "center"
    | "flex-end"
    | "flex-start"
    | "stretch"
  >
  allowFullScreen?: boolean
  allowTransparency?: boolean
  alt?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  as?: string
  async?: boolean
  autoCapitalize?: string
  autoComplete?: string
  autoCorrect?: string
  autoFocus?: boolean
  autoPlay?: boolean
  autoSave?: string
  backgroundColor?: 
    | "backgroundDefault"
    | "backgroundPaper"
    | "caution"
    | "cautionDark"
    | "cautionLight"
    | "critical"
    | "criticalDark"
    | "criticalLight"
    | "grey100"
    | "grey200"
    | "grey300"
    | "grey400"
    | "grey50"
    | "grey500"
    | "grey600"
    | "info"
    | "infoDark"
    | "infoLight"
    | "positive"
    | "positiveDark"
    | "positiveLight"
    | "primary"
    | "primaryB"
    | "primaryBDark"
    | "primaryBLight"
    | "primaryDark"
    | "primaryLight"
    | "promote"
    | "promoteB"
    | "promoteBDark"
    | "promoteBLight"
    | "promoteDark"
    | "promoteLight"
    | "secondary"
    | "secondaryB"
    | "secondaryBDark"
    | "secondaryBLight"
    | "secondaryDark"
    | "secondaryLight"
    | "transparent"
    | "white"
  boxShadow?: 
    | "borderCritical"
    | "borderFormAccent"
    | "borderFormAccentLarge"
    | "borderFormHover"
    | "borderStandard"
    | "borderStandardInverted"
    | "borderStandardInvertedLarge"
    | "borderWeakPrimary"
    | "borderWeakPrimaryDisabled"
    | "borderWeakSecondary"
    | "borderWeakSecondaryDisabled"
    | "large"
    | "medium"
    | "outlineFocus"
    | "small"
  capture?: 
    | false
    | string
    | true
  cellPadding?: 
    | number
    | string
  cellSpacing?: 
    | number
    | string
  challenge?: string
  charSet?: string
  checked?: boolean
  children?: ReactNode
  cite?: string
  classID?: string
  className?: string
  colSpan?: number
  color?: string
  cols?: number
  component?: 
    | "a"
    | "abbr"
    | "address"
    | "animate"
    | "animateMotion"
    | "animateTransform"
    | "area"
    | "article"
    | "aside"
    | "audio"
    | "b"
    | "base"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "body"
    | "br"
    | "button"
    | "canvas"
    | "caption"
    | "circle"
    | "cite"
    | "clipPath"
    | "code"
    | "col"
    | "colgroup"
    | "data"
    | "datalist"
    | "dd"
    | "defs"
    | "del"
    | "desc"
    | "details"
    | "dfn"
    | "dialog"
    | "div"
    | "dl"
    | "dt"
    | "ellipse"
    | "em"
    | "embed"
    | "feBlend"
    | "feColorMatrix"
    | "feComponentTransfer"
    | "feComposite"
    | "feConvolveMatrix"
    | "feDiffuseLighting"
    | "feDisplacementMap"
    | "feDistantLight"
    | "feDropShadow"
    | "feFlood"
    | "feFuncA"
    | "feFuncB"
    | "feFuncG"
    | "feFuncR"
    | "feGaussianBlur"
    | "feImage"
    | "feMerge"
    | "feMergeNode"
    | "feMorphology"
    | "feOffset"
    | "fePointLight"
    | "feSpecularLighting"
    | "feSpotLight"
    | "feTile"
    | "feTurbulence"
    | "fieldset"
    | "figcaption"
    | "figure"
    | "filter"
    | "footer"
    | "foreignObject"
    | "form"
    | "g"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "hr"
    | "html"
    | "i"
    | "iframe"
    | "image"
    | "img"
    | "input"
    | "ins"
    | "kbd"
    | "keygen"
    | "label"
    | "legend"
    | "li"
    | "line"
    | "linearGradient"
    | "link"
    | "main"
    | "map"
    | "mark"
    | "marker"
    | "mask"
    | "menu"
    | "menuitem"
    | "meta"
    | "metadata"
    | "meter"
    | "mpath"
    | "nav"
    | "noindex"
    | "noscript"
    | "object"
    | "ol"
    | "optgroup"
    | "option"
    | "output"
    | "p"
    | "param"
    | "path"
    | "pattern"
    | "picture"
    | "polygon"
    | "polyline"
    | "pre"
    | "progress"
    | "q"
    | "radialGradient"
    | "rect"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "script"
    | "section"
    | "select"
    | "small"
    | "source"
    | "span"
    | "stop"
    | "strong"
    | "style"
    | "sub"
    | "summary"
    | "sup"
    | "svg"
    | "switch"
    | "symbol"
    | "table"
    | "tbody"
    | "td"
    | "template"
    | "text"
    | "textPath"
    | "textarea"
    | "tfoot"
    | "th"
    | "thead"
    | "time"
    | "title"
    | "tr"
    | "track"
    | "tspan"
    | "u"
    | "ul"
    | "use"
    | "var"
    | "video"
    | "view"
    | "wbr"
    | "webview"
    | ComponentClass<any, any>
    | FunctionComponent<any>
  content?: string
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  controls?: boolean
  coords?: string
  crossOrigin?: string
  cursor?: string
  dangerouslySetInnerHTML?: { __html: string; }
  data?: string
  datatype?: string
  dateTime?: string
  default?: boolean
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  defer?: boolean
  dir?: string
  disabled?: boolean
  display?: ResponsiveProp<
    | "block"
    | "flex"
    | "inline"
    | "inline-block"
    | "inline-flex"
    | "none"
  >
  download?: any
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  encType?: string
  flexDirection?: ResponsiveProp<
    | "column"
    | "column-reverse"
    | "row"
    | "row-reverse"
  >
  form?: string
  formAction?: string
  formEncType?: string
  formMethod?: string
  formNoValidate?: boolean
  formTarget?: string
  frameBorder?: 
    | number
    | string
  headers?: string
  height?: "full"
  hidden?: boolean
  high?: number
  href?: string
  hrefLang?: string
  htmlFor?: string
  httpEquiv?: string
  id?: string
  inlist?: any
  innerRef?: any
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  integrity?: string
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  justifyContent?: ResponsiveProp<
    | "center"
    | "flex-end"
    | "flex-start"
    | "space-between"
  >
  keyParams?: string
  keyType?: string
  kind?: string
  label?: string
  lang?: string
  list?: string
  loop?: boolean
  low?: number
  manifest?: string
  margin?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  marginBottom?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  marginHeight?: number
  marginLeft?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  marginRight?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  marginTop?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  marginWidth?: number
  marginX?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  marginY?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  max?: 
    | number
    | string
  maxLength?: number
  media?: string
  mediaGroup?: string
  method?: string
  min?: 
    | number
    | string
  minLength?: number
  multiple?: boolean
  muted?: boolean
  name?: string
  noValidate?: boolean
  nonce?: string
  onAbort?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLElement>) => void
  onBlur?: (event: FocusEvent<HTMLElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onChange?: (event: FormEvent<HTMLElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLElement>) => void
  onClick?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLElement>) => void
  onCut?: (event: ClipboardEvent<HTMLElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLElement>) => void
  onDragCapture?: (event: DragEvent<HTMLElement>) => void
  onDragEnd?: (event: DragEvent<HTMLElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLElement>) => void
  onDragEnter?: (event: DragEvent<HTMLElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLElement>) => void
  onDragExit?: (event: DragEvent<HTMLElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLElement>) => void
  onDragLeave?: (event: DragEvent<HTMLElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLElement>) => void
  onDragOver?: (event: DragEvent<HTMLElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLElement>) => void
  onDragStart?: (event: DragEvent<HTMLElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLElement>) => void
  onDrop?: (event: DragEvent<HTMLElement>) => void
  onDropCapture?: (event: DragEvent<HTMLElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLElement>) => void
  onInput?: (event: FormEvent<HTMLElement>) => void
  onInputCapture?: (event: FormEvent<HTMLElement>) => void
  onInvalid?: (event: FormEvent<HTMLElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLElement>) => void
  onPause?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onReset?: (event: FormEvent<HTMLElement>) => void
  onResetCapture?: (event: FormEvent<HTMLElement>) => void
  onScroll?: (event: UIEvent<HTMLElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLElement>) => void
  open?: boolean
  optimum?: number
  overflow?: 
    | "auto"
    | "hidden"
    | "scroll"
    | "visible"
  padding?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  paddingBottom?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  paddingLeft?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  paddingRight?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  paddingTop?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  paddingX?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  paddingY?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  pattern?: string
  placeholder?: string
  playsInline?: boolean
  pointerEvents?: 
    | "-moz-initial"
    | "all"
    | "auto"
    | "fill"
    | "inherit"
    | "initial"
    | "none"
    | "painted"
    | "revert"
    | "stroke"
    | "unset"
    | "visible"
    | "visibleFill"
    | "visiblePainted"
    | "visibleStroke"
  position?: ResponsiveProp<
    | "-moz-initial"
    | "-webkit-sticky"
    | "absolute"
    | "fixed"
    | "inherit"
    | "initial"
    | "relative"
    | "revert"
    | "static"
    | "sticky"
    | "unset"
  >
  poster?: string
  prefix?: string
  preload?: string
  property?: string
  radioGroup?: string
  readOnly?: boolean
  rel?: string
  required?: boolean
  resource?: string
  results?: number
  reversed?: boolean
  role?: string
  rowSpan?: number
  rows?: number
  sandbox?: string
  scope?: string
  scoped?: boolean
  scrolling?: string
  seamless?: boolean
  security?: string
  selected?: boolean
  shape?: string
  showAnts?: boolean
  size?: number
  sizes?: string
  slot?: string
  span?: number
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  src?: string
  srcDoc?: string
  srcLang?: string
  srcSet?: string
  start?: number
  step?: 
    | number
    | string
  style?: CSSProperties
  summary?: string
  tabIndex?: number
  target?: string
  textAlign?: ResponsiveProp<
    | "center"
    | "left"
    | "right"
  >
  title?: string
  transform?: "touchable"
  transition?: 
    | "fast"
    | "touchable"
  translate?: 
    | "no"
    | "yes"
  type?: string
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  useMap?: string
  value?: 
    | number
    | string
    | string[]
  vocab?: string
  width?: "full"
  wmode?: string
  wrap?: string
}
`;

exports[`Breadcrumb 1`] = `
{
  active?: boolean
  children?: ReactNode
  data-id?: string
  domProps?: AnchorHTMLAttributes<HTMLAnchorElement> | undefined
  href: string
  onClick?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  target?: string
}
`;

exports[`Breadcrumbs 1`] = `
{
  aria-label?: string
  children: 
    | ReactElement<BreadcrumbProps, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<...>)>
    | ReactElement<BreadcrumbProps, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<...>)>[]
  data-id?: string
  muiProps?: OverrideProps<BreadcrumbsTypeMap<{}, "nav">, "nav"> | undefined
}
`;

exports[`Button 1`] = `
{
  buttonRef?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  children?: ReactNode
  className?: string
  classes?: Partial<Record<ButtonClassKey, string>>
  color?: 
    | "primary"
    | "secondary"
  component?: 
    | "a"
    | "button"
    | "input"
  data-id?: string
  disabled?: boolean
  fullWidth?: ResponsiveProp<boolean
  >
  href?: string
  icon?: ReactNode
  id?: string
  inverse?: boolean
  muiProps?: OverrideProps<ButtonTypeMap<{}, "button">, "button"> | undefined
  noTextPadding?: boolean
  onBlur?: (event: FocusEvent<HTMLButtonElement>) => void
  onClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onFocus?: (event: FocusEvent<HTMLButtonElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLButtonElement>) => void
  size?: 
    | "medium"
    | "small"
  target?: string
  type?: 
    | "button"
    | "reset"
    | "submit"
  variant?: 
    | "contained"
    | "outlined"
    | "text"
}
`;

exports[`Card 1`] = `
{
  backgroundColor?: 
    | "grey50"
    | "transparent"
    | "white"
  children?: ReactNode
  data-id?: string
  padding?: 
    | "large"
    | "medium"
    | "small"
}
`;

exports[`CardStackSection 1`] = `
{
  cardWidth?: 
    | "large"
    | "medium"
    | "small"
  children: 
    | ReactElement<CardProps, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<...>)>
    | ReactElement<CardProps, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<...>)>[]
  data-id?: string
  paddingY?: 
    | "medium"
    | "none"
    | "small"
  variant?: 
    | "card-centered"
    | "default"
    | "widget"
}
`;

exports[`Checkbox 1`] = `
{
  aria-label?: string
  aria-labelledby?: string
  checked?: boolean
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  helperText?: ReactNode
  id: string
  inputRef?: 
    | (instance: any) => void
    | RefObject<any>
  label: ReactNode
  muiProps?: CheckboxMuiPropsType | undefined
  name?: string
  onChange?: (event: ChangeEvent<HTMLInputElement>, checked: boolean) => void
  value?: 
    | number
    | string
}
`;

exports[`CheckboxBase 1`] = `
{
  aria-describedby?: string
  aria-label?: string
  aria-labelledby?: string
  checked?: boolean
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  id: string
  inputRef?: 
    | (instance: any) => void
    | RefObject<any>
  muiProps?: CheckboxProps | undefined
  name?: string
  onChange?: (event: ChangeEvent<HTMLInputElement>, checked: boolean) => void
  value?: 
    | number
    | string
}
`;

exports[`CheckboxGroup 1`] = `
{
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  groupComponent?: 
    | "div"
    | "fieldset"
    | "form"
    | "section"
    | "span"
  helperText?: string
  id?: string
  label?: string
  labelComponent?: 
    | "abbr"
    | "cite"
    | "div"
    | "label"
    | "legend"
    | "p"
    | "pre"
    | "q"
    | "section"
    | "span"
  muiProps?: ControlGroupMuiProps | undefined
}
`;

exports[`ChevronButton 1`] = `
{
  children?: ReactNode
  data-id?: string
  domProps?: Pick<AllHTMLAttributes<HTMLButtonElement>, "aria-label" | "cite" | "data" | "form" | "label" | "span" | "style" | "summary" | "title" | ... 346 more ... | "wrap"> | undefined
  onClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  type?: 
    | "button"
    | "reset"
    | "submit"
  variant?: 
    | "primary"
    | "secondary"
}
`;

exports[`ChevronLink 1`] = `
{
  children?: ReactNode
  data-id?: string
  domProps?: AnchorHTMLAttributes<HTMLAnchorElement> | undefined
  href: string
  onClick?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  target?: string
  variant?: 
    | "primary"
    | "secondary"
}
`;

exports[`ChevronLinkRenderer 1`] = `
{
  children: (renderProps: ChevronLinkRenderProps) => ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<...>)>
  variant: 
    | "primary"
    | "secondary"
}
`;

exports[`Column 1`] = `
{
  children?: ReactNode
  data-id?: string
  width?: 
    | "1/12"
    | "1/2"
    | "1/3"
    | "1/4"
    | "1/6"
    | "11/12"
    | "2/3"
    | "3/4"
    | "5/12"
    | "5/6"
    | "7/12"
    | "content"
    | "flex"
}
`;

exports[`Columns 1`] = `
{
  alignY?: 
    | "bottom"
    | "center"
    | "top"
  children: 
    | ReactElement<ColumnProps, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<...>)>
    | ReactElement<ColumnProps, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<...>)>[]
  collapseBelow?: 
    | "lg"
    | "md"
    | "sm"
    | "xl"
    | "xs"
  data-id?: string
  space?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
}
`;

exports[`ControlGroup 1`] = `
{
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  groupComponent?: 
    | "div"
    | "fieldset"
    | "form"
    | "section"
    | "span"
  helperText?: string
  id?: string
  label?: string
  labelComponent?: 
    | "abbr"
    | "cite"
    | "div"
    | "label"
    | "legend"
    | "p"
    | "pre"
    | "q"
    | "section"
    | "span"
  muiProps?: ControlGroupMuiProps | undefined
}
`;

exports[`Divider 1`] = `
{
  data-id?: string
}
`;

exports[`Emphasis 1`] = `
{
  children: ReactNode
  data-id?: string
}
`;

exports[`FormControl 1`] = `
{
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  component?: 
    | "div"
    | "fieldset"
    | "form"
    | "section"
    | "span"
  data-id?: string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  fullWidth?: boolean
  id?: string
  muiProps?: OverrideProps<FormControlTypeMap<{}, "div">, "div"> | undefined
}
`;

exports[`FormControlLabel 1`] = `
{
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  control: ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>
  data-id?: string
  disabled?: boolean
  error?: boolean
  id?: string
  label: ReactNode
  muiProps?: FormControlLabelProps | undefined
}
`;

exports[`FormHelperText 1`] = `
{
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  id: string
  muiProps?: FormHelperTextProps | undefined
}
`;

exports[`FormLabel 1`] = `
{
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  component?: 
    | "abbr"
    | "cite"
    | "div"
    | "label"
    | "legend"
    | "p"
    | "pre"
    | "q"
    | "section"
    | "span"
  data-id?: string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  id?: string
  muiProps?: OverrideProps<FormLabelTypeMap<{}, "label">, "label"> | undefined
}
`;

exports[`Heading 1`] = `
{
  align?: ResponsiveProp<
    | "center"
    | "left"
    | "right"
  >
  children: ReactNode
  component?: 
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
  data-id?: string
  truncate?: boolean
  variant: 
    | "h1"
    | "h2"
    | "h3"
    | "h4"
}
`;

exports[`HeadingChevronLink 1`] = `
{
  children?: ReactNode
  data-id?: string
  domProps?: AnchorHTMLAttributes<HTMLAnchorElement> | undefined
  href: string
  onClick?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  target?: string
}
`;

exports[`Hidden 1`] = `
{
  above?: 
    | "lg"
    | "md"
    | "sm"
    | "xs"
  below?: 
    | "lg"
    | "md"
    | "sm"
    | "xl"
  children: ReactNode
  inline?: boolean
}
`;

exports[`InputAdornment 1`] = `
{
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  component?: 
    | ComponentClass<{}, any>
    | FunctionComponent<{}>
  data-id?: string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  id?: string
  muiProps?: InputAdornmentProps | undefined
  position: 
    | "end"
    | "start"
}
`;

exports[`OriginThemeProvider 1`] = `
{
  children: ReactNode
  linkComponent?: 
    | ComponentClass<LinkComponentProps, any>
    | FunctionComponent<LinkComponentProps>
  muiTheme?: {
    breakpoints: {
      between: (start: number | "xs" | "sm" | "md" | "lg" | "xl", end: number | "xs" | "sm" | "md" | "lg" | "xl") => string
      down: (key: number | "xs" | "sm" | "md" | "lg" | "xl") => string
      keys: ("xs" | "sm" | "md" | "lg" | "xl")[]
      only: (key: "xs" | "sm" | "md" | "lg" | "xl") => string
      up: (key: number | "xs" | "sm" | "md" | "lg" | "xl") => string
      values: BreakpointValues
      width: (key: "xs" | "sm" | "md" | "lg" | "xl") => number
    }
    colors: any
    direction: 
      | "ltr"
      | "rtl"
    mixins: {
      gutters: (styles?: CSSProperties | undefined) => CSSProperties
      toolbar: CSSProperties
    }
    overrides?: Overrides
    palette: {
      action: {
        active: string
        disabled: string
        disabledBackground: string
        hover: string
        hoverOpacity: number
        selected: string
      }
      augmentColor: { (color: Partial<Color>, mainShade?: string | number | undefined, lightShade?: string | number | undefined, darkShade?: string | number | undefined): PaletteColor; (color: PaletteColorOptions): PaletteColor; }
      background: {
        default: string
        paper: string
      }
      caution: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      common: {
        black: string
        white: string
      }
      contrastThreshold: number
      critical: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      divider: string
      error: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      getContrastText: (background: string) => string
      grey: {
        100: string
        200: string
        300: string
        400: string
        50: string
        500: string
        600: string
        700: string
        800: string
        900: string
        A100: string
        A200: string
        A400: string
        A700: string
      }
      info: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      positive: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      primary: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      primaryB: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      promote: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      promoteB: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      secondary: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      secondaryB: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      success: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      text: {
        disabled: string
        hint: string
        primary: string
        secondary: string
      }
      tonalOffset: number
      type: 
        | "dark"
        | "light"
      warning: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
    }
    props?: ComponentsProps
    shadows: Shadows
    shape: {
      borderRadius: number
    }
    spacing: {
    }
    transitions: {
      create: (props: string | string[], options?: Partial<{ duration: ReactText; easing: string; delay: ReactText; }> | undefined) => string
      duration: {
        complex: number
        enteringScreen: number
        leavingScreen: number
        short: number
        shorter: number
        shortest: number
        standard: number
      }
      easing: {
        easeIn: string
        easeInOut: string
        easeOut: string
        sharp: string
      }
      getAutoHeightDuration: (height: number) => number
    }
    typography: {
      basekickActive: boolean
      body1: CSSProperties
      body2: CSSProperties
      button: CSSProperties
      caption: CSSProperties
      fontFamily: string
      fontSize: number
      fontWeightBold: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      fontWeightLight: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      fontWeightMedium: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      fontWeightRegular: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      h1: CSSProperties
      h2: CSSProperties
      h3: CSSProperties
      h4: CSSProperties
      h5: CSSProperties
      h6: CSSProperties
      overline: CSSProperties
      pxToRem: (px: number) => string
      subtitle1: CSSProperties
      subtitle2: CSSProperties
    }
    zIndex: {
      appBar: number
      drawer: number
      mobileStepper: number
      modal: number
      snackbar: number
      speedDial: number
      tooltip: number
    }
  }
  theme?: {
    breakpoints: Breakpoints
    colors?: {
      backgroundDefault: string
      backgroundPaper: string
      caution: string
      cautionDark: string
      cautionLight: string
      critical: string
      criticalDark: string
      criticalLight: string
      grey100: string
      grey200: string
      grey300: string
      grey400: string
      grey50: string
      grey500: string
      grey600: string
      info: string
      infoDark: string
      infoLight: string
      positive: string
      positiveDark: string
      positiveLight: string
      primary: string
      primaryB: string
      primaryBDark: string
      primaryBLight: string
      primaryDark: string
      primaryLight: string
      promote: string
      promoteB: string
      promoteBDark: string
      promoteBLight: string
      promoteDark: string
      promoteLight: string
      secondary: string
      secondaryB: string
      secondaryBDark: string
      secondaryBLight: string
      secondaryDark: string
      secondaryLight: string
      transparent: string
      white: string
    }
    gridGutterWidth: 
      | 16
      | 32
    section: { maxWidth: Breakpoint<number>; }
    shadows: {
      large: string
      medium: string
      small: string
    }
    space: Space
    transforms: {
      touchable: string
    }
    transitions: {
      fast: string
      touchable: string
    }
    typography: {
      capHeightScale: number
      descenderHeightScale: number
      fontFamily: string
      gridRow: number
      text: Record<FontSizeVariants, FontSizeMetrics>
      weight: FontWeightValue
    }
  }
}
`;

exports[`Placeholder 1`] = `
{
  data-id?: string
  height?: ResponsiveProp<
    | number
    | string
  >
  label?: string
  minWidth?: ResponsiveProp<
    | number
    | string
  >
  shape?: 
    | "rectangle"
    | "round"
  width?: ResponsiveProp<
    | number
    | string
  >
}
`;

exports[`Radio 1`] = `
{
  aria-label?: string
  aria-labelledby?: string
  checked?: boolean
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  helperText?: ReactNode
  id: string
  inputRef?: 
    | (instance: any) => void
    | RefObject<any>
  label: ReactNode
  muiProps?: RadioMuiPropsType | undefined
  name?: string
  onChange?: (event: ChangeEvent<HTMLInputElement>, checked: boolean) => void
  value?: 
    | number
    | string
}
`;

exports[`RadioBase 1`] = `
{
  aria-describedby?: string
  aria-label?: string
  aria-labelledby?: string
  checked?: boolean
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  id: string
  inputRef?: 
    | (instance: any) => void
    | RefObject<any>
  muiProps?: RadioProps | undefined
  name?: string
  onChange?: (event: ChangeEvent<HTMLInputElement>, checked: boolean) => void
  value?: 
    | number
    | string
}
`;

exports[`RadioGroup 1`] = `
{
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  defaultValue?: 
    | number
    | string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  groupComponent?: 
    | "div"
    | "fieldset"
    | "form"
    | "section"
    | "span"
  helperText?: string
  id?: string
  label?: string
  labelComponent?: 
    | "abbr"
    | "cite"
    | "div"
    | "label"
    | "legend"
    | "p"
    | "pre"
    | "q"
    | "section"
    | "span"
  muiProps?: RadioGroupMuiProps | undefined
  name: string
  onChange?: (event: ChangeEvent<HTMLInputElement>, value?: string | undefined) => void
  value?: 
    | number
    | string
}
`;

exports[`RadioGroupBase 1`] = `
{
  aria-describedby?: string
  aria-label?: string
  aria-labelledby?: string
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  defaultValue?: 
    | number
    | string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  id?: string
  muiProps?: RadioGroupProps | undefined
  name: string
  onChange?: (event: ChangeEvent<HTMLInputElement>, value?: string | undefined) => void
  value?: 
    | number
    | string
}
`;

exports[`Section 1`] = `
{
  backgroundColor?: 
    | "grey50"
    | "transparent"
    | "white"
  children: ReactNode
  data-id?: string
  fluidity?: 
    | "full-width"
    | "max-width-at-xl"
    | "off"
  hideGutter?: ResponsiveProp<boolean
  >
  paddingY?: 
    | "medium"
    | "none"
    | "small"
  stretchY?: boolean
}
`;

exports[`Stack 1`] = `
{
  alignX?: ResponsiveProp<
    | "center"
    | "left"
    | "right"
  >
  children: ReactNode
  data-id?: string
  dividers?: boolean
  space?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
}
`;

exports[`Strong 1`] = `
{
  children: ReactNode
  data-id?: string
}
`;

exports[`Text 1`] = `
{
  align?: ResponsiveProp<
    | "center"
    | "left"
    | "right"
  >
  children?: ReactNode
  component?: 
    | "a"
    | "abbr"
    | "address"
    | "animate"
    | "animateMotion"
    | "animateTransform"
    | "area"
    | "article"
    | "aside"
    | "audio"
    | "b"
    | "base"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "body"
    | "br"
    | "button"
    | "canvas"
    | "caption"
    | "circle"
    | "cite"
    | "clipPath"
    | "code"
    | "col"
    | "colgroup"
    | "data"
    | "datalist"
    | "dd"
    | "defs"
    | "del"
    | "desc"
    | "details"
    | "dfn"
    | "dialog"
    | "div"
    | "dl"
    | "dt"
    | "ellipse"
    | "em"
    | "embed"
    | "feBlend"
    | "feColorMatrix"
    | "feComponentTransfer"
    | "feComposite"
    | "feConvolveMatrix"
    | "feDiffuseLighting"
    | "feDisplacementMap"
    | "feDistantLight"
    | "feDropShadow"
    | "feFlood"
    | "feFuncA"
    | "feFuncB"
    | "feFuncG"
    | "feFuncR"
    | "feGaussianBlur"
    | "feImage"
    | "feMerge"
    | "feMergeNode"
    | "feMorphology"
    | "feOffset"
    | "fePointLight"
    | "feSpecularLighting"
    | "feSpotLight"
    | "feTile"
    | "feTurbulence"
    | "fieldset"
    | "figcaption"
    | "figure"
    | "filter"
    | "footer"
    | "foreignObject"
    | "form"
    | "g"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "hr"
    | "html"
    | "i"
    | "iframe"
    | "image"
    | "img"
    | "input"
    | "ins"
    | "kbd"
    | "keygen"
    | "label"
    | "legend"
    | "li"
    | "line"
    | "linearGradient"
    | "link"
    | "main"
    | "map"
    | "mark"
    | "marker"
    | "mask"
    | "menu"
    | "menuitem"
    | "meta"
    | "metadata"
    | "meter"
    | "mpath"
    | "nav"
    | "noindex"
    | "noscript"
    | "object"
    | "ol"
    | "optgroup"
    | "option"
    | "output"
    | "p"
    | "param"
    | "path"
    | "pattern"
    | "picture"
    | "polygon"
    | "polyline"
    | "pre"
    | "progress"
    | "q"
    | "radialGradient"
    | "rect"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "script"
    | "section"
    | "select"
    | "small"
    | "source"
    | "span"
    | "stop"
    | "strong"
    | "style"
    | "sub"
    | "summary"
    | "sup"
    | "svg"
    | "switch"
    | "symbol"
    | "table"
    | "tbody"
    | "td"
    | "template"
    | "text"
    | "textPath"
    | "textarea"
    | "tfoot"
    | "th"
    | "thead"
    | "time"
    | "title"
    | "tr"
    | "track"
    | "tspan"
    | "u"
    | "ul"
    | "use"
    | "var"
    | "video"
    | "view"
    | "wbr"
    | "webview"
    | ComponentClass<any, any>
    | FunctionComponent<any>
  data-id?: string
  tone?: 
    | "critical"
    | "neutral"
    | "neutral.dark"
    | "neutral.light"
    | "positive"
  truncate?: boolean
  variant?: 
    | "body"
    | "body-small"
    | "caption"
    | "overline-text"
    | "subtitle"
    | "subtitle-small"
  weight?: 
    | "medium"
    | "regular"
}
`;

exports[`TextFieldBase 1`] = `
{
  aria-describedby?: string
  aria-label?: string
  aria-labelledby?: string
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  defaultValue?: 
    | number
    | string
  disabled?: boolean
  domProps?: HTMLAttributes<HTMLInputElement> | undefined
  endAdornment?: ReactNode
  error?: boolean
  helperText?: ReactNode
  id: string
  inputRef?: 
    | (instance: any) => void
    | RefObject<any>
  label?: string
  muiProps?: StandardTextFieldProps | FilledTextFieldProps | OutlinedTextFieldProps | undefined
  name?: string
  onBlur?: (event: FocusEvent<HTMLInputElement>) => void
  onChange?: (event: ChangeEvent<HTMLInputElement>, value?: string | undefined) => void
  onFocus?: (event: FocusEvent<HTMLInputElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLInputElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLInputElement>) => void
  placeholder?: string
  size?: 
    | "medium"
    | "small"
  startAdornment?: ReactNode
  type?: string
  value?: 
    | number
    | string
  variant?: 
    | "filled"
    | "outlined"
}
`;

exports[`TextLink 1`] = `
{
  children?: ReactNode
  data-id?: string
  domProps?: AnchorHTMLAttributes<HTMLAnchorElement> | undefined
  href: string
  onClick?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  target?: string
}
`;

exports[`TextLinkRenderer 1`] = `
{
  children: (renderProps: TextLinkRenderProps) => ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<...>)>
}
`;

exports[`TrackedLink 1`] = `
{
  children?: ReactNode
  data-id?: string
  domProps?: AnchorHTMLAttributes<HTMLAnchorElement> | undefined
  href: string
  onClick?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  target?: string
  trackingLabel: ReactNode
  trackingType: string
}
`;

exports[`TrackingDisable 1`] = `
{
  children: ReactNode
}
`;

exports[`TrackingProvider 1`] = `
{
  children: ReactNode
  onTrackingCapture: TrackingEventHandler
}
`;
