// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Alert 1`] = `
{
  about?: string
  accessKey?: string
  action?: ReactNode
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<AlertClassKey, string>>
  closeText?: string
  color?: 
    | "error"
    | "info"
    | "success"
    | "warning"
  component?: 
    | "a"
    | "abbr"
    | "address"
    | "area"
    | "article"
    | "aside"
    | "audio"
    | "b"
    | "base"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "body"
    | "br"
    | "button"
    | "canvas"
    | "caption"
    | "cite"
    | "code"
    | "col"
    | "colgroup"
    | "data"
    | "datalist"
    | "dd"
    | "del"
    | "details"
    | "dfn"
    | "dialog"
    | "div"
    | "dl"
    | "dt"
    | "em"
    | "embed"
    | "fieldset"
    | "figcaption"
    | "figure"
    | "footer"
    | "form"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "hr"
    | "html"
    | "i"
    | "iframe"
    | "img"
    | "input"
    | "ins"
    | "kbd"
    | "keygen"
    | "label"
    | "legend"
    | "li"
    | "link"
    | "main"
    | "map"
    | "mark"
    | "menu"
    | "menuitem"
    | "meta"
    | "meter"
    | "nav"
    | "noindex"
    | "noscript"
    | "object"
    | "ol"
    | "optgroup"
    | "option"
    | "output"
    | "p"
    | "param"
    | "picture"
    | "pre"
    | "progress"
    | "q"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "script"
    | "section"
    | "select"
    | "small"
    | "source"
    | "span"
    | "strong"
    | "style"
    | "sub"
    | "summary"
    | "sup"
    | "table"
    | "tbody"
    | "td"
    | "template"
    | "textarea"
    | "tfoot"
    | "th"
    | "thead"
    | "time"
    | "title"
    | "tr"
    | "track"
    | "u"
    | "ul"
    | "var"
    | "video"
    | "wbr"
    | "webview"
    | ComponentClass<HTMLAttributes<HTMLElement>, any>
    | FunctionComponent<HTMLAttributes<HTMLElement>>
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  elevation?: number
  hidden?: boolean
  icon?: ReactNode
  iconMapping?: Partial<Record<Color, ReactNode>>
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  onAbort?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLDivElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onBlur?: (event: FocusEvent<HTMLDivElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onChange?: (event: FormEvent<HTMLDivElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLDivElement>) => void
  onClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClose?: (event: SyntheticEvent<Element, Event>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCut?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLDivElement>) => void
  onDragCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnd?: (event: DragEvent<HTMLDivElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnter?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragExit?: (event: DragEvent<HTMLDivElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeave?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragOver?: (event: DragEvent<HTMLDivElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragStart?: (event: DragEvent<HTMLDivElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDrop?: (event: DragEvent<HTMLDivElement>) => void
  onDropCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLDivElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onInput?: (event: FormEvent<HTMLDivElement>) => void
  onInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onInvalid?: (event: FormEvent<HTMLDivElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLDivElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPause?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onReset?: (event: FormEvent<HTMLDivElement>) => void
  onResetCapture?: (event: FormEvent<HTMLDivElement>) => void
  onScroll?: (event: UIEvent<HTMLDivElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLDivElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLDivElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLDivElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLDivElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLDivElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLDivElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLDivElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  resource?: string
  results?: number
  role?: string
  security?: string
  severity?: 
    | "error"
    | "info"
    | "success"
    | "warning"
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  square?: boolean
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  variant?: 
    | "filled"
    | "outlined"
    | "standard"
  vocab?: string
}
`;

exports[`AppBar 1`] = `
{
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<AppBarClassKey, string>>
  color?: 
    | "default"
    | "inherit"
    | "primary"
    | "secondary"
  component?: 
    | "a"
    | "abbr"
    | "address"
    | "area"
    | "article"
    | "aside"
    | "audio"
    | "b"
    | "base"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "body"
    | "br"
    | "button"
    | "canvas"
    | "caption"
    | "cite"
    | "code"
    | "col"
    | "colgroup"
    | "data"
    | "datalist"
    | "dd"
    | "del"
    | "details"
    | "dfn"
    | "dialog"
    | "div"
    | "dl"
    | "dt"
    | "em"
    | "embed"
    | "fieldset"
    | "figcaption"
    | "figure"
    | "footer"
    | "form"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "hr"
    | "html"
    | "i"
    | "iframe"
    | "img"
    | "input"
    | "ins"
    | "kbd"
    | "keygen"
    | "label"
    | "legend"
    | "li"
    | "link"
    | "main"
    | "map"
    | "mark"
    | "menu"
    | "menuitem"
    | "meta"
    | "meter"
    | "nav"
    | "noindex"
    | "noscript"
    | "object"
    | "ol"
    | "optgroup"
    | "option"
    | "output"
    | "p"
    | "param"
    | "picture"
    | "pre"
    | "progress"
    | "q"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "script"
    | "section"
    | "select"
    | "small"
    | "source"
    | "span"
    | "strong"
    | "style"
    | "sub"
    | "summary"
    | "sup"
    | "table"
    | "tbody"
    | "td"
    | "template"
    | "textarea"
    | "tfoot"
    | "th"
    | "thead"
    | "time"
    | "title"
    | "tr"
    | "track"
    | "u"
    | "ul"
    | "var"
    | "video"
    | "wbr"
    | "webview"
    | ComponentClass<HTMLAttributes<HTMLElement>, any>
    | FunctionComponent<HTMLAttributes<HTMLElement>>
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  elevation?: number
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  onAbort?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLDivElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onBlur?: (event: FocusEvent<HTMLDivElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onChange?: (event: FormEvent<HTMLDivElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLDivElement>) => void
  onClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCut?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLDivElement>) => void
  onDragCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnd?: (event: DragEvent<HTMLDivElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnter?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragExit?: (event: DragEvent<HTMLDivElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeave?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragOver?: (event: DragEvent<HTMLDivElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragStart?: (event: DragEvent<HTMLDivElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDrop?: (event: DragEvent<HTMLDivElement>) => void
  onDropCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLDivElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onInput?: (event: FormEvent<HTMLDivElement>) => void
  onInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onInvalid?: (event: FormEvent<HTMLDivElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLDivElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPause?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onReset?: (event: FormEvent<HTMLDivElement>) => void
  onResetCapture?: (event: FormEvent<HTMLDivElement>) => void
  onScroll?: (event: UIEvent<HTMLDivElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLDivElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLDivElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLDivElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLDivElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLDivElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLDivElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLDivElement>) => void
  placeholder?: string
  position?: 
    | "absolute"
    | "fixed"
    | "relative"
    | "static"
    | "sticky"
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  resource?: string
  results?: number
  role?: string
  security?: string
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  square?: boolean
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  variant?: 
    | "elevation"
    | "outlined"
  vocab?: string
}
`;

exports[`Box 1`] = `
{
  about?: string
  accept?: string
  acceptCharset?: string
  accessKey?: string
  action?: string
  alignItems?: ResponsiveProp<
    | "center"
    | "flex-end"
    | "flex-start"
    | "stretch"
  >
  alignSelf?: ResponsiveProp<
    | "center"
    | "flex-end"
    | "flex-start"
    | "stretch"
  >
  allowFullScreen?: boolean
  allowTransparency?: boolean
  alt?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  as?: string
  async?: boolean
  autoCapitalize?: string
  autoComplete?: string
  autoCorrect?: string
  autoFocus?: boolean
  autoPlay?: boolean
  autoSave?: string
  backgroundColor?: ResponsiveProp<
    | "blue"
    | "green"
    | "grey"
    | "grey16"
    | "grey24"
    | "grey4"
    | "grey48"
    | "grey56"
    | "grey8"
    | "grey80"
    | "lightBlue"
    | "lightGreen"
    | "lightGrey"
    | "lightOrange"
    | "orange"
    | "purple"
    | "red"
    | "redPink"
    | "transparent"
    | "white"
  >
  boxShadow?: 
    | "borderCritical"
    | "borderFormAccent"
    | "borderFormAccentLarge"
    | "borderFormHover"
    | "borderStandard"
    | "borderStandardInverted"
    | "borderStandardInvertedLarge"
    | "borderWeakPrimary"
    | "borderWeakPrimaryDisabled"
    | "borderWeakSecondary"
    | "borderWeakSecondaryDisabled"
    | "large"
    | "medium"
    | "outlineFocus"
    | "small"
  capture?: 
    | false
    | string
    | true
  cellPadding?: 
    | number
    | string
  cellSpacing?: 
    | number
    | string
  challenge?: string
  charSet?: string
  checked?: boolean
  children?: ReactNode
  cite?: string
  classID?: string
  className?: string
  colSpan?: number
  color?: string
  cols?: number
  component?: 
    | "a"
    | "abbr"
    | "address"
    | "animate"
    | "animateMotion"
    | "animateTransform"
    | "area"
    | "article"
    | "aside"
    | "audio"
    | "b"
    | "base"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "body"
    | "br"
    | "button"
    | "canvas"
    | "caption"
    | "circle"
    | "cite"
    | "clipPath"
    | "code"
    | "col"
    | "colgroup"
    | "data"
    | "datalist"
    | "dd"
    | "defs"
    | "del"
    | "desc"
    | "details"
    | "dfn"
    | "dialog"
    | "div"
    | "dl"
    | "dt"
    | "ellipse"
    | "em"
    | "embed"
    | "feBlend"
    | "feColorMatrix"
    | "feComponentTransfer"
    | "feComposite"
    | "feConvolveMatrix"
    | "feDiffuseLighting"
    | "feDisplacementMap"
    | "feDistantLight"
    | "feDropShadow"
    | "feFlood"
    | "feFuncA"
    | "feFuncB"
    | "feFuncG"
    | "feFuncR"
    | "feGaussianBlur"
    | "feImage"
    | "feMerge"
    | "feMergeNode"
    | "feMorphology"
    | "feOffset"
    | "fePointLight"
    | "feSpecularLighting"
    | "feSpotLight"
    | "feTile"
    | "feTurbulence"
    | "fieldset"
    | "figcaption"
    | "figure"
    | "filter"
    | "footer"
    | "foreignObject"
    | "form"
    | "g"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "hr"
    | "html"
    | "i"
    | "iframe"
    | "image"
    | "img"
    | "input"
    | "ins"
    | "kbd"
    | "keygen"
    | "label"
    | "legend"
    | "li"
    | "line"
    | "linearGradient"
    | "link"
    | "main"
    | "map"
    | "mark"
    | "marker"
    | "mask"
    | "menu"
    | "menuitem"
    | "meta"
    | "metadata"
    | "meter"
    | "mpath"
    | "nav"
    | "noindex"
    | "noscript"
    | "object"
    | "ol"
    | "optgroup"
    | "option"
    | "output"
    | "p"
    | "param"
    | "path"
    | "pattern"
    | "picture"
    | "polygon"
    | "polyline"
    | "pre"
    | "progress"
    | "q"
    | "radialGradient"
    | "rect"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "script"
    | "section"
    | "select"
    | "small"
    | "source"
    | "span"
    | "stop"
    | "strong"
    | "style"
    | "sub"
    | "summary"
    | "sup"
    | "svg"
    | "switch"
    | "symbol"
    | "table"
    | "tbody"
    | "td"
    | "template"
    | "text"
    | "textPath"
    | "textarea"
    | "tfoot"
    | "th"
    | "thead"
    | "time"
    | "title"
    | "tr"
    | "track"
    | "tspan"
    | "u"
    | "ul"
    | "use"
    | "var"
    | "video"
    | "view"
    | "wbr"
    | "webview"
    | ComponentClass<any, any>
    | FunctionComponent<any>
  content?: string
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  controls?: boolean
  coords?: string
  crossOrigin?: string
  cursor?: string
  dangerouslySetInnerHTML?: { __html: string; }
  data?: string
  datatype?: string
  dateTime?: string
  default?: boolean
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  defer?: boolean
  dir?: string
  disabled?: boolean
  display?: ResponsiveProp<
    | "block"
    | "flex"
    | "inline"
    | "inline-block"
    | "inline-flex"
    | "none"
  >
  download?: any
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  encType?: string
  flexDirection?: ResponsiveProp<
    | "column"
    | "column-reverse"
    | "row"
    | "row-reverse"
  >
  form?: string
  formAction?: string
  formEncType?: string
  formMethod?: string
  formNoValidate?: boolean
  formTarget?: string
  frameBorder?: 
    | number
    | string
  headers?: string
  height?: "full"
  hidden?: boolean
  high?: number
  href?: string
  hrefLang?: string
  htmlFor?: string
  httpEquiv?: string
  id?: string
  inlist?: any
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  integrity?: string
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  justifyContent?: ResponsiveProp<
    | "center"
    | "flex-end"
    | "flex-start"
    | "space-between"
  >
  keyParams?: string
  keyType?: string
  kind?: string
  label?: string
  lang?: string
  list?: string
  loop?: boolean
  low?: number
  manifest?: string
  margin?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  marginBottom?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  marginHeight?: number
  marginLeft?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  marginRight?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  marginTop?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  marginWidth?: number
  marginX?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  marginY?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  max?: 
    | number
    | string
  maxLength?: number
  media?: string
  mediaGroup?: string
  method?: string
  min?: 
    | number
    | string
  minLength?: number
  multiple?: boolean
  muted?: boolean
  name?: string
  noValidate?: boolean
  nonce?: string
  onAbort?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLElement>) => void
  onBlur?: (event: FocusEvent<HTMLElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onChange?: (event: FormEvent<HTMLElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLElement>) => void
  onClick?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLElement>) => void
  onCut?: (event: ClipboardEvent<HTMLElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLElement>) => void
  onDragCapture?: (event: DragEvent<HTMLElement>) => void
  onDragEnd?: (event: DragEvent<HTMLElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLElement>) => void
  onDragEnter?: (event: DragEvent<HTMLElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLElement>) => void
  onDragExit?: (event: DragEvent<HTMLElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLElement>) => void
  onDragLeave?: (event: DragEvent<HTMLElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLElement>) => void
  onDragOver?: (event: DragEvent<HTMLElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLElement>) => void
  onDragStart?: (event: DragEvent<HTMLElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLElement>) => void
  onDrop?: (event: DragEvent<HTMLElement>) => void
  onDropCapture?: (event: DragEvent<HTMLElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLElement>) => void
  onInput?: (event: FormEvent<HTMLElement>) => void
  onInputCapture?: (event: FormEvent<HTMLElement>) => void
  onInvalid?: (event: FormEvent<HTMLElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLElement>) => void
  onPause?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onReset?: (event: FormEvent<HTMLElement>) => void
  onResetCapture?: (event: FormEvent<HTMLElement>) => void
  onScroll?: (event: UIEvent<HTMLElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLElement>) => void
  open?: boolean
  optimum?: number
  overflow?: 
    | "auto"
    | "hidden"
    | "scroll"
    | "visible"
  padding?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  paddingBottom?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  paddingLeft?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  paddingRight?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  paddingTop?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  paddingX?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  paddingY?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  pattern?: string
  placeholder?: string
  playsInline?: boolean
  pointerEvents?: 
    | "-moz-initial"
    | "all"
    | "auto"
    | "fill"
    | "inherit"
    | "initial"
    | "none"
    | "painted"
    | "revert"
    | "stroke"
    | "unset"
    | "visible"
    | "visibleFill"
    | "visiblePainted"
    | "visibleStroke"
  position?: ResponsiveProp<
    | "-moz-initial"
    | "-webkit-sticky"
    | "absolute"
    | "fixed"
    | "inherit"
    | "initial"
    | "relative"
    | "revert"
    | "static"
    | "sticky"
    | "unset"
  >
  poster?: string
  prefix?: string
  preload?: string
  property?: string
  radioGroup?: string
  readOnly?: boolean
  rel?: string
  required?: boolean
  resource?: string
  results?: number
  reversed?: boolean
  role?: string
  rowSpan?: number
  rows?: number
  sandbox?: string
  scope?: string
  scoped?: boolean
  scrolling?: string
  seamless?: boolean
  security?: string
  selected?: boolean
  shape?: string
  showAnts?: boolean
  size?: number
  sizes?: string
  slot?: string
  span?: number
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  src?: string
  srcDoc?: string
  srcLang?: string
  srcSet?: string
  start?: number
  step?: 
    | number
    | string
  style?: CSSProperties
  summary?: string
  tabIndex?: number
  target?: string
  textAlign?: ResponsiveProp<
    | "-moz-initial"
    | "center"
    | "end"
    | "inherit"
    | "initial"
    | "justify"
    | "left"
    | "match-parent"
    | "revert"
    | "right"
    | "start"
    | "unset"
  >
  title?: string
  transform?: "touchable"
  transition?: 
    | "fast"
    | "touchable"
  translate?: 
    | "no"
    | "yes"
  type?: string
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  useMap?: string
  value?: 
    | number
    | string
    | string[]
  vocab?: string
  width?: "full"
  wmode?: string
  wrap?: string
}
`;

exports[`Button 1`] = `
{
  TouchRippleProps?: Partial<TouchRippleProps>
  about?: string
  accessKey?: string
  action?: 
    | (instance: ButtonBaseActions | null) => void
    | RefObject<ButtonBaseActions>
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoFocus?: boolean
  autoSave?: string
  buttonRef?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  centerRipple?: boolean
  children?: ReactNode
  className?: string
  classes?: Partial<Record<ButtonClassKey, string>>
  color?: 
    | "default"
    | "inherit"
    | "primary"
    | "secondary"
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  data-id?: string
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  disableElevation?: boolean
  disableFocusRipple?: boolean
  disableRipple?: boolean
  disableTouchRipple?: boolean
  disabled?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  endIcon?: ReactNode
  focusRipple?: boolean
  focusVisibleClassName?: string
  form?: string
  formAction?: string
  formEncType?: string
  formMethod?: string
  formNoValidate?: boolean
  formTarget?: string
  fullWidth?: boolean
  hidden?: boolean
  href?: string
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  name?: string
  onAbort?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLButtonElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onBlur?: (event: FocusEvent<HTMLButtonElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLButtonElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onChange?: (event: FormEvent<HTMLButtonElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLButtonElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onCut?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLButtonElement>) => void
  onDragCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragEnd?: (event: DragEvent<HTMLButtonElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragEnter?: (event: DragEvent<HTMLButtonElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragExit?: (event: DragEvent<HTMLButtonElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragLeave?: (event: DragEvent<HTMLButtonElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragOver?: (event: DragEvent<HTMLButtonElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragStart?: (event: DragEvent<HTMLButtonElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDrop?: (event: DragEvent<HTMLButtonElement>) => void
  onDropCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLButtonElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLButtonElement>) => void
  onFocusVisible?: (event: FocusEvent<any>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onInput?: (event: FormEvent<HTMLButtonElement>) => void
  onInputCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onInvalid?: (event: FormEvent<HTMLButtonElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onPause?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onReset?: (event: FormEvent<HTMLButtonElement>) => void
  onResetCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onScroll?: (event: UIEvent<HTMLButtonElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLButtonElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLButtonElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLButtonElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLButtonElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLButtonElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLButtonElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLButtonElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: HTMLButtonElement | null) => void
    | RefObject<HTMLButtonElement>
  resource?: string
  results?: number
  role?: string
  security?: string
  size?: 
    | "large"
    | "medium"
    | "small"
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  startIcon?: ReactNode
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  type?: 
    | "button"
    | "reset"
    | "submit"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  value?: 
    | number
    | string
    | string[]
  variant?: 
    | "contained"
    | "outlined"
    | "text"
  vocab?: string
}
`;

exports[`Card 1`] = `
{
  backgroundColor?: 
    | "grey4"
    | "transparent"
    | "white"
  children?: ReactNode
  data-id?: string
  padding?: 
    | "large"
    | "medium"
    | "small"
}
`;

exports[`CardStackSection 1`] = `
{
  children: ReactNode
  data-id?: string
  size?: 
    | "large"
    | "medium"
    | "small"
  variant?: 
    | "card"
    | "card-padded"
    | "widget"
}
`;

exports[`Checkbox 1`] = `
{
  checked: boolean
  className?: string
  data-id?: string
  disabled?: boolean
  error?: boolean
  helperText?: string
  label: string
  name: string
  onChange: (event: ChangeEvent<HTMLInputElement>, checked: boolean) => void
  required?: boolean
  value?: 
    | number
    | string
    | string[]
}
`;

exports[`CircularProgress 1`] = `
{
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<CircularProgressClassKey, string>>
  color?: 
    | "inherit"
    | "primary"
    | "secondary"
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  disableShrink?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  onAbort?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLDivElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onBlur?: (event: FocusEvent<HTMLDivElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onChange?: (event: FormEvent<HTMLDivElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLDivElement>) => void
  onClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCut?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLDivElement>) => void
  onDragCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnd?: (event: DragEvent<HTMLDivElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnter?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragExit?: (event: DragEvent<HTMLDivElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeave?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragOver?: (event: DragEvent<HTMLDivElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragStart?: (event: DragEvent<HTMLDivElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDrop?: (event: DragEvent<HTMLDivElement>) => void
  onDropCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLDivElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onInput?: (event: FormEvent<HTMLDivElement>) => void
  onInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onInvalid?: (event: FormEvent<HTMLDivElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLDivElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPause?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onReset?: (event: FormEvent<HTMLDivElement>) => void
  onResetCapture?: (event: FormEvent<HTMLDivElement>) => void
  onScroll?: (event: UIEvent<HTMLDivElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLDivElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLDivElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLDivElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLDivElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLDivElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLDivElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLDivElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  resource?: string
  results?: number
  role?: string
  security?: string
  size?: 
    | number
    | string
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  thickness?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  value?: number
  variant?: 
    | "determinate"
    | "indeterminate"
    | "static"
  vocab?: string
}
`;

exports[`Collapse 1`] = `
{
  addEndListener?: EndHandler
  appear?: boolean
  children?: ReactNode
  className?: string
  classes?: Partial<Record<CollapseClassKey, string>>
  collapsedHeight?: 
    | number
    | string
  component?: 
    | "a"
    | "abbr"
    | "address"
    | "area"
    | "article"
    | "aside"
    | "audio"
    | "b"
    | "base"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "body"
    | "br"
    | "button"
    | "canvas"
    | "caption"
    | "cite"
    | "code"
    | "col"
    | "colgroup"
    | "data"
    | "datalist"
    | "dd"
    | "del"
    | "details"
    | "dfn"
    | "dialog"
    | "div"
    | "dl"
    | "dt"
    | "em"
    | "embed"
    | "fieldset"
    | "figcaption"
    | "figure"
    | "footer"
    | "form"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "hr"
    | "html"
    | "i"
    | "iframe"
    | "img"
    | "input"
    | "ins"
    | "kbd"
    | "keygen"
    | "label"
    | "legend"
    | "li"
    | "link"
    | "main"
    | "map"
    | "mark"
    | "menu"
    | "menuitem"
    | "meta"
    | "meter"
    | "nav"
    | "noindex"
    | "noscript"
    | "object"
    | "ol"
    | "optgroup"
    | "option"
    | "output"
    | "p"
    | "param"
    | "picture"
    | "pre"
    | "progress"
    | "q"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "script"
    | "section"
    | "select"
    | "small"
    | "source"
    | "span"
    | "strong"
    | "style"
    | "sub"
    | "summary"
    | "sup"
    | "table"
    | "tbody"
    | "td"
    | "template"
    | "textarea"
    | "tfoot"
    | "th"
    | "thead"
    | "time"
    | "title"
    | "tr"
    | "track"
    | "u"
    | "ul"
    | "var"
    | "video"
    | "wbr"
    | "webview"
    | ComponentClass<TransitionProps, any>
    | FunctionComponent<TransitionProps>
  enter?: boolean
  exit?: boolean
  in?: boolean
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  mountOnEnter?: boolean
  onEnter?: EnterHandler
  onEntered?: EnterHandler
  onEntering?: EnterHandler
  onExit?: ExitHandler
  onExited?: ExitHandler
  onExiting?: ExitHandler
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  style?: CSSProperties
  theme?: {
    breakpoints: {
      between: (start: number | "xs" | "sm" | "md" | "lg" | "xl", end: number | "xs" | "sm" | "md" | "lg" | "xl") => string
      down: (key: number | "xs" | "sm" | "md" | "lg" | "xl") => string
      keys: Breakpoint[]
      only: (key: Breakpoint) => string
      up: (key: number | "xs" | "sm" | "md" | "lg" | "xl") => string
      values: BreakpointValues
      width: (key: Breakpoint) => number
    }
    direction: 
      | "ltr"
      | "rtl"
    mixins: {
      gutters: (styles?: CSSProperties | undefined) => CSSProperties
      toolbar: CSSProperties
    }
    overrides?: Overrides
    palette: {
      action: {
        active: string
        disabled: string
        disabledBackground: string
        hover: string
        hoverOpacity: number
        selected: string
      }
      augmentColor: { (color: Partial<Color>, mainShade?: string | number | undefined, lightShade?: string | number | undefined, darkShade?: string | number | undefined): PaletteColor; (color: PaletteColorOptions): PaletteColor; }
      background: {
        default: string
        paper: string
      }
      common: {
        black: string
        white: string
      }
      contrastThreshold: number
      divider: string
      error: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      getContrastText: (background: string) => string
      grey: {
        100: string
        200: string
        300: string
        400: string
        50: string
        500: string
        600: string
        700: string
        800: string
        900: string
        A100: string
        A200: string
        A400: string
        A700: string
      }
      info: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      primary: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      secondary: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      success: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      text: {
        disabled: string
        hint: string
        primary: string
        secondary: string
      }
      tonalOffset: number
      type: 
        | "dark"
        | "light"
      warning: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
    }
    props?: ComponentsProps
    shadows: Shadows
    shape: {
      borderRadius: number
    }
    spacing: {
    }
    transitions: {
      create: (props: string | string[], options?: Partial<{ duration: ReactText; easing: string; delay: ReactText; }> | undefined) => string
      duration: {
        complex: number
        enteringScreen: number
        leavingScreen: number
        short: number
        shorter: number
        shortest: number
        standard: number
      }
      easing: {
        easeIn: string
        easeInOut: string
        easeOut: string
        sharp: string
      }
      getAutoHeightDuration: (height: number) => number
    }
    typography: {
      body1: CSSProperties
      body2: CSSProperties
      button: CSSProperties
      caption: CSSProperties
      fontFamily: string
      fontSize: number
      fontWeightBold: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      fontWeightLight: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      fontWeightMedium: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      fontWeightRegular: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      h1: CSSProperties
      h2: CSSProperties
      h3: CSSProperties
      h4: CSSProperties
      h5: CSSProperties
      h6: CSSProperties
      overline: CSSProperties
      pxToRem: (px: number) => string
      subtitle1: CSSProperties
      subtitle2: CSSProperties
    }
    zIndex: {
      appBar: number
      drawer: number
      mobileStepper: number
      modal: number
      snackbar: number
      speedDial: number
      tooltip: number
    }
  }
  timeout?: 
    | "auto"
    | number
    | { appear?: number | undefined; enter?: number | undefined; exit?: number | undefined; }
  unmountOnExit?: boolean
}
`;

exports[`Column 1`] = `
{
  children: ReactNode
  data-id?: string
  width?: 
    | "1/12"
    | "1/2"
    | "1/3"
    | "1/4"
    | "1/6"
    | "11/12"
    | "2/3"
    | "3/4"
    | "5/12"
    | "5/6"
    | "7/12"
    | "content"
    | "flex"
}
`;

exports[`Columns 1`] = `
{
  alignY?: 
    | "bottom"
    | "center"
    | "top"
  children: 
    | ReactElement<ColumnProps, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<...>)>
    | ReactElement<ColumnProps, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<...>)>[]
  collapseBelow?: 
    | "lg"
    | "md"
    | "sm"
    | "xl"
    | "xs"
  data-id?: string
  space?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
}
`;

exports[`ContentSection 1`] = `
{
  backgroundColor?: 
    | "grey"
    | "transparent"
    | "white"
  children?: ReactNode
  data-id?: string
}
`;

exports[`Divider 1`] = `
{
  data-id?: string
}
`;

exports[`ExpansionPanel 1`] = `
{
  TransitionComponent?: 
    | ComponentClass<TransitionProps, any>
    | FunctionComponent<TransitionProps>
  TransitionProps?: {
    addEndListener?: EndHandler
    appear?: boolean
    enter?: boolean
    exit?: boolean
    in?: boolean
    mountOnEnter?: boolean
    onEnter?: EnterHandler
    onEntered?: EnterHandler
    onEntering?: EnterHandler
    onExit?: ExitHandler
    onExited?: ExitHandler
    onExiting?: ExitHandler
    style?: CSSProperties
    timeout?: 
      | number
      | { appear?: number | undefined; enter?: number | undefined; exit?: number | undefined; }
    unmountOnExit?: boolean
  }
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<ExpansionPanelClassKey, string>>
  color?: string
  component?: 
    | "a"
    | "abbr"
    | "address"
    | "area"
    | "article"
    | "aside"
    | "audio"
    | "b"
    | "base"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "body"
    | "br"
    | "button"
    | "canvas"
    | "caption"
    | "cite"
    | "code"
    | "col"
    | "colgroup"
    | "data"
    | "datalist"
    | "dd"
    | "del"
    | "details"
    | "dfn"
    | "dialog"
    | "div"
    | "dl"
    | "dt"
    | "em"
    | "embed"
    | "fieldset"
    | "figcaption"
    | "figure"
    | "footer"
    | "form"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "hr"
    | "html"
    | "i"
    | "iframe"
    | "img"
    | "input"
    | "ins"
    | "kbd"
    | "keygen"
    | "label"
    | "legend"
    | "li"
    | "link"
    | "main"
    | "map"
    | "mark"
    | "menu"
    | "menuitem"
    | "meta"
    | "meter"
    | "nav"
    | "noindex"
    | "noscript"
    | "object"
    | "ol"
    | "optgroup"
    | "option"
    | "output"
    | "p"
    | "param"
    | "picture"
    | "pre"
    | "progress"
    | "q"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "script"
    | "section"
    | "select"
    | "small"
    | "source"
    | "span"
    | "strong"
    | "style"
    | "sub"
    | "summary"
    | "sup"
    | "table"
    | "tbody"
    | "td"
    | "template"
    | "textarea"
    | "tfoot"
    | "th"
    | "thead"
    | "time"
    | "title"
    | "tr"
    | "track"
    | "u"
    | "ul"
    | "var"
    | "video"
    | "wbr"
    | "webview"
    | ComponentClass<HTMLAttributes<HTMLElement>, any>
    | FunctionComponent<HTMLAttributes<HTMLElement>>
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultExpanded?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  disabled?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  elevation?: number
  expanded?: boolean
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  onAbort?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLDivElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onBlur?: (event: FocusEvent<HTMLDivElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onChange?: (event: ChangeEvent<{}>, expanded: boolean) => void
  onChangeCapture?: (event: FormEvent<HTMLDivElement>) => void
  onClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCut?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLDivElement>) => void
  onDragCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnd?: (event: DragEvent<HTMLDivElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnter?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragExit?: (event: DragEvent<HTMLDivElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeave?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragOver?: (event: DragEvent<HTMLDivElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragStart?: (event: DragEvent<HTMLDivElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDrop?: (event: DragEvent<HTMLDivElement>) => void
  onDropCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLDivElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onInput?: (event: FormEvent<HTMLDivElement>) => void
  onInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onInvalid?: (event: FormEvent<HTMLDivElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLDivElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPause?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onReset?: (event: FormEvent<HTMLDivElement>) => void
  onResetCapture?: (event: FormEvent<HTMLDivElement>) => void
  onScroll?: (event: UIEvent<HTMLDivElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLDivElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLDivElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLDivElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLDivElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLDivElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLDivElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLDivElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  resource?: string
  results?: number
  role?: string
  security?: string
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  square?: boolean
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  variant?: 
    | "elevation"
    | "outlined"
  vocab?: string
}
`;

exports[`ExpansionPanelDetails 1`] = `
{
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<"root", string>>
  color?: string
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  onAbort?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLDivElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onBlur?: (event: FocusEvent<HTMLDivElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onChange?: (event: FormEvent<HTMLDivElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLDivElement>) => void
  onClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCut?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLDivElement>) => void
  onDragCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnd?: (event: DragEvent<HTMLDivElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnter?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragExit?: (event: DragEvent<HTMLDivElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeave?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragOver?: (event: DragEvent<HTMLDivElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragStart?: (event: DragEvent<HTMLDivElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDrop?: (event: DragEvent<HTMLDivElement>) => void
  onDropCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLDivElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onInput?: (event: FormEvent<HTMLDivElement>) => void
  onInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onInvalid?: (event: FormEvent<HTMLDivElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLDivElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPause?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onReset?: (event: FormEvent<HTMLDivElement>) => void
  onResetCapture?: (event: FormEvent<HTMLDivElement>) => void
  onScroll?: (event: UIEvent<HTMLDivElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLDivElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLDivElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLDivElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLDivElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLDivElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLDivElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLDivElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  resource?: string
  results?: number
  role?: string
  security?: string
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  vocab?: string
}
`;

exports[`ExpansionPanelSummary 1`] = `
{
  IconButtonProps?: Partial<OverrideProps<IconButtonTypeMap<{}, "button">, "button">>
  TouchRippleProps?: Partial<TouchRippleProps>
  about?: string
  accessKey?: string
  action?: 
    | (instance: ButtonBaseActions | null) => void
    | RefObject<ButtonBaseActions>
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  buttonRef?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  centerRipple?: boolean
  children?: ReactNode
  className?: string
  classes?: Partial<Record<ExpansionPanelSummaryClassKey, string>>
  color?: string
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  disableRipple?: boolean
  disableTouchRipple?: boolean
  disabled?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  expandIcon?: ReactNode
  focusRipple?: boolean
  focusVisibleClassName?: string
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  onAbort?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLDivElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onBlur?: (event: FocusEvent<HTMLDivElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onChange?: (event: FormEvent<HTMLDivElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLDivElement>) => void
  onClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCut?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLDivElement>) => void
  onDragCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnd?: (event: DragEvent<HTMLDivElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnter?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragExit?: (event: DragEvent<HTMLDivElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeave?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragOver?: (event: DragEvent<HTMLDivElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragStart?: (event: DragEvent<HTMLDivElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDrop?: (event: DragEvent<HTMLDivElement>) => void
  onDropCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLDivElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onFocusVisible?: (event: FocusEvent<any>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onInput?: (event: FormEvent<HTMLDivElement>) => void
  onInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onInvalid?: (event: FormEvent<HTMLDivElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLDivElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPause?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onReset?: (event: FormEvent<HTMLDivElement>) => void
  onResetCapture?: (event: FormEvent<HTMLDivElement>) => void
  onScroll?: (event: UIEvent<HTMLDivElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLDivElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLDivElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLDivElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLDivElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLDivElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLDivElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLDivElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: HTMLDivElement | null) => void
    | RefObject<HTMLDivElement>
  resource?: string
  results?: number
  role?: string
  security?: string
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  vocab?: string
}
`;

exports[`Fab 1`] = `
{
  TouchRippleProps?: Partial<TouchRippleProps>
  about?: string
  accessKey?: string
  action?: 
    | (instance: ButtonBaseActions | null) => void
    | RefObject<ButtonBaseActions>
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoFocus?: boolean
  autoSave?: string
  buttonRef?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  centerRipple?: boolean
  children?: ReactNode
  className?: string
  classes?: Partial<Record<FabClassKey, string>>
  color?: 
    | "default"
    | "inherit"
    | "primary"
    | "secondary"
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  disableFocusRipple?: boolean
  disableRipple?: boolean
  disableTouchRipple?: boolean
  disabled?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  focusRipple?: boolean
  focusVisibleClassName?: string
  form?: string
  formAction?: string
  formEncType?: string
  formMethod?: string
  formNoValidate?: boolean
  formTarget?: string
  hidden?: boolean
  href?: string
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  name?: string
  onAbort?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLButtonElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onBlur?: (event: FocusEvent<HTMLButtonElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLButtonElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onChange?: (event: FormEvent<HTMLButtonElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLButtonElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onCut?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLButtonElement>) => void
  onDragCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragEnd?: (event: DragEvent<HTMLButtonElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragEnter?: (event: DragEvent<HTMLButtonElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragExit?: (event: DragEvent<HTMLButtonElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragLeave?: (event: DragEvent<HTMLButtonElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragOver?: (event: DragEvent<HTMLButtonElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragStart?: (event: DragEvent<HTMLButtonElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDrop?: (event: DragEvent<HTMLButtonElement>) => void
  onDropCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLButtonElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLButtonElement>) => void
  onFocusVisible?: (event: FocusEvent<any>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onInput?: (event: FormEvent<HTMLButtonElement>) => void
  onInputCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onInvalid?: (event: FormEvent<HTMLButtonElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onPause?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onReset?: (event: FormEvent<HTMLButtonElement>) => void
  onResetCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onScroll?: (event: UIEvent<HTMLButtonElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLButtonElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLButtonElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLButtonElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLButtonElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLButtonElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLButtonElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLButtonElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: HTMLButtonElement | null) => void
    | RefObject<HTMLButtonElement>
  resource?: string
  results?: number
  role?: string
  security?: string
  size?: 
    | "large"
    | "medium"
    | "small"
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  type?: 
    | "button"
    | "reset"
    | "submit"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  value?: 
    | number
    | string
    | string[]
  variant?: 
    | "extended"
    | "round"
  vocab?: string
}
`;

exports[`Fade 1`] = `
{
  addEndListener?: EndHandler
  appear?: boolean
  children: ReactNode
  enter?: boolean
  exit?: boolean
  in?: boolean
  mountOnEnter?: boolean
  onEnter?: EnterHandler
  onEntered?: EnterHandler
  onEntering?: EnterHandler
  onExit?: ExitHandler
  onExited?: ExitHandler
  onExiting?: ExitHandler
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  style?: CSSProperties
  theme?: {
    breakpoints: {
      between: (start: number | "xs" | "sm" | "md" | "lg" | "xl", end: number | "xs" | "sm" | "md" | "lg" | "xl") => string
      down: (key: number | "xs" | "sm" | "md" | "lg" | "xl") => string
      keys: Breakpoint[]
      only: (key: Breakpoint) => string
      up: (key: number | "xs" | "sm" | "md" | "lg" | "xl") => string
      values: BreakpointValues
      width: (key: Breakpoint) => number
    }
    direction: 
      | "ltr"
      | "rtl"
    mixins: {
      gutters: (styles?: CSSProperties | undefined) => CSSProperties
      toolbar: CSSProperties
    }
    overrides?: Overrides
    palette: {
      action: {
        active: string
        disabled: string
        disabledBackground: string
        hover: string
        hoverOpacity: number
        selected: string
      }
      augmentColor: { (color: Partial<Color>, mainShade?: string | number | undefined, lightShade?: string | number | undefined, darkShade?: string | number | undefined): PaletteColor; (color: PaletteColorOptions): PaletteColor; }
      background: {
        default: string
        paper: string
      }
      common: {
        black: string
        white: string
      }
      contrastThreshold: number
      divider: string
      error: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      getContrastText: (background: string) => string
      grey: {
        100: string
        200: string
        300: string
        400: string
        50: string
        500: string
        600: string
        700: string
        800: string
        900: string
        A100: string
        A200: string
        A400: string
        A700: string
      }
      info: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      primary: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      secondary: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      success: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      text: {
        disabled: string
        hint: string
        primary: string
        secondary: string
      }
      tonalOffset: number
      type: 
        | "dark"
        | "light"
      warning: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
    }
    props?: ComponentsProps
    shadows: Shadows
    shape: {
      borderRadius: number
    }
    spacing: {
    }
    transitions: {
      create: (props: string | string[], options?: Partial<{ duration: ReactText; easing: string; delay: ReactText; }> | undefined) => string
      duration: {
        complex: number
        enteringScreen: number
        leavingScreen: number
        short: number
        shorter: number
        shortest: number
        standard: number
      }
      easing: {
        easeIn: string
        easeInOut: string
        easeOut: string
        sharp: string
      }
      getAutoHeightDuration: (height: number) => number
    }
    typography: {
      body1: CSSProperties
      body2: CSSProperties
      button: CSSProperties
      caption: CSSProperties
      fontFamily: string
      fontSize: number
      fontWeightBold: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      fontWeightLight: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      fontWeightMedium: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      fontWeightRegular: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      h1: CSSProperties
      h2: CSSProperties
      h3: CSSProperties
      h4: CSSProperties
      h5: CSSProperties
      h6: CSSProperties
      overline: CSSProperties
      pxToRem: (px: number) => string
      subtitle1: CSSProperties
      subtitle2: CSSProperties
    }
    zIndex: {
      appBar: number
      drawer: number
      mobileStepper: number
      modal: number
      snackbar: number
      speedDial: number
      tooltip: number
    }
  }
  timeout?: 
    | number
    | { appear?: number | undefined; enter?: number | undefined; exit?: number | undefined; }
  unmountOnExit?: boolean
}
`;

exports[`FormControl 1`] = `
{
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<FormControlClassKey, string>>
  color?: 
    | "primary"
    | "secondary"
  component?: 
    | "a"
    | "abbr"
    | "address"
    | "animate"
    | "animateMotion"
    | "animateTransform"
    | "area"
    | "article"
    | "aside"
    | "audio"
    | "b"
    | "base"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "body"
    | "br"
    | "button"
    | "canvas"
    | "caption"
    | "circle"
    | "cite"
    | "clipPath"
    | "code"
    | "col"
    | "colgroup"
    | "data"
    | "datalist"
    | "dd"
    | "defs"
    | "del"
    | "desc"
    | "details"
    | "dfn"
    | "dialog"
    | "div"
    | "dl"
    | "dt"
    | "ellipse"
    | "em"
    | "embed"
    | "feBlend"
    | "feColorMatrix"
    | "feComponentTransfer"
    | "feComposite"
    | "feConvolveMatrix"
    | "feDiffuseLighting"
    | "feDisplacementMap"
    | "feDistantLight"
    | "feDropShadow"
    | "feFlood"
    | "feFuncA"
    | "feFuncB"
    | "feFuncG"
    | "feFuncR"
    | "feGaussianBlur"
    | "feImage"
    | "feMerge"
    | "feMergeNode"
    | "feMorphology"
    | "feOffset"
    | "fePointLight"
    | "feSpecularLighting"
    | "feSpotLight"
    | "feTile"
    | "feTurbulence"
    | "fieldset"
    | "figcaption"
    | "figure"
    | "filter"
    | "footer"
    | "foreignObject"
    | "form"
    | "g"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "hr"
    | "html"
    | "i"
    | "iframe"
    | "image"
    | "img"
    | "input"
    | "ins"
    | "kbd"
    | "keygen"
    | "label"
    | "legend"
    | "li"
    | "line"
    | "linearGradient"
    | "link"
    | "main"
    | "map"
    | "mark"
    | "marker"
    | "mask"
    | "menu"
    | "menuitem"
    | "meta"
    | "metadata"
    | "meter"
    | "mpath"
    | "nav"
    | "noindex"
    | "noscript"
    | "object"
    | "ol"
    | "optgroup"
    | "option"
    | "output"
    | "p"
    | "param"
    | "path"
    | "pattern"
    | "picture"
    | "polygon"
    | "polyline"
    | "pre"
    | "progress"
    | "q"
    | "radialGradient"
    | "rect"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "script"
    | "section"
    | "select"
    | "small"
    | "source"
    | "span"
    | "stop"
    | "strong"
    | "style"
    | "sub"
    | "summary"
    | "sup"
    | "svg"
    | "switch"
    | "symbol"
    | "table"
    | "tbody"
    | "td"
    | "template"
    | "text"
    | "textPath"
    | "textarea"
    | "tfoot"
    | "th"
    | "thead"
    | "time"
    | "title"
    | "tr"
    | "track"
    | "tspan"
    | "u"
    | "ul"
    | "use"
    | "var"
    | "video"
    | "view"
    | "wbr"
    | "webview"
    | ComponentClass<any, any>
    | FunctionComponent<any>
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  data-id?: string
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  disabled?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  error?: boolean
  fullWidth?: boolean
  hidden?: boolean
  hiddenLabel?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  margin?: 
    | "dense"
    | "none"
    | "normal"
  onAbort?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLDivElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onBlur?: (event: FocusEvent<HTMLDivElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onChange?: (event: FormEvent<HTMLDivElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLDivElement>) => void
  onClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCut?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLDivElement>) => void
  onDragCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnd?: (event: DragEvent<HTMLDivElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnter?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragExit?: (event: DragEvent<HTMLDivElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeave?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragOver?: (event: DragEvent<HTMLDivElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragStart?: (event: DragEvent<HTMLDivElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDrop?: (event: DragEvent<HTMLDivElement>) => void
  onDropCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLDivElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onInput?: (event: FormEvent<HTMLDivElement>) => void
  onInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onInvalid?: (event: FormEvent<HTMLDivElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLDivElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPause?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onReset?: (event: FormEvent<HTMLDivElement>) => void
  onResetCapture?: (event: FormEvent<HTMLDivElement>) => void
  onScroll?: (event: UIEvent<HTMLDivElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLDivElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLDivElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLDivElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLDivElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLDivElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLDivElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLDivElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: HTMLDivElement | null) => void
    | RefObject<HTMLDivElement>
  required?: boolean
  resource?: string
  results?: number
  role?: string
  security?: string
  size?: 
    | "medium"
    | "small"
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  variant?: 
    | "filled"
    | "outlined"
    | "standard"
  vocab?: string
}
`;

exports[`FormControlLabel 1`] = `
{
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  checked?: boolean
  children?: ReactNode
  className?: string
  classes?: Partial<Record<FormControlLabelClassKey, string>>
  color?: string
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  control: ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>
  dangerouslySetInnerHTML?: { __html: string; }
  data-id?: string
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  disabled?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  form?: string
  hidden?: boolean
  htmlFor?: string
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  inputRef?: 
    | (instance: any) => void
    | RefObject<any>
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  label: ReactNode
  labelPlacement?: 
    | "bottom"
    | "end"
    | "start"
    | "top"
  lang?: string
  name?: string
  onAbort?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLLabelElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLLabelElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLLabelElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLLabelElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLLabelElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLLabelElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLLabelElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLLabelElement>) => void
  onBlur?: (event: FocusEvent<HTMLLabelElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLLabelElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onChange?: (event: ChangeEvent<{}>, checked: boolean) => void
  onChangeCapture?: (event: FormEvent<HTMLLabelElement>) => void
  onClick?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLLabelElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLLabelElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLLabelElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLLabelElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLLabelElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLLabelElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLLabelElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLLabelElement>) => void
  onCut?: (event: ClipboardEvent<HTMLLabelElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLLabelElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLLabelElement>) => void
  onDragCapture?: (event: DragEvent<HTMLLabelElement>) => void
  onDragEnd?: (event: DragEvent<HTMLLabelElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLLabelElement>) => void
  onDragEnter?: (event: DragEvent<HTMLLabelElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLLabelElement>) => void
  onDragExit?: (event: DragEvent<HTMLLabelElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLLabelElement>) => void
  onDragLeave?: (event: DragEvent<HTMLLabelElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLLabelElement>) => void
  onDragOver?: (event: DragEvent<HTMLLabelElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLLabelElement>) => void
  onDragStart?: (event: DragEvent<HTMLLabelElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLLabelElement>) => void
  onDrop?: (event: DragEvent<HTMLLabelElement>) => void
  onDropCapture?: (event: DragEvent<HTMLLabelElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLLabelElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLLabelElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onInput?: (event: FormEvent<HTMLLabelElement>) => void
  onInputCapture?: (event: FormEvent<HTMLLabelElement>) => void
  onInvalid?: (event: FormEvent<HTMLLabelElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLLabelElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLLabelElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLLabelElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLLabelElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLLabelElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLLabelElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLLabelElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLLabelElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLLabelElement>) => void
  onPause?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onReset?: (event: FormEvent<HTMLLabelElement>) => void
  onResetCapture?: (event: FormEvent<HTMLLabelElement>) => void
  onScroll?: (event: UIEvent<HTMLLabelElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLLabelElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLLabelElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLLabelElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLLabelElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLLabelElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLLabelElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLLabelElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLLabelElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLLabelElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLLabelElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLLabelElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLLabelElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLLabelElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLLabelElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLLabelElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  resource?: string
  results?: number
  role?: string
  security?: string
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  value?: unknown
  vocab?: string
}
`;

exports[`FormHelperText 1`] = `
{
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<FormHelperTextClassKey, string>>
  color?: string
  component?: 
    | "abbr"
    | "address"
    | "article"
    | "aside"
    | "b"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "caption"
    | "cite"
    | "code"
    | "col"
    | "colgroup"
    | "dd"
    | "del"
    | "details"
    | "dfn"
    | "div"
    | "dt"
    | "em"
    | "embed"
    | "figcaption"
    | "figure"
    | "footer"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "hr"
    | "i"
    | "iframe"
    | "img"
    | "input"
    | "kbd"
    | "keygen"
    | "legend"
    | "main"
    | "mark"
    | "menu"
    | "menuitem"
    | "meter"
    | "nav"
    | "noindex"
    | "noscript"
    | "object"
    | "output"
    | "p"
    | "picture"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "section"
    | "small"
    | "span"
    | "strong"
    | "sub"
    | "summary"
    | "sup"
    | "table"
    | "tbody"
    | "td"
    | "tfoot"
    | "th"
    | "thead"
    | "time"
    | "tr"
    | "u"
    | "var"
    | "wbr"
    | "webview"
    | ComponentClass<HTMLAttributes<HTMLParagraphElement>, any>
    | FunctionComponent<HTMLAttributes<HTMLParagraphElement>>
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  data-id?: string
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  disabled?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  error?: boolean
  filled?: boolean
  focused?: boolean
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  margin?: "dense"
  onAbort?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLParagraphElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLParagraphElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLParagraphElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLParagraphElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLParagraphElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLParagraphElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLParagraphElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLParagraphElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLParagraphElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLParagraphElement>) => void
  onBlur?: (event: FocusEvent<HTMLParagraphElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLParagraphElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onChange?: (event: FormEvent<HTMLParagraphElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLParagraphElement>) => void
  onClick?: (event: MouseEvent<HTMLParagraphElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLParagraphElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLParagraphElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLParagraphElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLParagraphElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLParagraphElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLParagraphElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLParagraphElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLParagraphElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLParagraphElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLParagraphElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLParagraphElement>) => void
  onCut?: (event: ClipboardEvent<HTMLParagraphElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLParagraphElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLParagraphElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLParagraphElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLParagraphElement>) => void
  onDragCapture?: (event: DragEvent<HTMLParagraphElement>) => void
  onDragEnd?: (event: DragEvent<HTMLParagraphElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLParagraphElement>) => void
  onDragEnter?: (event: DragEvent<HTMLParagraphElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLParagraphElement>) => void
  onDragExit?: (event: DragEvent<HTMLParagraphElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLParagraphElement>) => void
  onDragLeave?: (event: DragEvent<HTMLParagraphElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLParagraphElement>) => void
  onDragOver?: (event: DragEvent<HTMLParagraphElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLParagraphElement>) => void
  onDragStart?: (event: DragEvent<HTMLParagraphElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLParagraphElement>) => void
  onDrop?: (event: DragEvent<HTMLParagraphElement>) => void
  onDropCapture?: (event: DragEvent<HTMLParagraphElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLParagraphElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLParagraphElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLParagraphElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLParagraphElement>) => void
  onInput?: (event: FormEvent<HTMLParagraphElement>) => void
  onInputCapture?: (event: FormEvent<HTMLParagraphElement>) => void
  onInvalid?: (event: FormEvent<HTMLParagraphElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLParagraphElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLParagraphElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLParagraphElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLParagraphElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLParagraphElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLParagraphElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLParagraphElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLParagraphElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLParagraphElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLParagraphElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLParagraphElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLParagraphElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLParagraphElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLParagraphElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLParagraphElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLParagraphElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLParagraphElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLParagraphElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLParagraphElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLParagraphElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLParagraphElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLParagraphElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLParagraphElement>) => void
  onPause?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLParagraphElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLParagraphElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLParagraphElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLParagraphElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLParagraphElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLParagraphElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLParagraphElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLParagraphElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLParagraphElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLParagraphElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLParagraphElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLParagraphElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLParagraphElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLParagraphElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLParagraphElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLParagraphElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onReset?: (event: FormEvent<HTMLParagraphElement>) => void
  onResetCapture?: (event: FormEvent<HTMLParagraphElement>) => void
  onScroll?: (event: UIEvent<HTMLParagraphElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLParagraphElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLParagraphElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLParagraphElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLParagraphElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLParagraphElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLParagraphElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLParagraphElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLParagraphElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLParagraphElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLParagraphElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLParagraphElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLParagraphElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLParagraphElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLParagraphElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLParagraphElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLParagraphElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  required?: boolean
  resource?: string
  results?: number
  role?: string
  security?: string
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  variant?: 
    | "filled"
    | "outlined"
    | "standard"
  vocab?: string
}
`;

exports[`FormLabel 1`] = `
{
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<FormLabelClassKey, string>>
  color?: 
    | "primary"
    | "secondary"
  component?: 
    | "a"
    | "abbr"
    | "address"
    | "animate"
    | "animateMotion"
    | "animateTransform"
    | "area"
    | "article"
    | "aside"
    | "audio"
    | "b"
    | "base"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "body"
    | "br"
    | "button"
    | "canvas"
    | "caption"
    | "circle"
    | "cite"
    | "clipPath"
    | "code"
    | "col"
    | "colgroup"
    | "data"
    | "datalist"
    | "dd"
    | "defs"
    | "del"
    | "desc"
    | "details"
    | "dfn"
    | "dialog"
    | "div"
    | "dl"
    | "dt"
    | "ellipse"
    | "em"
    | "embed"
    | "feBlend"
    | "feColorMatrix"
    | "feComponentTransfer"
    | "feComposite"
    | "feConvolveMatrix"
    | "feDiffuseLighting"
    | "feDisplacementMap"
    | "feDistantLight"
    | "feDropShadow"
    | "feFlood"
    | "feFuncA"
    | "feFuncB"
    | "feFuncG"
    | "feFuncR"
    | "feGaussianBlur"
    | "feImage"
    | "feMerge"
    | "feMergeNode"
    | "feMorphology"
    | "feOffset"
    | "fePointLight"
    | "feSpecularLighting"
    | "feSpotLight"
    | "feTile"
    | "feTurbulence"
    | "fieldset"
    | "figcaption"
    | "figure"
    | "filter"
    | "footer"
    | "foreignObject"
    | "form"
    | "g"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "hr"
    | "html"
    | "i"
    | "iframe"
    | "image"
    | "img"
    | "input"
    | "ins"
    | "kbd"
    | "keygen"
    | "label"
    | "legend"
    | "li"
    | "line"
    | "linearGradient"
    | "link"
    | "main"
    | "map"
    | "mark"
    | "marker"
    | "mask"
    | "menu"
    | "menuitem"
    | "meta"
    | "metadata"
    | "meter"
    | "mpath"
    | "nav"
    | "noindex"
    | "noscript"
    | "object"
    | "ol"
    | "optgroup"
    | "option"
    | "output"
    | "p"
    | "param"
    | "path"
    | "pattern"
    | "picture"
    | "polygon"
    | "polyline"
    | "pre"
    | "progress"
    | "q"
    | "radialGradient"
    | "rect"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "script"
    | "section"
    | "select"
    | "small"
    | "source"
    | "span"
    | "stop"
    | "strong"
    | "style"
    | "sub"
    | "summary"
    | "sup"
    | "svg"
    | "switch"
    | "symbol"
    | "table"
    | "tbody"
    | "td"
    | "template"
    | "text"
    | "textPath"
    | "textarea"
    | "tfoot"
    | "th"
    | "thead"
    | "time"
    | "title"
    | "tr"
    | "track"
    | "tspan"
    | "u"
    | "ul"
    | "use"
    | "var"
    | "video"
    | "view"
    | "wbr"
    | "webview"
    | ComponentClass<any, any>
    | FunctionComponent<any>
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  data-id?: string
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  disabled?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  error?: boolean
  filled?: boolean
  focused?: boolean
  form?: string
  hidden?: boolean
  htmlFor?: string
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  onAbort?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLLabelElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLLabelElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLLabelElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLLabelElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLLabelElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLLabelElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLLabelElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLLabelElement>) => void
  onBlur?: (event: FocusEvent<HTMLLabelElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLLabelElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onChange?: (event: FormEvent<HTMLLabelElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLLabelElement>) => void
  onClick?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLLabelElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLLabelElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLLabelElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLLabelElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLLabelElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLLabelElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLLabelElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLLabelElement>) => void
  onCut?: (event: ClipboardEvent<HTMLLabelElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLLabelElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLLabelElement>) => void
  onDragCapture?: (event: DragEvent<HTMLLabelElement>) => void
  onDragEnd?: (event: DragEvent<HTMLLabelElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLLabelElement>) => void
  onDragEnter?: (event: DragEvent<HTMLLabelElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLLabelElement>) => void
  onDragExit?: (event: DragEvent<HTMLLabelElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLLabelElement>) => void
  onDragLeave?: (event: DragEvent<HTMLLabelElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLLabelElement>) => void
  onDragOver?: (event: DragEvent<HTMLLabelElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLLabelElement>) => void
  onDragStart?: (event: DragEvent<HTMLLabelElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLLabelElement>) => void
  onDrop?: (event: DragEvent<HTMLLabelElement>) => void
  onDropCapture?: (event: DragEvent<HTMLLabelElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLLabelElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLLabelElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onInput?: (event: FormEvent<HTMLLabelElement>) => void
  onInputCapture?: (event: FormEvent<HTMLLabelElement>) => void
  onInvalid?: (event: FormEvent<HTMLLabelElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLLabelElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLLabelElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLLabelElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLLabelElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLLabelElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLLabelElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLLabelElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLLabelElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLLabelElement>) => void
  onPause?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onReset?: (event: FormEvent<HTMLLabelElement>) => void
  onResetCapture?: (event: FormEvent<HTMLLabelElement>) => void
  onScroll?: (event: UIEvent<HTMLLabelElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLLabelElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLLabelElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLLabelElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLLabelElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLLabelElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLLabelElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLLabelElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLLabelElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLLabelElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLLabelElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLLabelElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLLabelElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLLabelElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLLabelElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLLabelElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: HTMLLabelElement | null) => void
    | RefObject<HTMLLabelElement>
  required?: boolean
  resource?: string
  results?: number
  role?: string
  security?: string
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  vocab?: string
}
`;

exports[`Grid 1`] = `
{
  about?: string
  accessKey?: string
  alignContent?: 
    | "center"
    | "flex-end"
    | "flex-start"
    | "space-around"
    | "space-between"
    | "stretch"
  alignItems?: 
    | "baseline"
    | "center"
    | "flex-end"
    | "flex-start"
    | "stretch"
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<GridClassKey, string>>
  color?: string
  container?: boolean
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  direction?: 
    | "column"
    | "column-reverse"
    | "row"
    | "row-reverse"
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  item?: boolean
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  justify?: 
    | "center"
    | "flex-end"
    | "flex-start"
    | "space-around"
    | "space-between"
    | "space-evenly"
  lang?: string
  lg?: 
    | "auto"
    | 1
    | 10
    | 11
    | 12
    | 2
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9
    | false
    | true
  md?: 
    | "auto"
    | 1
    | 10
    | 11
    | 12
    | 2
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9
    | false
    | true
  onAbort?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLDivElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onBlur?: (event: FocusEvent<HTMLDivElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onChange?: (event: FormEvent<HTMLDivElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLDivElement>) => void
  onClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCut?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLDivElement>) => void
  onDragCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnd?: (event: DragEvent<HTMLDivElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnter?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragExit?: (event: DragEvent<HTMLDivElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeave?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragOver?: (event: DragEvent<HTMLDivElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragStart?: (event: DragEvent<HTMLDivElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDrop?: (event: DragEvent<HTMLDivElement>) => void
  onDropCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLDivElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onInput?: (event: FormEvent<HTMLDivElement>) => void
  onInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onInvalid?: (event: FormEvent<HTMLDivElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLDivElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPause?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onReset?: (event: FormEvent<HTMLDivElement>) => void
  onResetCapture?: (event: FormEvent<HTMLDivElement>) => void
  onScroll?: (event: UIEvent<HTMLDivElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLDivElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLDivElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLDivElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLDivElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLDivElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLDivElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLDivElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: HTMLDivElement | null) => void
    | RefObject<HTMLDivElement>
  resource?: string
  results?: number
  role?: string
  security?: string
  slot?: string
  sm?: 
    | "auto"
    | 1
    | 10
    | 11
    | 12
    | 2
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9
    | false
    | true
  spacing?: 
    | 0
    | 1
    | 10
    | 2
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  vocab?: string
  wrap?: 
    | "nowrap"
    | "wrap"
    | "wrap-reverse"
  xl?: 
    | "auto"
    | 1
    | 10
    | 11
    | 12
    | 2
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9
    | false
    | true
  xs?: 
    | "auto"
    | 1
    | 10
    | 11
    | 12
    | 2
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9
    | false
    | true
  zeroMinWidth?: boolean
}
`;

exports[`Grow 1`] = `
{
  addEndListener?: EndHandler
  appear?: boolean
  children: ReactNode
  enter?: boolean
  exit?: boolean
  in?: boolean
  mountOnEnter?: boolean
  onEnter?: EnterHandler
  onEntered?: EnterHandler
  onEntering?: EnterHandler
  onExit?: ExitHandler
  onExited?: ExitHandler
  onExiting?: ExitHandler
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  style?: CSSProperties
  theme?: {
    breakpoints: {
      between: (start: number | "xs" | "sm" | "md" | "lg" | "xl", end: number | "xs" | "sm" | "md" | "lg" | "xl") => string
      down: (key: number | "xs" | "sm" | "md" | "lg" | "xl") => string
      keys: Breakpoint[]
      only: (key: Breakpoint) => string
      up: (key: number | "xs" | "sm" | "md" | "lg" | "xl") => string
      values: BreakpointValues
      width: (key: Breakpoint) => number
    }
    direction: 
      | "ltr"
      | "rtl"
    mixins: {
      gutters: (styles?: CSSProperties | undefined) => CSSProperties
      toolbar: CSSProperties
    }
    overrides?: Overrides
    palette: {
      action: {
        active: string
        disabled: string
        disabledBackground: string
        hover: string
        hoverOpacity: number
        selected: string
      }
      augmentColor: { (color: Partial<Color>, mainShade?: string | number | undefined, lightShade?: string | number | undefined, darkShade?: string | number | undefined): PaletteColor; (color: PaletteColorOptions): PaletteColor; }
      background: {
        default: string
        paper: string
      }
      common: {
        black: string
        white: string
      }
      contrastThreshold: number
      divider: string
      error: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      getContrastText: (background: string) => string
      grey: {
        100: string
        200: string
        300: string
        400: string
        50: string
        500: string
        600: string
        700: string
        800: string
        900: string
        A100: string
        A200: string
        A400: string
        A700: string
      }
      info: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      primary: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      secondary: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      success: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      text: {
        disabled: string
        hint: string
        primary: string
        secondary: string
      }
      tonalOffset: number
      type: 
        | "dark"
        | "light"
      warning: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
    }
    props?: ComponentsProps
    shadows: Shadows
    shape: {
      borderRadius: number
    }
    spacing: {
    }
    transitions: {
      create: (props: string | string[], options?: Partial<{ duration: ReactText; easing: string; delay: ReactText; }> | undefined) => string
      duration: {
        complex: number
        enteringScreen: number
        leavingScreen: number
        short: number
        shorter: number
        shortest: number
        standard: number
      }
      easing: {
        easeIn: string
        easeInOut: string
        easeOut: string
        sharp: string
      }
      getAutoHeightDuration: (height: number) => number
    }
    typography: {
      body1: CSSProperties
      body2: CSSProperties
      button: CSSProperties
      caption: CSSProperties
      fontFamily: string
      fontSize: number
      fontWeightBold: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      fontWeightLight: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      fontWeightMedium: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      fontWeightRegular: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      h1: CSSProperties
      h2: CSSProperties
      h3: CSSProperties
      h4: CSSProperties
      h5: CSSProperties
      h6: CSSProperties
      overline: CSSProperties
      pxToRem: (px: number) => string
      subtitle1: CSSProperties
      subtitle2: CSSProperties
    }
    zIndex: {
      appBar: number
      drawer: number
      mobileStepper: number
      modal: number
      snackbar: number
      speedDial: number
      tooltip: number
    }
  }
  timeout?: 
    | "auto"
    | number
    | { appear?: number | undefined; enter?: number | undefined; exit?: number | undefined; }
  unmountOnExit?: boolean
}
`;

exports[`Hidden 1`] = `
{
  above?: 
    | "lg"
    | "md"
    | "sm"
    | "xs"
  below?: 
    | "lg"
    | "md"
    | "sm"
    | "xl"
  children: ReactNode
  inline?: boolean
}
`;

exports[`Icon 1`] = `
{
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<IconClassKey, string>>
  color?: 
    | "action"
    | "default"
    | "disabled"
    | "error"
    | "inherit"
    | "primary"
    | "secondary"
  component?: 
    | "a"
    | "abbr"
    | "address"
    | "area"
    | "article"
    | "aside"
    | "audio"
    | "b"
    | "base"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "body"
    | "br"
    | "button"
    | "canvas"
    | "caption"
    | "cite"
    | "code"
    | "col"
    | "colgroup"
    | "data"
    | "datalist"
    | "dd"
    | "del"
    | "details"
    | "dfn"
    | "dialog"
    | "div"
    | "dl"
    | "dt"
    | "em"
    | "embed"
    | "fieldset"
    | "figcaption"
    | "figure"
    | "footer"
    | "form"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "hr"
    | "html"
    | "i"
    | "iframe"
    | "img"
    | "input"
    | "ins"
    | "kbd"
    | "keygen"
    | "label"
    | "legend"
    | "li"
    | "link"
    | "main"
    | "map"
    | "mark"
    | "menu"
    | "menuitem"
    | "meta"
    | "meter"
    | "nav"
    | "noindex"
    | "noscript"
    | "object"
    | "ol"
    | "optgroup"
    | "option"
    | "output"
    | "p"
    | "param"
    | "picture"
    | "pre"
    | "progress"
    | "q"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "script"
    | "section"
    | "select"
    | "small"
    | "source"
    | "span"
    | "strong"
    | "style"
    | "sub"
    | "summary"
    | "sup"
    | "table"
    | "tbody"
    | "td"
    | "template"
    | "textarea"
    | "tfoot"
    | "th"
    | "thead"
    | "time"
    | "title"
    | "tr"
    | "track"
    | "u"
    | "ul"
    | "var"
    | "video"
    | "wbr"
    | "webview"
    | ComponentClass<HTMLAttributes<HTMLSpanElement>, any>
    | FunctionComponent<HTMLAttributes<HTMLSpanElement>>
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  fontSize?: 
    | "default"
    | "inherit"
    | "large"
    | "small"
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  onAbort?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLSpanElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLSpanElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLSpanElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLSpanElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLSpanElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLSpanElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLSpanElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLSpanElement>) => void
  onBlur?: (event: FocusEvent<HTMLSpanElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLSpanElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onChange?: (event: FormEvent<HTMLSpanElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLSpanElement>) => void
  onClick?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLSpanElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLSpanElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLSpanElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLSpanElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLSpanElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLSpanElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLSpanElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLSpanElement>) => void
  onCut?: (event: ClipboardEvent<HTMLSpanElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLSpanElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLSpanElement>) => void
  onDragCapture?: (event: DragEvent<HTMLSpanElement>) => void
  onDragEnd?: (event: DragEvent<HTMLSpanElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLSpanElement>) => void
  onDragEnter?: (event: DragEvent<HTMLSpanElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLSpanElement>) => void
  onDragExit?: (event: DragEvent<HTMLSpanElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLSpanElement>) => void
  onDragLeave?: (event: DragEvent<HTMLSpanElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLSpanElement>) => void
  onDragOver?: (event: DragEvent<HTMLSpanElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLSpanElement>) => void
  onDragStart?: (event: DragEvent<HTMLSpanElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLSpanElement>) => void
  onDrop?: (event: DragEvent<HTMLSpanElement>) => void
  onDropCapture?: (event: DragEvent<HTMLSpanElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLSpanElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLSpanElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLSpanElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLSpanElement>) => void
  onInput?: (event: FormEvent<HTMLSpanElement>) => void
  onInputCapture?: (event: FormEvent<HTMLSpanElement>) => void
  onInvalid?: (event: FormEvent<HTMLSpanElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLSpanElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLSpanElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLSpanElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLSpanElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLSpanElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLSpanElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLSpanElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLSpanElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLSpanElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLSpanElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLSpanElement>) => void
  onPause?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLSpanElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onReset?: (event: FormEvent<HTMLSpanElement>) => void
  onResetCapture?: (event: FormEvent<HTMLSpanElement>) => void
  onScroll?: (event: UIEvent<HTMLSpanElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLSpanElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLSpanElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLSpanElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLSpanElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLSpanElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLSpanElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLSpanElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLSpanElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLSpanElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLSpanElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLSpanElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLSpanElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLSpanElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLSpanElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLSpanElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  resource?: string
  results?: number
  role?: string
  security?: string
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  vocab?: string
}
`;

exports[`IconButton 1`] = `
{
  TouchRippleProps?: Partial<TouchRippleProps>
  about?: string
  accessKey?: string
  action?: 
    | (instance: ButtonBaseActions | null) => void
    | RefObject<ButtonBaseActions>
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoFocus?: boolean
  autoSave?: string
  buttonRef?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  centerRipple?: boolean
  children?: ReactNode
  className?: string
  classes?: Partial<Record<IconButtonClassKey, string>>
  color?: 
    | "default"
    | "inherit"
    | "primary"
    | "secondary"
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  disableFocusRipple?: boolean
  disableRipple?: boolean
  disableTouchRipple?: boolean
  disabled?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  edge?: 
    | "end"
    | "start"
    | false
  focusRipple?: boolean
  focusVisibleClassName?: string
  form?: string
  formAction?: string
  formEncType?: string
  formMethod?: string
  formNoValidate?: boolean
  formTarget?: string
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  name?: string
  onAbort?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLButtonElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onBlur?: (event: FocusEvent<HTMLButtonElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLButtonElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onChange?: (event: FormEvent<HTMLButtonElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLButtonElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onCut?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLButtonElement>) => void
  onDragCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragEnd?: (event: DragEvent<HTMLButtonElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragEnter?: (event: DragEvent<HTMLButtonElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragExit?: (event: DragEvent<HTMLButtonElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragLeave?: (event: DragEvent<HTMLButtonElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragOver?: (event: DragEvent<HTMLButtonElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragStart?: (event: DragEvent<HTMLButtonElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDrop?: (event: DragEvent<HTMLButtonElement>) => void
  onDropCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLButtonElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLButtonElement>) => void
  onFocusVisible?: (event: FocusEvent<any>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onInput?: (event: FormEvent<HTMLButtonElement>) => void
  onInputCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onInvalid?: (event: FormEvent<HTMLButtonElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onPause?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onReset?: (event: FormEvent<HTMLButtonElement>) => void
  onResetCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onScroll?: (event: UIEvent<HTMLButtonElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLButtonElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLButtonElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLButtonElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLButtonElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLButtonElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLButtonElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLButtonElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: HTMLButtonElement | null) => void
    | RefObject<HTMLButtonElement>
  resource?: string
  results?: number
  role?: string
  security?: string
  size?: 
    | "medium"
    | "small"
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  type?: 
    | "button"
    | "reset"
    | "submit"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  value?: 
    | number
    | string
    | string[]
  vocab?: string
}
`;

exports[`Input 1`] = `
{
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoComplete?: string
  autoCorrect?: string
  autoFocus?: boolean
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<InputClassKey, string>>
  color?: 
    | "primary"
    | "secondary"
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: unknown
  dir?: string
  disableUnderline?: boolean
  disabled?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  endAdornment?: ReactNode
  error?: boolean
  fullWidth?: boolean
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputComponent?: 
    | "abbr"
    | "address"
    | "article"
    | "aside"
    | "b"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "caption"
    | "cite"
    | "code"
    | "data"
    | "dd"
    | "del"
    | "details"
    | "dfn"
    | "dt"
    | "em"
    | "figcaption"
    | "figure"
    | "footer"
    | "head"
    | "header"
    | "hgroup"
    | "i"
    | "input"
    | "kbd"
    | "keygen"
    | "main"
    | "mark"
    | "menu"
    | "menuitem"
    | "meter"
    | "nav"
    | "noindex"
    | "noscript"
    | "output"
    | "picture"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "section"
    | "small"
    | "span"
    | "strong"
    | "sub"
    | "summary"
    | "sup"
    | "textarea"
    | "time"
    | "u"
    | "var"
    | "wbr"
    | "webview"
    | ComponentClass<InputBaseComponentProps, any>
    | FunctionComponent<InputBaseComponentProps>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  inputProps?: {
    about?: string
    accessKey?: string
    aria-activedescendant?: string
    aria-atomic?: 
      | "false"
      | "true"
      | false
      | true
    aria-autocomplete?: 
      | "both"
      | "inline"
      | "list"
      | "none"
    aria-busy?: 
      | "false"
      | "true"
      | false
      | true
    aria-checked?: 
      | "false"
      | "mixed"
      | "true"
      | false
      | true
    aria-colcount?: number
    aria-colindex?: number
    aria-colspan?: number
    aria-controls?: string
    aria-current?: 
      | "date"
      | "false"
      | "location"
      | "page"
      | "step"
      | "time"
      | "true"
      | false
      | true
    aria-describedby?: string
    aria-details?: string
    aria-disabled?: 
      | "false"
      | "true"
      | false
      | true
    aria-dropeffect?: 
      | "copy"
      | "execute"
      | "link"
      | "move"
      | "none"
      | "popup"
    aria-errormessage?: string
    aria-expanded?: 
      | "false"
      | "true"
      | false
      | true
    aria-flowto?: string
    aria-grabbed?: 
      | "false"
      | "true"
      | false
      | true
    aria-haspopup?: 
      | "dialog"
      | "false"
      | "grid"
      | "listbox"
      | "menu"
      | "tree"
      | "true"
      | false
      | true
    aria-hidden?: 
      | "false"
      | "true"
      | false
      | true
    aria-invalid?: 
      | "false"
      | "grammar"
      | "spelling"
      | "true"
      | false
      | true
    aria-keyshortcuts?: string
    aria-label?: string
    aria-labelledby?: string
    aria-level?: number
    aria-live?: 
      | "assertive"
      | "off"
      | "polite"
    aria-modal?: 
      | "false"
      | "true"
      | false
      | true
    aria-multiline?: 
      | "false"
      | "true"
      | false
      | true
    aria-multiselectable?: 
      | "false"
      | "true"
      | false
      | true
    aria-orientation?: 
      | "horizontal"
      | "vertical"
    aria-owns?: string
    aria-placeholder?: string
    aria-posinset?: number
    aria-pressed?: 
      | "false"
      | "mixed"
      | "true"
      | false
      | true
    aria-readonly?: 
      | "false"
      | "true"
      | false
      | true
    aria-relevant?: 
      | "additions text"
      | "additions"
      | "all"
      | "removals"
      | "text"
    aria-required?: 
      | "false"
      | "true"
      | false
      | true
    aria-roledescription?: string
    aria-rowcount?: number
    aria-rowindex?: number
    aria-rowspan?: number
    aria-selected?: 
      | "false"
      | "true"
      | false
      | true
    aria-setsize?: number
    aria-sort?: 
      | "ascending"
      | "descending"
      | "none"
      | "other"
    aria-valuemax?: number
    aria-valuemin?: number
    aria-valuenow?: number
    aria-valuetext?: string
    autoCapitalize?: string
    autoCorrect?: string
    autoSave?: string
    children?: ReactNode
    className?: string
    color?: string
    contentEditable?: 
      | "false"
      | "inherit"
      | "true"
      | false
      | true
    contextMenu?: string
    dangerouslySetInnerHTML?: { __html: string; }
    datatype?: string
    defaultChecked?: boolean
    defaultValue?: 
      | number
      | string
      | string[]
    dir?: string
    draggable?: 
      | "false"
      | "true"
      | false
      | true
    hidden?: boolean
    id?: string
    inlist?: any
    inputMode?: 
      | "decimal"
      | "email"
      | "none"
      | "numeric"
      | "search"
      | "tel"
      | "text"
      | "url"
    is?: string
    itemID?: string
    itemProp?: string
    itemRef?: string
    itemScope?: boolean
    itemType?: string
    lang?: string
    onAbort?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onAbortCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onAnimationEnd?: (event: AnimationEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onAnimationEndCapture?: (event: AnimationEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onAnimationIteration?: (event: AnimationEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onAnimationIterationCapture?: (event: AnimationEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onAnimationStart?: (event: AnimationEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onAnimationStartCapture?: (event: AnimationEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onAuxClick?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onAuxClickCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onBeforeInput?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onBeforeInputCapture?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onBlur?: (event: FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onBlurCapture?: (event: FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCanPlay?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onCanPlayCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onCanPlayThrough?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onChange?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onChangeCapture?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onClick?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onClickCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onCompositionEnd?: (event: CompositionEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCompositionEndCapture?: (event: CompositionEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCompositionStart?: (event: CompositionEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCompositionStartCapture?: (event: CompositionEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCompositionUpdate?: (event: CompositionEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCompositionUpdateCapture?: (event: CompositionEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onContextMenu?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onContextMenuCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onCopy?: (event: ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCopyCapture?: (event: ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCut?: (event: ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCutCapture?: (event: ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDoubleClick?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onDoubleClickCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onDrag?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragCapture?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragEnd?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragEndCapture?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragEnter?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragEnterCapture?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragExit?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragExitCapture?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragLeave?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragLeaveCapture?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragOver?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragOverCapture?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragStart?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragStartCapture?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDrop?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDropCapture?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDurationChange?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onDurationChangeCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onEmptied?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onEmptiedCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onEncrypted?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onEncryptedCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onEnded?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onEndedCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onError?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onErrorCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onFocus?: (event: FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onFocusCapture?: (event: FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onGotPointerCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onGotPointerCaptureCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onInput?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onInputCapture?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onInvalid?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onInvalidCapture?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onKeyDown?: (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onKeyDownCapture?: (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onKeyPress?: (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onKeyPressCapture?: (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onKeyUp?: (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onKeyUpCapture?: (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onLoad?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onLoadCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onLoadStart?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onLoadStartCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onLoadedData?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onLoadedDataCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onLoadedMetadata?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onLostPointerCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onLostPointerCaptureCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onMouseDown?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseDownCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseEnter?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseLeave?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseMove?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseMoveCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseOut?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseOutCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseOver?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseOverCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseUp?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseUpCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onPaste?: (event: ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPasteCapture?: (event: ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPause?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onPauseCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onPlay?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onPlayCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onPlaying?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onPlayingCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onPointerCancel?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerCancelCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerDown?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerDownCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerEnter?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerEnterCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerLeave?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerLeaveCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerMove?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerMoveCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerOut?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerOutCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerOver?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerOverCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerUp?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerUpCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onProgress?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onProgressCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onRateChange?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onRateChangeCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onReset?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onResetCapture?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onScroll?: (event: UIEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onScrollCapture?: (event: UIEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onSeeked?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onSeekedCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onSeeking?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onSeekingCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onSelect?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onSelectCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onStalled?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onStalledCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onSubmit?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onSubmitCapture?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onSuspend?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onSuspendCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onTimeUpdate?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onTimeUpdateCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onTouchCancel?: (event: TouchEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTouchCancelCapture?: (event: TouchEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTouchEnd?: (event: TouchEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTouchEndCapture?: (event: TouchEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTouchMove?: (event: TouchEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTouchMoveCapture?: (event: TouchEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTouchStart?: (event: TouchEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTouchStartCapture?: (event: TouchEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTransitionEnd?: (event: TransitionEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTransitionEndCapture?: (event: TransitionEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onVolumeChange?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onVolumeChangeCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onWaiting?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onWaitingCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onWheel?: (event: WheelEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onWheelCapture?: (event: WheelEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    placeholder?: string
    prefix?: string
    property?: string
    radioGroup?: string
    resource?: string
    results?: number
    role?: string
    security?: string
    slot?: string
    spellCheck?: 
      | "false"
      | "true"
      | false
      | true
    style?: CSSProperties
    suppressContentEditableWarning?: boolean
    suppressHydrationWarning?: boolean
    tabIndex?: number
    title?: string
    translate?: 
      | "no"
      | "yes"
    typeof?: string
    unselectable?: 
      | "off"
      | "on"
    vocab?: string
  }
  inputRef?: 
    | (instance: any) => void
    | RefObject<any>
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  margin?: 
    | "dense"
    | "none"
  multiline?: boolean
  name?: string
  onAbort?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLDivElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onBlur?: (event: FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onChange?: (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLDivElement>) => void
  onClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCut?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLDivElement>) => void
  onDragCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnd?: (event: DragEvent<HTMLDivElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnter?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragExit?: (event: DragEvent<HTMLDivElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeave?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragOver?: (event: DragEvent<HTMLDivElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragStart?: (event: DragEvent<HTMLDivElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDrop?: (event: DragEvent<HTMLDivElement>) => void
  onDropCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onInput?: (event: FormEvent<HTMLDivElement>) => void
  onInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onInvalid?: (event: FormEvent<HTMLDivElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLDivElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPause?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onReset?: (event: FormEvent<HTMLDivElement>) => void
  onResetCapture?: (event: FormEvent<HTMLDivElement>) => void
  onScroll?: (event: UIEvent<HTMLDivElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLDivElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLDivElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLDivElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLDivElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLDivElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLDivElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLDivElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  readOnly?: boolean
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  renderPrefix?: (state: { disabled?: boolean | undefined; error?: boolean | undefined; filled?: boolean | undefined; focused?: boolean | undefined; margin?: "none" | "normal" | "dense" | undefined; required?: boolean | undefined; startAdornment?: ReactNode; }) => ReactNode
  required?: boolean
  resource?: string
  results?: number
  role?: string
  rows?: 
    | number
    | string
  rowsMax?: 
    | number
    | string
  rowsMin?: 
    | number
    | string
  security?: string
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  startAdornment?: ReactNode
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  type?: string
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  value?: unknown
  vocab?: string
}
`;

exports[`InputAdornment 1`] = `
{
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<InputAdornmentClassKey, string>>
  color?: string
  component?: 
    | "abbr"
    | "address"
    | "article"
    | "aside"
    | "b"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "caption"
    | "cite"
    | "code"
    | "col"
    | "colgroup"
    | "dd"
    | "del"
    | "details"
    | "dfn"
    | "div"
    | "dt"
    | "em"
    | "embed"
    | "figcaption"
    | "figure"
    | "footer"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "hr"
    | "i"
    | "iframe"
    | "img"
    | "input"
    | "kbd"
    | "keygen"
    | "legend"
    | "main"
    | "mark"
    | "menu"
    | "menuitem"
    | "meter"
    | "nav"
    | "noindex"
    | "noscript"
    | "object"
    | "output"
    | "p"
    | "picture"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "section"
    | "small"
    | "span"
    | "strong"
    | "sub"
    | "summary"
    | "sup"
    | "table"
    | "tbody"
    | "td"
    | "tfoot"
    | "th"
    | "thead"
    | "time"
    | "tr"
    | "u"
    | "var"
    | "wbr"
    | "webview"
    | ComponentClass<HTMLAttributes<HTMLDivElement>, any>
    | FunctionComponent<HTMLAttributes<HTMLDivElement>>
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  data-id?: string
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  disablePointerEvents?: boolean
  disableTypography?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  onAbort?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLDivElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onBlur?: (event: FocusEvent<HTMLDivElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onChange?: (event: FormEvent<HTMLDivElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLDivElement>) => void
  onClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCut?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLDivElement>) => void
  onDragCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnd?: (event: DragEvent<HTMLDivElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnter?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragExit?: (event: DragEvent<HTMLDivElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeave?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragOver?: (event: DragEvent<HTMLDivElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragStart?: (event: DragEvent<HTMLDivElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDrop?: (event: DragEvent<HTMLDivElement>) => void
  onDropCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLDivElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onInput?: (event: FormEvent<HTMLDivElement>) => void
  onInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onInvalid?: (event: FormEvent<HTMLDivElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLDivElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPause?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onReset?: (event: FormEvent<HTMLDivElement>) => void
  onResetCapture?: (event: FormEvent<HTMLDivElement>) => void
  onScroll?: (event: UIEvent<HTMLDivElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLDivElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLDivElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLDivElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLDivElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLDivElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLDivElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLDivElement>) => void
  placeholder?: string
  position: 
    | "end"
    | "start"
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  resource?: string
  results?: number
  role?: string
  security?: string
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  variant?: 
    | "filled"
    | "outlined"
    | "standard"
  vocab?: string
}
`;

exports[`InputLabel 1`] = `
{
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<InputLabelClassKey, string>>
  color?: 
    | "primary"
    | "secondary"
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  data-id?: string
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  disableAnimation?: boolean
  disabled?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  error?: boolean
  filled?: boolean
  focused?: boolean
  form?: string
  hidden?: boolean
  htmlFor?: string
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  margin?: "dense"
  onAbort?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLLabelElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLLabelElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLLabelElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLLabelElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLLabelElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLLabelElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLLabelElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLLabelElement>) => void
  onBlur?: (event: FocusEvent<HTMLLabelElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLLabelElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onChange?: (event: FormEvent<HTMLLabelElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLLabelElement>) => void
  onClick?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLLabelElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLLabelElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLLabelElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLLabelElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLLabelElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLLabelElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLLabelElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLLabelElement>) => void
  onCut?: (event: ClipboardEvent<HTMLLabelElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLLabelElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLLabelElement>) => void
  onDragCapture?: (event: DragEvent<HTMLLabelElement>) => void
  onDragEnd?: (event: DragEvent<HTMLLabelElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLLabelElement>) => void
  onDragEnter?: (event: DragEvent<HTMLLabelElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLLabelElement>) => void
  onDragExit?: (event: DragEvent<HTMLLabelElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLLabelElement>) => void
  onDragLeave?: (event: DragEvent<HTMLLabelElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLLabelElement>) => void
  onDragOver?: (event: DragEvent<HTMLLabelElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLLabelElement>) => void
  onDragStart?: (event: DragEvent<HTMLLabelElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLLabelElement>) => void
  onDrop?: (event: DragEvent<HTMLLabelElement>) => void
  onDropCapture?: (event: DragEvent<HTMLLabelElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLLabelElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLLabelElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onInput?: (event: FormEvent<HTMLLabelElement>) => void
  onInputCapture?: (event: FormEvent<HTMLLabelElement>) => void
  onInvalid?: (event: FormEvent<HTMLLabelElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLLabelElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLLabelElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLLabelElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLLabelElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLLabelElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLLabelElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLLabelElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLLabelElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLLabelElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLLabelElement>) => void
  onPause?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLLabelElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLLabelElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onReset?: (event: FormEvent<HTMLLabelElement>) => void
  onResetCapture?: (event: FormEvent<HTMLLabelElement>) => void
  onScroll?: (event: UIEvent<HTMLLabelElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLLabelElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLLabelElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLLabelElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLLabelElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLLabelElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLLabelElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLLabelElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLLabelElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLLabelElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLLabelElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLLabelElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLLabelElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLLabelElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLLabelElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLLabelElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLLabelElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: HTMLLabelElement | null) => void
    | RefObject<HTMLLabelElement>
  required?: boolean
  resource?: string
  results?: number
  role?: string
  security?: string
  shrink?: boolean
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  variant?: 
    | "filled"
    | "outlined"
    | "standard"
  vocab?: string
}
`;

exports[`Link 1`] = `
{
  Icon?: any
  children?: ReactNode
  component?: ReactNode
  href?: string
  onClick?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  target?: string
  to?: string
}
`;

exports[`List 1`] = `
{
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<ListClassKey, string>>
  color?: string
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dense?: boolean
  dir?: string
  disablePadding?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  onAbort?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLUListElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLUListElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLUListElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLUListElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLUListElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLUListElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLUListElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLUListElement>) => void
  onBlur?: (event: FocusEvent<HTMLUListElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLUListElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onChange?: (event: FormEvent<HTMLUListElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLUListElement>) => void
  onClick?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLUListElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLUListElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLUListElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLUListElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLUListElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLUListElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLUListElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLUListElement>) => void
  onCut?: (event: ClipboardEvent<HTMLUListElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLUListElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLUListElement>) => void
  onDragCapture?: (event: DragEvent<HTMLUListElement>) => void
  onDragEnd?: (event: DragEvent<HTMLUListElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLUListElement>) => void
  onDragEnter?: (event: DragEvent<HTMLUListElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLUListElement>) => void
  onDragExit?: (event: DragEvent<HTMLUListElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLUListElement>) => void
  onDragLeave?: (event: DragEvent<HTMLUListElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLUListElement>) => void
  onDragOver?: (event: DragEvent<HTMLUListElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLUListElement>) => void
  onDragStart?: (event: DragEvent<HTMLUListElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLUListElement>) => void
  onDrop?: (event: DragEvent<HTMLUListElement>) => void
  onDropCapture?: (event: DragEvent<HTMLUListElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLUListElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLUListElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLUListElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLUListElement>) => void
  onInput?: (event: FormEvent<HTMLUListElement>) => void
  onInputCapture?: (event: FormEvent<HTMLUListElement>) => void
  onInvalid?: (event: FormEvent<HTMLUListElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLUListElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLUListElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLUListElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLUListElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLUListElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLUListElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLUListElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLUListElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLUListElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLUListElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLUListElement>) => void
  onPause?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLUListElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onReset?: (event: FormEvent<HTMLUListElement>) => void
  onResetCapture?: (event: FormEvent<HTMLUListElement>) => void
  onScroll?: (event: UIEvent<HTMLUListElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLUListElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLUListElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLUListElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLUListElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLUListElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLUListElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLUListElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLUListElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLUListElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLUListElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLUListElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLUListElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLUListElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLUListElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLUListElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: HTMLUListElement | null) => void
    | RefObject<HTMLUListElement>
  resource?: string
  results?: number
  role?: string
  security?: string
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  subheader?: ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  vocab?: string
}
`;

exports[`ListItem 1`] = `
{
  ContainerComponent?: 
    | "abbr"
    | "address"
    | "article"
    | "aside"
    | "b"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "caption"
    | "cite"
    | "code"
    | "col"
    | "colgroup"
    | "dd"
    | "del"
    | "details"
    | "dfn"
    | "div"
    | "dt"
    | "em"
    | "embed"
    | "figcaption"
    | "figure"
    | "footer"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "hr"
    | "i"
    | "iframe"
    | "img"
    | "input"
    | "kbd"
    | "keygen"
    | "legend"
    | "main"
    | "mark"
    | "menu"
    | "menuitem"
    | "meter"
    | "nav"
    | "noindex"
    | "noscript"
    | "object"
    | "output"
    | "p"
    | "picture"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "section"
    | "small"
    | "span"
    | "strong"
    | "sub"
    | "summary"
    | "sup"
    | "table"
    | "tbody"
    | "td"
    | "tfoot"
    | "th"
    | "thead"
    | "time"
    | "tr"
    | "u"
    | "var"
    | "wbr"
    | "webview"
    | ComponentClass<HTMLAttributes<HTMLDivElement>, any>
    | FunctionComponent<HTMLAttributes<HTMLDivElement>>
  ContainerProps?: HTMLAttributes<HTMLDivElement>
  about?: string
  accessKey?: string
  alignItems?: 
    | "center"
    | "flex-start"
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoFocus?: boolean
  autoSave?: string
  button?: boolean
  children?: ReactNode
  className?: string
  classes?: Partial<Record<ListItemClassKey, string>>
  color?: string
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dense?: boolean
  dir?: string
  disableGutters?: boolean
  disabled?: boolean
  divider?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  focusVisibleClassName?: string
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  onAbort?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLLIElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLLIElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLLIElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLLIElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLLIElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLLIElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLLIElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLLIElement>) => void
  onBlur?: (event: FocusEvent<HTMLLIElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLLIElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onChange?: (event: FormEvent<HTMLLIElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLLIElement>) => void
  onClick?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLLIElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLLIElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLLIElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLLIElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLLIElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLLIElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLLIElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLLIElement>) => void
  onCut?: (event: ClipboardEvent<HTMLLIElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLLIElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLLIElement>) => void
  onDragCapture?: (event: DragEvent<HTMLLIElement>) => void
  onDragEnd?: (event: DragEvent<HTMLLIElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLLIElement>) => void
  onDragEnter?: (event: DragEvent<HTMLLIElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLLIElement>) => void
  onDragExit?: (event: DragEvent<HTMLLIElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLLIElement>) => void
  onDragLeave?: (event: DragEvent<HTMLLIElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLLIElement>) => void
  onDragOver?: (event: DragEvent<HTMLLIElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLLIElement>) => void
  onDragStart?: (event: DragEvent<HTMLLIElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLLIElement>) => void
  onDrop?: (event: DragEvent<HTMLLIElement>) => void
  onDropCapture?: (event: DragEvent<HTMLLIElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLLIElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLLIElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onInput?: (event: FormEvent<HTMLLIElement>) => void
  onInputCapture?: (event: FormEvent<HTMLLIElement>) => void
  onInvalid?: (event: FormEvent<HTMLLIElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLLIElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLLIElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLLIElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLLIElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLLIElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLLIElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLLIElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLLIElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLLIElement>) => void
  onPause?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onReset?: (event: FormEvent<HTMLLIElement>) => void
  onResetCapture?: (event: FormEvent<HTMLLIElement>) => void
  onScroll?: (event: UIEvent<HTMLLIElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLLIElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLLIElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLLIElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLLIElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLLIElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLLIElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLLIElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLLIElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLLIElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLLIElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLLIElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLLIElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLLIElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLLIElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLLIElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: HTMLLIElement | null) => void
    | RefObject<HTMLLIElement>
  resource?: string
  results?: number
  role?: string
  security?: string
  selected?: boolean
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  value?: 
    | number
    | string
    | string[]
  vocab?: string
}
`;

exports[`ListItemAvatar 1`] = `
{
  children: ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>
  className?: string
  classes?: Partial<Record<ListItemAvatarClassKey, string>>
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  ref?: unknown
  style?: CSSProperties
}
`;

exports[`ListItemIcon 1`] = `
{
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children: ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>
  className?: string
  classes?: Partial<Record<"root", string>>
  color?: string
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  onAbort?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLDivElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onBlur?: (event: FocusEvent<HTMLDivElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onChange?: (event: FormEvent<HTMLDivElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLDivElement>) => void
  onClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCut?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLDivElement>) => void
  onDragCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnd?: (event: DragEvent<HTMLDivElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnter?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragExit?: (event: DragEvent<HTMLDivElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeave?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragOver?: (event: DragEvent<HTMLDivElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragStart?: (event: DragEvent<HTMLDivElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDrop?: (event: DragEvent<HTMLDivElement>) => void
  onDropCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLDivElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onInput?: (event: FormEvent<HTMLDivElement>) => void
  onInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onInvalid?: (event: FormEvent<HTMLDivElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLDivElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPause?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onReset?: (event: FormEvent<HTMLDivElement>) => void
  onResetCapture?: (event: FormEvent<HTMLDivElement>) => void
  onScroll?: (event: UIEvent<HTMLDivElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLDivElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLDivElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLDivElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLDivElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLDivElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLDivElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLDivElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  resource?: string
  results?: number
  role?: string
  security?: string
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  vocab?: string
}
`;

exports[`ListItemSecondaryAction 1`] = `
{
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<"root", string>>
  color?: string
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  onAbort?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLDivElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onBlur?: (event: FocusEvent<HTMLDivElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onChange?: (event: FormEvent<HTMLDivElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLDivElement>) => void
  onClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCut?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLDivElement>) => void
  onDragCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnd?: (event: DragEvent<HTMLDivElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnter?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragExit?: (event: DragEvent<HTMLDivElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeave?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragOver?: (event: DragEvent<HTMLDivElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragStart?: (event: DragEvent<HTMLDivElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDrop?: (event: DragEvent<HTMLDivElement>) => void
  onDropCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLDivElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onInput?: (event: FormEvent<HTMLDivElement>) => void
  onInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onInvalid?: (event: FormEvent<HTMLDivElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLDivElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPause?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onReset?: (event: FormEvent<HTMLDivElement>) => void
  onResetCapture?: (event: FormEvent<HTMLDivElement>) => void
  onScroll?: (event: UIEvent<HTMLDivElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLDivElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLDivElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLDivElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLDivElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLDivElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLDivElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLDivElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  resource?: string
  results?: number
  role?: string
  security?: string
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  vocab?: string
}
`;

exports[`ListItemText 1`] = `
{
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<ListItemTextClassKey, string>>
  color?: string
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  disableTypography?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  inset?: boolean
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  onAbort?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLDivElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onBlur?: (event: FocusEvent<HTMLDivElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onChange?: (event: FormEvent<HTMLDivElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLDivElement>) => void
  onClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCut?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLDivElement>) => void
  onDragCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnd?: (event: DragEvent<HTMLDivElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnter?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragExit?: (event: DragEvent<HTMLDivElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeave?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragOver?: (event: DragEvent<HTMLDivElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragStart?: (event: DragEvent<HTMLDivElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDrop?: (event: DragEvent<HTMLDivElement>) => void
  onDropCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLDivElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onInput?: (event: FormEvent<HTMLDivElement>) => void
  onInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onInvalid?: (event: FormEvent<HTMLDivElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLDivElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPause?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onReset?: (event: FormEvent<HTMLDivElement>) => void
  onResetCapture?: (event: FormEvent<HTMLDivElement>) => void
  onScroll?: (event: UIEvent<HTMLDivElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLDivElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLDivElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLDivElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLDivElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLDivElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLDivElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLDivElement>) => void
  placeholder?: string
  prefix?: string
  primary?: ReactNode
  primaryTypographyProps?: Partial<OverrideProps<TypographyTypeMap<{}, "span">, "span">>
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  resource?: string
  results?: number
  role?: string
  secondary?: ReactNode
  secondaryTypographyProps?: Partial<OverrideProps<TypographyTypeMap<{}, "span">, "span">>
  security?: string
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  vocab?: string
}
`;

exports[`ListSubheader 1`] = `
{
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<ListSubheaderClassKey, string>>
  color?: 
    | "default"
    | "inherit"
    | "primary"
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  disableGutters?: boolean
  disableSticky?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  inset?: boolean
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  onAbort?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLLIElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLLIElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLLIElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLLIElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLLIElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLLIElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLLIElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLLIElement>) => void
  onBlur?: (event: FocusEvent<HTMLLIElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLLIElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onChange?: (event: FormEvent<HTMLLIElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLLIElement>) => void
  onClick?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLLIElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLLIElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLLIElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLLIElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLLIElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLLIElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLLIElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLLIElement>) => void
  onCut?: (event: ClipboardEvent<HTMLLIElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLLIElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLLIElement>) => void
  onDragCapture?: (event: DragEvent<HTMLLIElement>) => void
  onDragEnd?: (event: DragEvent<HTMLLIElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLLIElement>) => void
  onDragEnter?: (event: DragEvent<HTMLLIElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLLIElement>) => void
  onDragExit?: (event: DragEvent<HTMLLIElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLLIElement>) => void
  onDragLeave?: (event: DragEvent<HTMLLIElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLLIElement>) => void
  onDragOver?: (event: DragEvent<HTMLLIElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLLIElement>) => void
  onDragStart?: (event: DragEvent<HTMLLIElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLLIElement>) => void
  onDrop?: (event: DragEvent<HTMLLIElement>) => void
  onDropCapture?: (event: DragEvent<HTMLLIElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLLIElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLLIElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onInput?: (event: FormEvent<HTMLLIElement>) => void
  onInputCapture?: (event: FormEvent<HTMLLIElement>) => void
  onInvalid?: (event: FormEvent<HTMLLIElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLLIElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLLIElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLLIElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLLIElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLLIElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLLIElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLLIElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLLIElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLLIElement>) => void
  onPause?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onReset?: (event: FormEvent<HTMLLIElement>) => void
  onResetCapture?: (event: FormEvent<HTMLLIElement>) => void
  onScroll?: (event: UIEvent<HTMLLIElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLLIElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLLIElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLLIElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLLIElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLLIElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLLIElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLLIElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLLIElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLLIElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLLIElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLLIElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLLIElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLLIElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLLIElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLLIElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: HTMLLIElement | null) => void
    | RefObject<HTMLLIElement>
  resource?: string
  results?: number
  role?: string
  security?: string
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  value?: 
    | number
    | string
    | string[]
  vocab?: string
}
`;

exports[`MenuItem 1`] = `
{
  ContainerComponent?: 
    | "abbr"
    | "address"
    | "article"
    | "aside"
    | "b"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "caption"
    | "cite"
    | "code"
    | "col"
    | "colgroup"
    | "dd"
    | "del"
    | "details"
    | "dfn"
    | "div"
    | "dt"
    | "em"
    | "embed"
    | "figcaption"
    | "figure"
    | "footer"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "hr"
    | "i"
    | "iframe"
    | "img"
    | "input"
    | "kbd"
    | "keygen"
    | "legend"
    | "main"
    | "mark"
    | "menu"
    | "menuitem"
    | "meter"
    | "nav"
    | "noindex"
    | "noscript"
    | "object"
    | "output"
    | "p"
    | "picture"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "section"
    | "small"
    | "span"
    | "strong"
    | "sub"
    | "summary"
    | "sup"
    | "table"
    | "tbody"
    | "td"
    | "tfoot"
    | "th"
    | "thead"
    | "time"
    | "tr"
    | "u"
    | "var"
    | "wbr"
    | "webview"
    | ComponentClass<HTMLAttributes<HTMLDivElement>, any>
    | FunctionComponent<HTMLAttributes<HTMLDivElement>>
  ContainerProps?: HTMLAttributes<HTMLDivElement>
  about?: string
  accessKey?: string
  alignItems?: 
    | "center"
    | "flex-start"
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoFocus?: boolean
  autoSave?: string
  button?: boolean
  children?: ReactNode
  className?: string
  classes?: Partial<Record<MenuItemClassKey, string>>
  color?: string
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dense?: boolean
  dir?: string
  disableGutters?: boolean
  disabled?: boolean
  divider?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  focusVisibleClassName?: string
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  onAbort?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLLIElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLLIElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLLIElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLLIElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLLIElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLLIElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLLIElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLLIElement>) => void
  onBlur?: (event: FocusEvent<HTMLLIElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLLIElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onChange?: (event: FormEvent<HTMLLIElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLLIElement>) => void
  onClick?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLLIElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLLIElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLLIElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLLIElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLLIElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLLIElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLLIElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLLIElement>) => void
  onCut?: (event: ClipboardEvent<HTMLLIElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLLIElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLLIElement>) => void
  onDragCapture?: (event: DragEvent<HTMLLIElement>) => void
  onDragEnd?: (event: DragEvent<HTMLLIElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLLIElement>) => void
  onDragEnter?: (event: DragEvent<HTMLLIElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLLIElement>) => void
  onDragExit?: (event: DragEvent<HTMLLIElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLLIElement>) => void
  onDragLeave?: (event: DragEvent<HTMLLIElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLLIElement>) => void
  onDragOver?: (event: DragEvent<HTMLLIElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLLIElement>) => void
  onDragStart?: (event: DragEvent<HTMLLIElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLLIElement>) => void
  onDrop?: (event: DragEvent<HTMLLIElement>) => void
  onDropCapture?: (event: DragEvent<HTMLLIElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLLIElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLLIElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onInput?: (event: FormEvent<HTMLLIElement>) => void
  onInputCapture?: (event: FormEvent<HTMLLIElement>) => void
  onInvalid?: (event: FormEvent<HTMLLIElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLLIElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLLIElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLLIElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLLIElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLLIElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLLIElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLLIElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLLIElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLLIElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLLIElement>) => void
  onPause?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLLIElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLLIElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onReset?: (event: FormEvent<HTMLLIElement>) => void
  onResetCapture?: (event: FormEvent<HTMLLIElement>) => void
  onScroll?: (event: UIEvent<HTMLLIElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLLIElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLLIElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLLIElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLLIElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLLIElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLLIElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLLIElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLLIElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLLIElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLLIElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLLIElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLLIElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLLIElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLLIElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLLIElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLLIElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: HTMLLIElement | null) => void
    | RefObject<HTMLLIElement>
  resource?: string
  results?: number
  role?: string
  security?: string
  selected?: boolean
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  value?: 
    | number
    | string
    | string[]
  vocab?: string
}
`;

exports[`MenuList 1`] = `
{
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoFocus?: boolean
  autoFocusItem?: boolean
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<ListClassKey, string>>
  color?: string
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dense?: boolean
  dir?: string
  disableListWrap?: boolean
  disablePadding?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  onAbort?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLUListElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLUListElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLUListElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLUListElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLUListElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLUListElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLUListElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLUListElement>) => void
  onBlur?: (event: FocusEvent<HTMLUListElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLUListElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onChange?: (event: FormEvent<HTMLUListElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLUListElement>) => void
  onClick?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLUListElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLUListElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLUListElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLUListElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLUListElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLUListElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLUListElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLUListElement>) => void
  onCut?: (event: ClipboardEvent<HTMLUListElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLUListElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLUListElement>) => void
  onDragCapture?: (event: DragEvent<HTMLUListElement>) => void
  onDragEnd?: (event: DragEvent<HTMLUListElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLUListElement>) => void
  onDragEnter?: (event: DragEvent<HTMLUListElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLUListElement>) => void
  onDragExit?: (event: DragEvent<HTMLUListElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLUListElement>) => void
  onDragLeave?: (event: DragEvent<HTMLUListElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLUListElement>) => void
  onDragOver?: (event: DragEvent<HTMLUListElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLUListElement>) => void
  onDragStart?: (event: DragEvent<HTMLUListElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLUListElement>) => void
  onDrop?: (event: DragEvent<HTMLUListElement>) => void
  onDropCapture?: (event: DragEvent<HTMLUListElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLUListElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLUListElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLUListElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLUListElement>) => void
  onInput?: (event: FormEvent<HTMLUListElement>) => void
  onInputCapture?: (event: FormEvent<HTMLUListElement>) => void
  onInvalid?: (event: FormEvent<HTMLUListElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLUListElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLUListElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLUListElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLUListElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLUListElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLUListElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLUListElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLUListElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLUListElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLUListElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLUListElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLUListElement>) => void
  onPause?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLUListElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLUListElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onReset?: (event: FormEvent<HTMLUListElement>) => void
  onResetCapture?: (event: FormEvent<HTMLUListElement>) => void
  onScroll?: (event: UIEvent<HTMLUListElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLUListElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLUListElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLUListElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLUListElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLUListElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLUListElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLUListElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLUListElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLUListElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLUListElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLUListElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLUListElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLUListElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLUListElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLUListElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLUListElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: HTMLUListElement | null) => void
    | RefObject<HTMLUListElement>
  resource?: string
  results?: number
  role?: string
  security?: string
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  subheader?: ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  variant?: 
    | "menu"
    | "selectedMenu"
  vocab?: string
}
`;

exports[`OriginThemeProvider 1`] = `
{
  children: ReactNode
  theme?: {
    border: {
      color: { standard: string; standardInverted: string; formHover: string; focus: string; critical: string; formAccent: string; primary: string; secondary: string; }
      width: { standard: number; large: number; }
    }
    breakpoints: Breakpoints
    colors: {
      blue: string
      green: string
      grey: string
      grey16: string
      grey24: string
      grey4: string
      grey48: string
      grey56: string
      grey8: string
      grey80: string
      lightBlue: string
      lightGreen: string
      lightGrey: string
      lightOrange: string
      orange: string
      purple: string
      red: string
      redPink: string
      transparent: string
      white: string
    }
    gridGutterWidth: 
      | 16
      | 32
    section: { maxWidth: Breakpoint<number>; }
    shadows: {
      large: string
      medium: string
      small: string
    }
    space: Space
    transforms: {
      touchable: string
    }
    transitions: {
      fast: string
      touchable: string
    }
    typography: {
      capHeightScale: number
      descenderHeightScale: number
      fontFamily: string
      gridRow: number
      text: { xxxsmall: { size: number; rows: number; }; xxsmall: { size: number; rows: number; }; xsmall: { size: number; rows: number; }; small: { size: number; rows: number; }; medium: { size: number; rows: number; }; large: { ...; }; xlarge: { ...; }; xxlarge: { ...; }; xxxlarge: { ...; }; }
      weight: { regular: number; medium: number; }
    }
  }
}
`;

exports[`Placeholder 1`] = `
{
  backgroundColor?: ResponsiveProp<
    | "blue"
    | "green"
    | "grey"
    | "grey16"
    | "grey24"
    | "grey4"
    | "grey48"
    | "grey56"
    | "grey8"
    | "grey80"
    | "lightBlue"
    | "lightGreen"
    | "lightGrey"
    | "lightOrange"
    | "orange"
    | "purple"
    | "red"
    | "redPink"
    | "transparent"
    | "white"
  >
  children?: ReactNode
  data-id?: string
  height?: string
  inline?: boolean
  width?: string
}
`;

exports[`Radio 1`] = `
{
  __@iterator: () => IterableIterator<IRadioProps>
  __@unscopables: () => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<FormGroupClassKey, string>>
  color?: string
  concat: { (...items: ConcatArray<IRadioProps>[]): IRadioProps[]; (...items: (IRadioProps | ConcatArray<IRadioProps>)[]): IRadioProps[]; }
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  copyWithin: (target: number, start: number, end?: number | undefined) => RadioProps
  dangerouslySetInnerHTML?: { __html: string; }
  data-id?: string
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  entries: () => IterableIterator<[number, IRadioProps]>
  every: (callbackfn: (value: IRadioProps, index: number, array: IRadioProps[]) => unknown, thisArg?: any) => boolean
  fill: (value: IRadioProps, start?: number | undefined, end?: number | undefined) => RadioProps
  filter: { <S extends IRadioProps>(callbackfn: (value: IRadioProps, index: number, array: IRadioProps[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: IRadioProps, index: number, array: IRadioProps[]) => unknown, thisArg?: any): IRadioProps[]; }
  find: { <S extends IRadioProps>(predicate: (this: void, value: IRadioProps, index: number, obj: IRadioProps[]) => value is S, thisArg?: any): S | undefined; (predicate: (value: IRadioProps, index: number, obj: IRadioProps[]) => unknown, thisArg?: any): IRadioProps | undefined; }
  findIndex: (predicate: (value: IRadioProps, index: number, obj: IRadioProps[]) => unknown, thisArg?: any) => number
  flat: { <U>(this: U[][][][][][][][], depth: 7): U[]; <U>(this: U[][][][][][][], depth: 6): U[]; <U>(this: U[][][][][][], depth: 5): U[]; <U>(this: U[][][][][], depth: 4): U[]; <U>(this: U[][][][], depth: 3): U[]; <U>(this: U[][][], depth: 2): U[]; <U>(this: U[][], depth?: 1 | undefined): U[]; <U>(this: U[], depth: 0): U[]...
  flatMap: <U, This = undefined>(callback: (this: This, value: IRadioProps, index: number, array: IRadioProps[]) => U | readonly U[], thisArg?: This | undefined) => U[]
  forEach: (callbackfn: (value: IRadioProps, index: number, array: IRadioProps[]) => void, thisArg?: any) => void
  hidden?: boolean
  id?: string
  includes: (searchElement: IRadioProps, fromIndex?: number | undefined) => boolean
  indexOf: (searchElement: IRadioProps, fromIndex?: number | undefined) => number
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  join: (separator?: string | undefined) => string
  keys: () => IterableIterator<number>
  label: string
  lang?: string
  lastIndexOf: (searchElement: IRadioProps, fromIndex?: number | undefined) => number
  length: number
  map: <U>(callbackfn: (value: IRadioProps, index: number, array: IRadioProps[]) => U, thisArg?: any) => U[]
  name?: string
  onAbort?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLDivElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onBlur?: (event: FocusEvent<HTMLDivElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onChange?: (event: ChangeEvent<HTMLInputElement>, value: string) => void
  onChangeCapture?: (event: FormEvent<HTMLDivElement>) => void
  onClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCut?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLDivElement>) => void
  onDragCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnd?: (event: DragEvent<HTMLDivElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnter?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragExit?: (event: DragEvent<HTMLDivElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeave?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragOver?: (event: DragEvent<HTMLDivElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragStart?: (event: DragEvent<HTMLDivElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDrop?: (event: DragEvent<HTMLDivElement>) => void
  onDropCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLDivElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onInput?: (event: FormEvent<HTMLDivElement>) => void
  onInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onInvalid?: (event: FormEvent<HTMLDivElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLDivElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPause?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onReset?: (event: FormEvent<HTMLDivElement>) => void
  onResetCapture?: (event: FormEvent<HTMLDivElement>) => void
  onScroll?: (event: UIEvent<HTMLDivElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLDivElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLDivElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLDivElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLDivElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLDivElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLDivElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLDivElement>) => void
  placeholder?: string
  pop: () => IRadioProps | undefined
  prefix?: string
  property?: string
  push: (...items: IRadioProps[]) => number
  radioGroup?: string
  radios: IRadioProps[]
  reduce: { (callbackfn: (previousValue: IRadioProps, currentValue: IRadioProps, currentIndex: number, array: IRadioProps[]) => IRadioProps): IRadioProps; (callbackfn: (previousValue: IRadioProps, currentValue: IRadioProps, currentIndex: number, array: IRadioProps[]) => IRadioProps, initialValue: IRadioProps): IRadioProps; <U...
  reduceRight: { (callbackfn: (previousValue: IRadioProps, currentValue: IRadioProps, currentIndex: number, array: IRadioProps[]) => IRadioProps): IRadioProps; (callbackfn: (previousValue: IRadioProps, currentValue: IRadioProps, currentIndex: number, array: IRadioProps[]) => IRadioProps, initialValue: IRadioProps): IRadioProps; <U...
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  resource?: string
  results?: number
  reverse: () => IRadioProps[]
  role?: string
  row?: boolean
  security?: string
  shift: () => IRadioProps | undefined
  slice: (start?: number | undefined, end?: number | undefined) => IRadioProps[]
  slot?: string
  some: (callbackfn: (value: IRadioProps, index: number, array: IRadioProps[]) => unknown, thisArg?: any) => boolean
  sort: (compareFn?: ((a: IRadioProps, b: IRadioProps) => number) | undefined) => RadioProps
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  splice: { (start: number, deleteCount?: number | undefined): IRadioProps[]; (start: number, deleteCount: number, ...items: IRadioProps[]): IRadioProps[]; }
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  toLocaleString: () => string
  toString: () => string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  unshift: (...items: IRadioProps[]) => number
  value?: any
  values: () => IterableIterator<IRadioProps>
  vocab?: string
}
`;

exports[`RadioBase 1`] = `
{
  TouchRippleProps?: Partial<TouchRippleProps>
  about?: string
  accessKey?: string
  action?: 
    | (instance: ButtonBaseActions | null) => void
    | RefObject<ButtonBaseActions>
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoFocus?: boolean
  autoSave?: string
  border?: boolean
  buttonRef?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  centerRipple?: boolean
  checked?: boolean
  checkedIcon?: ReactNode
  children?: ReactNode
  className?: string
  classes?: Partial<Record<RadioClassKey, string>>
  color?: 
    | "default"
    | "primary"
    | "secondary"
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  data-id?: string
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  description?: string
  dir?: string
  disableFocusRipple?: boolean
  disableRipple?: boolean
  disableTouchRipple?: boolean
  disabled?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  edge?: 
    | "end"
    | "start"
    | false
  error?: boolean
  focusRipple?: boolean
  focusVisibleClassName?: string
  form?: string
  formAction?: string
  formEncType?: string
  formMethod?: string
  formNoValidate?: boolean
  formTarget?: string
  helpText?: ReactNode
  hidden?: boolean
  icon?: ReactNode
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  inputProps?: InputHTMLAttributes<HTMLInputElement>
  inputRef?: 
    | (instance: any) => void
    | RefObject<any>
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  label: string
  labelPlacement?: 
    | "end"
    | "start"
  lang?: string
  name?: string
  onAbort?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLButtonElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onBlur?: (event: FocusEvent<HTMLButtonElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLButtonElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onChange?: (e: ChangeEvent<any>, checked: boolean) => void
  onChangeCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLButtonElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onCut?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLButtonElement>) => void
  onDragCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragEnd?: (event: DragEvent<HTMLButtonElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragEnter?: (event: DragEvent<HTMLButtonElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragExit?: (event: DragEvent<HTMLButtonElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragLeave?: (event: DragEvent<HTMLButtonElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragOver?: (event: DragEvent<HTMLButtonElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragStart?: (event: DragEvent<HTMLButtonElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDrop?: (event: DragEvent<HTMLButtonElement>) => void
  onDropCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLButtonElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLButtonElement>) => void
  onFocusVisible?: (event: FocusEvent<any>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onInput?: (event: FormEvent<HTMLButtonElement>) => void
  onInputCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onInvalid?: (event: FormEvent<HTMLButtonElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onPause?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onReset?: (event: FormEvent<HTMLButtonElement>) => void
  onResetCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onScroll?: (event: UIEvent<HTMLButtonElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLButtonElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLButtonElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLButtonElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLButtonElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLButtonElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLButtonElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLButtonElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  readOnly?: boolean
  ref?: 
    | (instance: HTMLButtonElement | null) => void
    | RefObject<HTMLButtonElement>
  required?: boolean
  resource?: string
  results?: number
  role?: string
  security?: string
  size?: 
    | "medium"
    | "small"
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  type?: 
    | "button"
    | "reset"
    | "submit"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  value: 
    | number
    | string
  vocab?: string
}
`;

exports[`RadioCard 1`] = `
{
  __@iterator: () => IterableIterator<IRadioProps>
  __@unscopables: () => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<FormGroupClassKey, string>>
  color?: string
  concat: { (...items: ConcatArray<IRadioProps>[]): IRadioProps[]; (...items: (IRadioProps | ConcatArray<IRadioProps>)[]): IRadioProps[]; }
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  copyWithin: (target: number, start: number, end?: number | undefined) => RadioCardProps
  dangerouslySetInnerHTML?: { __html: string; }
  data-id: string
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  entries: () => IterableIterator<[number, IRadioProps]>
  every: (callbackfn: (value: IRadioProps, index: number, array: IRadioProps[]) => unknown, thisArg?: any) => boolean
  fill: (value: IRadioProps, start?: number | undefined, end?: number | undefined) => RadioCardProps
  filter: { <S extends IRadioProps>(callbackfn: (value: IRadioProps, index: number, array: IRadioProps[]) => value is S, thisArg?: any): S[]; (callbackfn: (value: IRadioProps, index: number, array: IRadioProps[]) => unknown, thisArg?: any): IRadioProps[]; }
  find: { <S extends IRadioProps>(predicate: (this: void, value: IRadioProps, index: number, obj: IRadioProps[]) => value is S, thisArg?: any): S | undefined; (predicate: (value: IRadioProps, index: number, obj: IRadioProps[]) => unknown, thisArg?: any): IRadioProps | undefined; }
  findIndex: (predicate: (value: IRadioProps, index: number, obj: IRadioProps[]) => unknown, thisArg?: any) => number
  flat: { <U>(this: U[][][][][][][][], depth: 7): U[]; <U>(this: U[][][][][][][], depth: 6): U[]; <U>(this: U[][][][][][], depth: 5): U[]; <U>(this: U[][][][][], depth: 4): U[]; <U>(this: U[][][][], depth: 3): U[]; <U>(this: U[][][], depth: 2): U[]; <U>(this: U[][], depth?: 1 | undefined): U[]; <U>(this: U[], depth: 0): U[]...
  flatMap: <U, This = undefined>(callback: (this: This, value: IRadioProps, index: number, array: IRadioProps[]) => U | readonly U[], thisArg?: This | undefined) => U[]
  forEach: (callbackfn: (value: IRadioProps, index: number, array: IRadioProps[]) => void, thisArg?: any) => void
  handleChange: (e: ReactText) => void
  hidden?: boolean
  id?: string
  includes: (searchElement: IRadioProps, fromIndex?: number | undefined) => boolean
  indexOf: (searchElement: IRadioProps, fromIndex?: number | undefined) => number
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  join: (separator?: string | undefined) => string
  keys: () => IterableIterator<number>
  label: string
  lang?: string
  lastIndexOf: (searchElement: IRadioProps, fromIndex?: number | undefined) => number
  length: number
  map: <U>(callbackfn: (value: IRadioProps, index: number, array: IRadioProps[]) => U, thisArg?: any) => U[]
  name?: string
  onAbort?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLDivElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onBlur?: (event: FocusEvent<HTMLDivElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onChange?: (event: ChangeEvent<HTMLInputElement>, value: string) => void
  onChangeCapture?: (event: FormEvent<HTMLDivElement>) => void
  onClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCut?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLDivElement>) => void
  onDragCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnd?: (event: DragEvent<HTMLDivElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnter?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragExit?: (event: DragEvent<HTMLDivElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeave?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragOver?: (event: DragEvent<HTMLDivElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragStart?: (event: DragEvent<HTMLDivElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDrop?: (event: DragEvent<HTMLDivElement>) => void
  onDropCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLDivElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onInput?: (event: FormEvent<HTMLDivElement>) => void
  onInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onInvalid?: (event: FormEvent<HTMLDivElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLDivElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPause?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onReset?: (event: FormEvent<HTMLDivElement>) => void
  onResetCapture?: (event: FormEvent<HTMLDivElement>) => void
  onScroll?: (event: UIEvent<HTMLDivElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLDivElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLDivElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLDivElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLDivElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLDivElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLDivElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLDivElement>) => void
  options: ExtendedRadioBaseProps[]
  placeholder?: string
  pop: () => IRadioProps | undefined
  prefix?: string
  property?: string
  push: (...items: IRadioProps[]) => number
  radioGroup?: string
  radios: IRadioProps[]
  reduce: { (callbackfn: (previousValue: IRadioProps, currentValue: IRadioProps, currentIndex: number, array: IRadioProps[]) => IRadioProps): IRadioProps; (callbackfn: (previousValue: IRadioProps, currentValue: IRadioProps, currentIndex: number, array: IRadioProps[]) => IRadioProps, initialValue: IRadioProps): IRadioProps; <U...
  reduceRight: { (callbackfn: (previousValue: IRadioProps, currentValue: IRadioProps, currentIndex: number, array: IRadioProps[]) => IRadioProps): IRadioProps; (callbackfn: (previousValue: IRadioProps, currentValue: IRadioProps, currentIndex: number, array: IRadioProps[]) => IRadioProps, initialValue: IRadioProps): IRadioProps; <U...
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  resource?: string
  results?: number
  reverse: () => IRadioProps[]
  role?: string
  row?: boolean
  security?: string
  shift: () => IRadioProps | undefined
  slice: (start?: number | undefined, end?: number | undefined) => IRadioProps[]
  slot?: string
  some: (callbackfn: (value: IRadioProps, index: number, array: IRadioProps[]) => unknown, thisArg?: any) => boolean
  sort: (compareFn?: ((a: IRadioProps, b: IRadioProps) => number) | undefined) => RadioCardProps
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  splice: { (start: number, deleteCount?: number | undefined): IRadioProps[]; (start: number, deleteCount: number, ...items: IRadioProps[]): IRadioProps[]; }
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  toLocaleString: () => string
  toString: () => string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  unshift: (...items: IRadioProps[]) => number
  value: 
    | number
    | string
  values: () => IterableIterator<IRadioProps>
  vocab?: string
}
`;

exports[`RadioGroup 1`] = `
{
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<FormGroupClassKey, string>>
  color?: string
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  data-id?: string
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  name?: string
  onAbort?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLDivElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onBlur?: (event: FocusEvent<HTMLDivElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onChange?: (event: ChangeEvent<HTMLInputElement>, value: string) => void
  onChangeCapture?: (event: FormEvent<HTMLDivElement>) => void
  onClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCut?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLDivElement>) => void
  onDragCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnd?: (event: DragEvent<HTMLDivElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnter?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragExit?: (event: DragEvent<HTMLDivElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeave?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragOver?: (event: DragEvent<HTMLDivElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragStart?: (event: DragEvent<HTMLDivElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDrop?: (event: DragEvent<HTMLDivElement>) => void
  onDropCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLDivElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onInput?: (event: FormEvent<HTMLDivElement>) => void
  onInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onInvalid?: (event: FormEvent<HTMLDivElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLDivElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPause?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onReset?: (event: FormEvent<HTMLDivElement>) => void
  onResetCapture?: (event: FormEvent<HTMLDivElement>) => void
  onScroll?: (event: UIEvent<HTMLDivElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLDivElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLDivElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLDivElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLDivElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLDivElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLDivElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLDivElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  resource?: string
  results?: number
  role?: string
  row?: boolean
  security?: string
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  value?: any
  vocab?: string
}
`;

exports[`Section 1`] = `
{
  backgroundColor?: 
    | "grey"
    | "transparent"
    | "white"
  children: ReactNode
  data-id?: string
  fluidity?: 
    | "full-width"
    | "max-width-at-xl"
    | "off"
  hideGutter?: boolean
  stretchY?: boolean
}
`;

exports[`SegmentedControl 1`] = `
{
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<ToggleButtonGroupClassKey, string>>
  color?: string
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  exclusive?: boolean
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  label: string
  lang?: string
  onAbort?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLDivElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onBlur?: (event: FocusEvent<HTMLDivElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onChange?: (event: MouseEvent<HTMLElement, MouseEvent>, value: any) => void
  onChangeCapture?: (event: FormEvent<HTMLDivElement>) => void
  onClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCut?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLDivElement>) => void
  onDragCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnd?: (event: DragEvent<HTMLDivElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnter?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragExit?: (event: DragEvent<HTMLDivElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeave?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragOver?: (event: DragEvent<HTMLDivElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragStart?: (event: DragEvent<HTMLDivElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDrop?: (event: DragEvent<HTMLDivElement>) => void
  onDropCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLDivElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onInput?: (event: FormEvent<HTMLDivElement>) => void
  onInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onInvalid?: (event: FormEvent<HTMLDivElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLDivElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPause?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onReset?: (event: FormEvent<HTMLDivElement>) => void
  onResetCapture?: (event: FormEvent<HTMLDivElement>) => void
  onScroll?: (event: UIEvent<HTMLDivElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLDivElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLDivElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLDivElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLDivElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLDivElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLDivElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLDivElement>) => void
  options: { value: ReactText; content: ReactNode; }[]
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  resource?: string
  results?: number
  role?: string
  security?: string
  size?: 
    | "large"
    | "medium"
    | "small"
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  value?: any
  vocab?: string
}
`;

exports[`Select 1`] = `
{
  IconComponent?: 
    | "a"
    | "abbr"
    | "address"
    | "animate"
    | "animateMotion"
    | "animateTransform"
    | "area"
    | "article"
    | "aside"
    | "audio"
    | "b"
    | "base"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "body"
    | "br"
    | "button"
    | "canvas"
    | "caption"
    | "circle"
    | "cite"
    | "clipPath"
    | "code"
    | "col"
    | "colgroup"
    | "data"
    | "datalist"
    | "dd"
    | "defs"
    | "del"
    | "desc"
    | "details"
    | "dfn"
    | "dialog"
    | "div"
    | "dl"
    | "dt"
    | "ellipse"
    | "em"
    | "embed"
    | "feBlend"
    | "feColorMatrix"
    | "feComponentTransfer"
    | "feComposite"
    | "feConvolveMatrix"
    | "feDiffuseLighting"
    | "feDisplacementMap"
    | "feDistantLight"
    | "feDropShadow"
    | "feFlood"
    | "feFuncA"
    | "feFuncB"
    | "feFuncG"
    | "feFuncR"
    | "feGaussianBlur"
    | "feImage"
    | "feMerge"
    | "feMergeNode"
    | "feMorphology"
    | "feOffset"
    | "fePointLight"
    | "feSpecularLighting"
    | "feSpotLight"
    | "feTile"
    | "feTurbulence"
    | "fieldset"
    | "figcaption"
    | "figure"
    | "filter"
    | "footer"
    | "foreignObject"
    | "form"
    | "g"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "hr"
    | "html"
    | "i"
    | "iframe"
    | "image"
    | "img"
    | "input"
    | "ins"
    | "kbd"
    | "keygen"
    | "label"
    | "legend"
    | "li"
    | "line"
    | "linearGradient"
    | "link"
    | "main"
    | "map"
    | "mark"
    | "marker"
    | "mask"
    | "menu"
    | "menuitem"
    | "meta"
    | "metadata"
    | "meter"
    | "mpath"
    | "nav"
    | "noindex"
    | "noscript"
    | "object"
    | "ol"
    | "optgroup"
    | "option"
    | "output"
    | "p"
    | "param"
    | "path"
    | "pattern"
    | "picture"
    | "polygon"
    | "polyline"
    | "pre"
    | "progress"
    | "q"
    | "radialGradient"
    | "rect"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "script"
    | "section"
    | "select"
    | "small"
    | "source"
    | "span"
    | "stop"
    | "strong"
    | "style"
    | "sub"
    | "summary"
    | "sup"
    | "svg"
    | "switch"
    | "symbol"
    | "table"
    | "tbody"
    | "td"
    | "template"
    | "text"
    | "textPath"
    | "textarea"
    | "tfoot"
    | "th"
    | "thead"
    | "time"
    | "title"
    | "tr"
    | "track"
    | "tspan"
    | "u"
    | "ul"
    | "use"
    | "var"
    | "video"
    | "view"
    | "wbr"
    | "webview"
    | ComponentClass<any, any>
    | FunctionComponent<any>
  MenuProps?: Partial<MenuProps>
  SelectDisplayProps?: HTMLAttributes<HTMLDivElement>
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoComplete?: string
  autoCorrect?: string
  autoFocus?: boolean
  autoSave?: string
  autoWidth?: boolean
  children?: ReactNode
  className?: string
  classes?: Partial<Record<SelectClassKey, string>>
  color?: 
    | "primary"
    | "secondary"
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  data-id?: string
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: unknown
  dir?: string
  disableUnderline?: boolean
  disabled?: boolean
  displayEmpty?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  endAdornment?: ReactNode
  error?: boolean
  fullWidth?: boolean
  helpText?: string
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  input?: ReactNode
  inputComponent?: 
    | "abbr"
    | "address"
    | "article"
    | "aside"
    | "b"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "caption"
    | "cite"
    | "code"
    | "data"
    | "dd"
    | "del"
    | "details"
    | "dfn"
    | "dt"
    | "em"
    | "figcaption"
    | "figure"
    | "footer"
    | "head"
    | "header"
    | "hgroup"
    | "i"
    | "input"
    | "kbd"
    | "keygen"
    | "main"
    | "mark"
    | "menu"
    | "menuitem"
    | "meter"
    | "nav"
    | "noindex"
    | "noscript"
    | "output"
    | "picture"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "section"
    | "small"
    | "span"
    | "strong"
    | "sub"
    | "summary"
    | "sup"
    | "textarea"
    | "time"
    | "u"
    | "var"
    | "wbr"
    | "webview"
    | ComponentClass<InputBaseComponentProps, any>
    | FunctionComponent<InputBaseComponentProps>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  inputProps?: {
    about?: string
    accessKey?: string
    aria-activedescendant?: string
    aria-atomic?: 
      | "false"
      | "true"
      | false
      | true
    aria-autocomplete?: 
      | "both"
      | "inline"
      | "list"
      | "none"
    aria-busy?: 
      | "false"
      | "true"
      | false
      | true
    aria-checked?: 
      | "false"
      | "mixed"
      | "true"
      | false
      | true
    aria-colcount?: number
    aria-colindex?: number
    aria-colspan?: number
    aria-controls?: string
    aria-current?: 
      | "date"
      | "false"
      | "location"
      | "page"
      | "step"
      | "time"
      | "true"
      | false
      | true
    aria-describedby?: string
    aria-details?: string
    aria-disabled?: 
      | "false"
      | "true"
      | false
      | true
    aria-dropeffect?: 
      | "copy"
      | "execute"
      | "link"
      | "move"
      | "none"
      | "popup"
    aria-errormessage?: string
    aria-expanded?: 
      | "false"
      | "true"
      | false
      | true
    aria-flowto?: string
    aria-grabbed?: 
      | "false"
      | "true"
      | false
      | true
    aria-haspopup?: 
      | "dialog"
      | "false"
      | "grid"
      | "listbox"
      | "menu"
      | "tree"
      | "true"
      | false
      | true
    aria-hidden?: 
      | "false"
      | "true"
      | false
      | true
    aria-invalid?: 
      | "false"
      | "grammar"
      | "spelling"
      | "true"
      | false
      | true
    aria-keyshortcuts?: string
    aria-label?: string
    aria-labelledby?: string
    aria-level?: number
    aria-live?: 
      | "assertive"
      | "off"
      | "polite"
    aria-modal?: 
      | "false"
      | "true"
      | false
      | true
    aria-multiline?: 
      | "false"
      | "true"
      | false
      | true
    aria-multiselectable?: 
      | "false"
      | "true"
      | false
      | true
    aria-orientation?: 
      | "horizontal"
      | "vertical"
    aria-owns?: string
    aria-placeholder?: string
    aria-posinset?: number
    aria-pressed?: 
      | "false"
      | "mixed"
      | "true"
      | false
      | true
    aria-readonly?: 
      | "false"
      | "true"
      | false
      | true
    aria-relevant?: 
      | "additions text"
      | "additions"
      | "all"
      | "removals"
      | "text"
    aria-required?: 
      | "false"
      | "true"
      | false
      | true
    aria-roledescription?: string
    aria-rowcount?: number
    aria-rowindex?: number
    aria-rowspan?: number
    aria-selected?: 
      | "false"
      | "true"
      | false
      | true
    aria-setsize?: number
    aria-sort?: 
      | "ascending"
      | "descending"
      | "none"
      | "other"
    aria-valuemax?: number
    aria-valuemin?: number
    aria-valuenow?: number
    aria-valuetext?: string
    autoCapitalize?: string
    autoCorrect?: string
    autoSave?: string
    children?: ReactNode
    className?: string
    color?: string
    contentEditable?: 
      | "false"
      | "inherit"
      | "true"
      | false
      | true
    contextMenu?: string
    dangerouslySetInnerHTML?: { __html: string; }
    datatype?: string
    defaultChecked?: boolean
    defaultValue?: 
      | number
      | string
      | string[]
    dir?: string
    draggable?: 
      | "false"
      | "true"
      | false
      | true
    hidden?: boolean
    id?: string
    inlist?: any
    inputMode?: 
      | "decimal"
      | "email"
      | "none"
      | "numeric"
      | "search"
      | "tel"
      | "text"
      | "url"
    is?: string
    itemID?: string
    itemProp?: string
    itemRef?: string
    itemScope?: boolean
    itemType?: string
    lang?: string
    onAbort?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onAbortCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onAnimationEnd?: (event: AnimationEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onAnimationEndCapture?: (event: AnimationEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onAnimationIteration?: (event: AnimationEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onAnimationIterationCapture?: (event: AnimationEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onAnimationStart?: (event: AnimationEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onAnimationStartCapture?: (event: AnimationEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onAuxClick?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onAuxClickCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onBeforeInput?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onBeforeInputCapture?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onBlur?: (event: FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onBlurCapture?: (event: FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCanPlay?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onCanPlayCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onCanPlayThrough?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onChange?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onChangeCapture?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onClick?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onClickCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onCompositionEnd?: (event: CompositionEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCompositionEndCapture?: (event: CompositionEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCompositionStart?: (event: CompositionEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCompositionStartCapture?: (event: CompositionEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCompositionUpdate?: (event: CompositionEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCompositionUpdateCapture?: (event: CompositionEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onContextMenu?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onContextMenuCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onCopy?: (event: ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCopyCapture?: (event: ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCut?: (event: ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCutCapture?: (event: ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDoubleClick?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onDoubleClickCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onDrag?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragCapture?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragEnd?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragEndCapture?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragEnter?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragEnterCapture?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragExit?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragExitCapture?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragLeave?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragLeaveCapture?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragOver?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragOverCapture?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragStart?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragStartCapture?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDrop?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDropCapture?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDurationChange?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onDurationChangeCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onEmptied?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onEmptiedCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onEncrypted?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onEncryptedCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onEnded?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onEndedCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onError?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onErrorCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onFocus?: (event: FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onFocusCapture?: (event: FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onGotPointerCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onGotPointerCaptureCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onInput?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onInputCapture?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onInvalid?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onInvalidCapture?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onKeyDown?: (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onKeyDownCapture?: (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onKeyPress?: (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onKeyPressCapture?: (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onKeyUp?: (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onKeyUpCapture?: (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onLoad?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onLoadCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onLoadStart?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onLoadStartCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onLoadedData?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onLoadedDataCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onLoadedMetadata?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onLostPointerCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onLostPointerCaptureCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onMouseDown?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseDownCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseEnter?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseLeave?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseMove?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseMoveCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseOut?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseOutCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseOver?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseOverCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseUp?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseUpCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onPaste?: (event: ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPasteCapture?: (event: ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPause?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onPauseCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onPlay?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onPlayCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onPlaying?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onPlayingCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onPointerCancel?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerCancelCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerDown?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerDownCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerEnter?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerEnterCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerLeave?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerLeaveCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerMove?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerMoveCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerOut?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerOutCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerOver?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerOverCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerUp?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerUpCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onProgress?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onProgressCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onRateChange?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onRateChangeCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onReset?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onResetCapture?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onScroll?: (event: UIEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onScrollCapture?: (event: UIEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onSeeked?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onSeekedCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onSeeking?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onSeekingCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onSelect?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onSelectCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onStalled?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onStalledCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onSubmit?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onSubmitCapture?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onSuspend?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onSuspendCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onTimeUpdate?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onTimeUpdateCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onTouchCancel?: (event: TouchEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTouchCancelCapture?: (event: TouchEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTouchEnd?: (event: TouchEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTouchEndCapture?: (event: TouchEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTouchMove?: (event: TouchEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTouchMoveCapture?: (event: TouchEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTouchStart?: (event: TouchEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTouchStartCapture?: (event: TouchEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTransitionEnd?: (event: TransitionEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTransitionEndCapture?: (event: TransitionEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onVolumeChange?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onVolumeChangeCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onWaiting?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onWaitingCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onWheel?: (event: WheelEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onWheelCapture?: (event: WheelEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    placeholder?: string
    prefix?: string
    property?: string
    radioGroup?: string
    resource?: string
    results?: number
    role?: string
    security?: string
    slot?: string
    spellCheck?: 
      | "false"
      | "true"
      | false
      | true
    style?: CSSProperties
    suppressContentEditableWarning?: boolean
    suppressHydrationWarning?: boolean
    tabIndex?: number
    title?: string
    translate?: 
      | "no"
      | "yes"
    typeof?: string
    unselectable?: 
      | "off"
      | "on"
    vocab?: string
  }
  inputRef?: 
    | (instance: any) => void
    | RefObject<any>
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  label: string
  labelId?: string
  labelWidth?: number
  lang?: string
  margin?: 
    | "dense"
    | "none"
  multiline?: boolean
  multiple?: boolean
  name?: string
  native?: boolean
  onAbort?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLDivElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onBlur?: (event: FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onChange?: (event: ChangeEvent<{ name?: string | undefined; value: unknown; }>, child: ReactNode) => void
  onChangeCapture?: (event: FormEvent<HTMLDivElement>) => void
  onClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClose?: (event: ChangeEvent<{}>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCut?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLDivElement>) => void
  onDragCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnd?: (event: DragEvent<HTMLDivElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnter?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragExit?: (event: DragEvent<HTMLDivElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeave?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragOver?: (event: DragEvent<HTMLDivElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragStart?: (event: DragEvent<HTMLDivElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDrop?: (event: DragEvent<HTMLDivElement>) => void
  onDropCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onInput?: (event: FormEvent<HTMLDivElement>) => void
  onInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onInvalid?: (event: FormEvent<HTMLDivElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLDivElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onOpen?: (event: ChangeEvent<{}>) => void
  onPaste?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPause?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onReset?: (event: FormEvent<HTMLDivElement>) => void
  onResetCapture?: (event: FormEvent<HTMLDivElement>) => void
  onScroll?: (event: UIEvent<HTMLDivElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLDivElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLDivElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLDivElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLDivElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLDivElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLDivElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLDivElement>) => void
  open?: boolean
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  readOnly?: boolean
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  renderPrefix?: (state: { disabled?: boolean | undefined; error?: boolean | undefined; filled?: boolean | undefined; focused?: boolean | undefined; margin?: "none" | "normal" | "dense" | undefined; required?: boolean | undefined; startAdornment?: ReactNode; }) => ReactNode
  renderValue?: (value: unknown) => ReactNode
  required?: boolean
  resource?: string
  results?: number
  role?: string
  rows?: 
    | number
    | string
  rowsMax?: 
    | number
    | string
  rowsMin?: 
    | number
    | string
  security?: string
  selects: ISelectProps[]
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  startAdornment?: ReactNode
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  type?: string
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  value: 
    | number
    | string
  variant?: 
    | "filled"
    | "outlined"
    | "standard"
  vocab?: string
}
`;

exports[`Slide 1`] = `
{
  addEndListener?: EndHandler
  appear?: boolean
  children: ReactNode
  direction: 
    | "down"
    | "left"
    | "right"
    | "up"
  enter?: boolean
  exit?: boolean
  in?: boolean
  mountOnEnter?: boolean
  onEnter?: EnterHandler
  onEntered?: EnterHandler
  onEntering?: EnterHandler
  onExit?: ExitHandler
  onExited?: ExitHandler
  onExiting?: ExitHandler
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  style?: CSSProperties
  theme?: {
    breakpoints: {
      between: (start: number | "xs" | "sm" | "md" | "lg" | "xl", end: number | "xs" | "sm" | "md" | "lg" | "xl") => string
      down: (key: number | "xs" | "sm" | "md" | "lg" | "xl") => string
      keys: Breakpoint[]
      only: (key: Breakpoint) => string
      up: (key: number | "xs" | "sm" | "md" | "lg" | "xl") => string
      values: BreakpointValues
      width: (key: Breakpoint) => number
    }
    direction: 
      | "ltr"
      | "rtl"
    mixins: {
      gutters: (styles?: CSSProperties | undefined) => CSSProperties
      toolbar: CSSProperties
    }
    overrides?: Overrides
    palette: {
      action: {
        active: string
        disabled: string
        disabledBackground: string
        hover: string
        hoverOpacity: number
        selected: string
      }
      augmentColor: { (color: Partial<Color>, mainShade?: string | number | undefined, lightShade?: string | number | undefined, darkShade?: string | number | undefined): PaletteColor; (color: PaletteColorOptions): PaletteColor; }
      background: {
        default: string
        paper: string
      }
      common: {
        black: string
        white: string
      }
      contrastThreshold: number
      divider: string
      error: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      getContrastText: (background: string) => string
      grey: {
        100: string
        200: string
        300: string
        400: string
        50: string
        500: string
        600: string
        700: string
        800: string
        900: string
        A100: string
        A200: string
        A400: string
        A700: string
      }
      info: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      primary: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      secondary: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      success: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      text: {
        disabled: string
        hint: string
        primary: string
        secondary: string
      }
      tonalOffset: number
      type: 
        | "dark"
        | "light"
      warning: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
    }
    props?: ComponentsProps
    shadows: Shadows
    shape: {
      borderRadius: number
    }
    spacing: {
    }
    transitions: {
      create: (props: string | string[], options?: Partial<{ duration: ReactText; easing: string; delay: ReactText; }> | undefined) => string
      duration: {
        complex: number
        enteringScreen: number
        leavingScreen: number
        short: number
        shorter: number
        shortest: number
        standard: number
      }
      easing: {
        easeIn: string
        easeInOut: string
        easeOut: string
        sharp: string
      }
      getAutoHeightDuration: (height: number) => number
    }
    typography: {
      body1: CSSProperties
      body2: CSSProperties
      button: CSSProperties
      caption: CSSProperties
      fontFamily: string
      fontSize: number
      fontWeightBold: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      fontWeightLight: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      fontWeightMedium: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      fontWeightRegular: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      h1: CSSProperties
      h2: CSSProperties
      h3: CSSProperties
      h4: CSSProperties
      h5: CSSProperties
      h6: CSSProperties
      overline: CSSProperties
      pxToRem: (px: number) => string
      subtitle1: CSSProperties
      subtitle2: CSSProperties
    }
    zIndex: {
      appBar: number
      drawer: number
      mobileStepper: number
      modal: number
      snackbar: number
      speedDial: number
      tooltip: number
    }
  }
  timeout?: 
    | number
    | { appear?: number | undefined; enter?: number | undefined; exit?: number | undefined; }
  unmountOnExit?: boolean
}
`;

exports[`Snackbar 1`] = `
{
  ClickAwayListenerProps?: Partial<ClickAwayListenerProps>
  ContentProps?: Partial<SnackbarContentProps>
  TransitionComponent?: 
    | ComponentClass<TransitionProps, any>
    | FunctionComponent<TransitionProps>
  TransitionProps?: {
    addEndListener?: EndHandler
    appear?: boolean
    enter?: boolean
    exit?: boolean
    in?: boolean
    mountOnEnter?: boolean
    onEnter?: EnterHandler
    onEntered?: EnterHandler
    onEntering?: EnterHandler
    onExit?: ExitHandler
    onExited?: ExitHandler
    onExiting?: ExitHandler
    style?: CSSProperties
    timeout?: 
      | number
      | { appear?: number | undefined; enter?: number | undefined; exit?: number | undefined; }
    unmountOnExit?: boolean
  }
  about?: string
  accessKey?: string
  action?: ReactNode
  anchorOrigin?: {
    horizontal: 
      | "center"
      | "left"
      | "right"
    vertical: 
      | "bottom"
      | "top"
  }
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoHideDuration?: number
  autoSave?: string
  bottomOffset?: number
  children?: ReactNode
  className?: string
  classes?: Partial<Record<SnackbarClassKey, string>>
  color?: string
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  disableWindowBlurListener?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  leftOffset?: number
  message?: ReactNode
  onAbort?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLDivElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onBlur?: (event: FocusEvent<HTMLDivElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onChange?: (event: FormEvent<HTMLDivElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLDivElement>) => void
  onClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClose?: (event: SyntheticEvent<any, Event>, reason: string) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCut?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLDivElement>) => void
  onDragCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnd?: (event: DragEvent<HTMLDivElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnter?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragExit?: (event: DragEvent<HTMLDivElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeave?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragOver?: (event: DragEvent<HTMLDivElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragStart?: (event: DragEvent<HTMLDivElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDrop?: (event: DragEvent<HTMLDivElement>) => void
  onDropCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEnter?: EnterHandler
  onEntered?: EnterHandler
  onEntering?: EnterHandler
  onError?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onExit?: ExitHandler
  onExited?: ExitHandler
  onExiting?: ExitHandler
  onFocus?: (event: FocusEvent<HTMLDivElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onInput?: (event: FormEvent<HTMLDivElement>) => void
  onInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onInvalid?: (event: FormEvent<HTMLDivElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLDivElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<any, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<any, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPause?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onReset?: (event: FormEvent<HTMLDivElement>) => void
  onResetCapture?: (event: FormEvent<HTMLDivElement>) => void
  onScroll?: (event: UIEvent<HTMLDivElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLDivElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLDivElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLDivElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLDivElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLDivElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLDivElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLDivElement>) => void
  open: boolean
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  resource?: string
  results?: number
  resumeHideDuration?: number
  rightOffset?: number
  role?: string
  security?: string
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  topOffset?: number
  transitionDuration?: 
    | number
    | { appear?: number | undefined; enter?: number | undefined; exit?: number | undefined; }
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  vocab?: string
}
`;

exports[`Stack 1`] = `
{
  alignX?: 
    | "center"
    | "left"
    | "right"
    | "stretch"
  children: ReactNode
  data-id?: string
  dividers?: boolean
  space?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
}
`;

exports[`SvgIcon 1`] = `
{
  accentHeight?: 
    | number
    | string
  accumulate?: 
    | "none"
    | "sum"
  additive?: 
    | "replace"
    | "sum"
  alignmentBaseline?: 
    | "after-edge"
    | "alphabetic"
    | "auto"
    | "baseline"
    | "before-edge"
    | "central"
    | "hanging"
    | "ideographic"
    | "inherit"
    | "mathematical"
    | "middle"
    | "text-after-edge"
    | "text-before-edge"
  allowReorder?: 
    | "no"
    | "yes"
  alphabetic?: 
    | number
    | string
  amplitude?: 
    | number
    | string
  arabicForm?: 
    | "initial"
    | "isolated"
    | "medial"
    | "terminal"
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  ascent?: 
    | number
    | string
  attributeName?: string
  attributeType?: string
  autoReverse?: 
    | "false"
    | "true"
    | false
    | true
  azimuth?: 
    | number
    | string
  baseFrequency?: 
    | number
    | string
  baseProfile?: 
    | number
    | string
  baselineShift?: 
    | number
    | string
  bbox?: 
    | number
    | string
  begin?: 
    | number
    | string
  bias?: 
    | number
    | string
  by?: 
    | number
    | string
  calcMode?: 
    | number
    | string
  capHeight?: 
    | number
    | string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<IconClassKey, string>>
  clip?: 
    | number
    | string
  clipPath?: string
  clipPathUnits?: 
    | number
    | string
  clipRule?: 
    | number
    | string
  color?: 
    | "action"
    | "disabled"
    | "error"
    | "inherit"
    | "primary"
    | "secondary"
  colorInterpolation?: 
    | number
    | string
  colorInterpolationFilters?: 
    | "auto"
    | "inherit"
    | "linearRGB"
    | "sRGB"
  colorProfile?: 
    | number
    | string
  colorRendering?: 
    | number
    | string
  component?: 
    | "animate"
    | "animateMotion"
    | "animateTransform"
    | "defs"
    | "desc"
    | "foreignObject"
    | "g"
    | "metadata"
    | "mpath"
    | "svg"
    | "switch"
    | "symbol"
    | ComponentClass<SVGProps<SVGSVGElement>, any>
    | FunctionComponent<SVGProps<SVGSVGElement>>
  contentScriptType?: 
    | number
    | string
  contentStyleType?: 
    | number
    | string
  crossOrigin?: 
    | ""
    | "anonymous"
    | "use-credentials"
  cursor?: 
    | number
    | string
  cx?: 
    | number
    | string
  cy?: 
    | number
    | string
  d?: string
  dangerouslySetInnerHTML?: { __html: string; }
  decelerate?: 
    | number
    | string
  descent?: 
    | number
    | string
  diffuseConstant?: 
    | number
    | string
  direction?: 
    | number
    | string
  display?: 
    | number
    | string
  divisor?: 
    | number
    | string
  dominantBaseline?: 
    | number
    | string
  dur?: 
    | number
    | string
  dx?: 
    | number
    | string
  dy?: 
    | number
    | string
  edgeMode?: 
    | number
    | string
  elevation?: 
    | number
    | string
  enableBackground?: 
    | number
    | string
  end?: 
    | number
    | string
  exponent?: 
    | number
    | string
  externalResourcesRequired?: 
    | "false"
    | "true"
    | false
    | true
  fill?: string
  fillOpacity?: 
    | number
    | string
  fillRule?: 
    | "evenodd"
    | "inherit"
    | "nonzero"
  filter?: string
  filterRes?: 
    | number
    | string
  filterUnits?: 
    | number
    | string
  floodColor?: 
    | number
    | string
  floodOpacity?: 
    | number
    | string
  focusable?: 
    | "auto"
    | "false"
    | "true"
    | false
    | true
  fontFamily?: string
  fontSize?: 
    | "default"
    | "inherit"
    | "large"
    | "small"
  fontSizeAdjust?: 
    | number
    | string
  fontStretch?: 
    | number
    | string
  fontStyle?: 
    | number
    | string
  fontVariant?: 
    | number
    | string
  fontWeight?: 
    | number
    | string
  format?: 
    | number
    | string
  from?: 
    | number
    | string
  fx?: 
    | number
    | string
  fy?: 
    | number
    | string
  g1?: 
    | number
    | string
  g2?: 
    | number
    | string
  glyphName?: 
    | number
    | string
  glyphOrientationHorizontal?: 
    | number
    | string
  glyphOrientationVertical?: 
    | number
    | string
  glyphRef?: 
    | number
    | string
  gradientTransform?: string
  gradientUnits?: string
  hanging?: 
    | number
    | string
  height?: 
    | number
    | string
  horizAdvX?: 
    | number
    | string
  horizOriginX?: 
    | number
    | string
  href?: string
  htmlColor?: string
  id?: string
  ideographic?: 
    | number
    | string
  imageRendering?: 
    | number
    | string
  in?: string
  in2?: 
    | number
    | string
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  intercept?: 
    | number
    | string
  k?: 
    | number
    | string
  k1?: 
    | number
    | string
  k2?: 
    | number
    | string
  k3?: 
    | number
    | string
  k4?: 
    | number
    | string
  kernelMatrix?: 
    | number
    | string
  kernelUnitLength?: 
    | number
    | string
  kerning?: 
    | number
    | string
  keyPoints?: 
    | number
    | string
  keySplines?: 
    | number
    | string
  keyTimes?: 
    | number
    | string
  lang?: string
  lengthAdjust?: 
    | number
    | string
  letterSpacing?: 
    | number
    | string
  lightingColor?: 
    | number
    | string
  limitingConeAngle?: 
    | number
    | string
  local?: 
    | number
    | string
  markerEnd?: string
  markerHeight?: 
    | number
    | string
  markerMid?: string
  markerStart?: string
  markerUnits?: 
    | number
    | string
  markerWidth?: 
    | number
    | string
  mask?: string
  maskContentUnits?: 
    | number
    | string
  maskUnits?: 
    | number
    | string
  mathematical?: 
    | number
    | string
  max?: 
    | number
    | string
  media?: string
  method?: string
  min?: 
    | number
    | string
  mode?: 
    | number
    | string
  name?: string
  numOctaves?: 
    | number
    | string
  offset?: 
    | number
    | string
  onAbort?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<SVGSVGElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<SVGSVGElement>) => void
  onAnimationIteration?: (event: AnimationEvent<SVGSVGElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<SVGSVGElement>) => void
  onAnimationStart?: (event: AnimationEvent<SVGSVGElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<SVGSVGElement>) => void
  onAuxClick?: (event: MouseEvent<SVGSVGElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<SVGSVGElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<SVGSVGElement>) => void
  onBeforeInputCapture?: (event: FormEvent<SVGSVGElement>) => void
  onBlur?: (event: FocusEvent<SVGSVGElement>) => void
  onBlurCapture?: (event: FocusEvent<SVGSVGElement>) => void
  onCanPlay?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onChange?: (event: FormEvent<SVGSVGElement>) => void
  onChangeCapture?: (event: FormEvent<SVGSVGElement>) => void
  onClick?: (event: MouseEvent<SVGSVGElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<SVGSVGElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<SVGSVGElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<SVGSVGElement>) => void
  onCompositionStart?: (event: CompositionEvent<SVGSVGElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<SVGSVGElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<SVGSVGElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<SVGSVGElement>) => void
  onContextMenu?: (event: MouseEvent<SVGSVGElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<SVGSVGElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<SVGSVGElement>) => void
  onCopyCapture?: (event: ClipboardEvent<SVGSVGElement>) => void
  onCut?: (event: ClipboardEvent<SVGSVGElement>) => void
  onCutCapture?: (event: ClipboardEvent<SVGSVGElement>) => void
  onDoubleClick?: (event: MouseEvent<SVGSVGElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<SVGSVGElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<SVGSVGElement>) => void
  onDragCapture?: (event: DragEvent<SVGSVGElement>) => void
  onDragEnd?: (event: DragEvent<SVGSVGElement>) => void
  onDragEndCapture?: (event: DragEvent<SVGSVGElement>) => void
  onDragEnter?: (event: DragEvent<SVGSVGElement>) => void
  onDragEnterCapture?: (event: DragEvent<SVGSVGElement>) => void
  onDragExit?: (event: DragEvent<SVGSVGElement>) => void
  onDragExitCapture?: (event: DragEvent<SVGSVGElement>) => void
  onDragLeave?: (event: DragEvent<SVGSVGElement>) => void
  onDragLeaveCapture?: (event: DragEvent<SVGSVGElement>) => void
  onDragOver?: (event: DragEvent<SVGSVGElement>) => void
  onDragOverCapture?: (event: DragEvent<SVGSVGElement>) => void
  onDragStart?: (event: DragEvent<SVGSVGElement>) => void
  onDragStartCapture?: (event: DragEvent<SVGSVGElement>) => void
  onDrop?: (event: DragEvent<SVGSVGElement>) => void
  onDropCapture?: (event: DragEvent<SVGSVGElement>) => void
  onDurationChange?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onEnded?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onError?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onFocus?: (event: FocusEvent<SVGSVGElement>) => void
  onFocusCapture?: (event: FocusEvent<SVGSVGElement>) => void
  onGotPointerCapture?: (event: PointerEvent<SVGSVGElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<SVGSVGElement>) => void
  onInput?: (event: FormEvent<SVGSVGElement>) => void
  onInputCapture?: (event: FormEvent<SVGSVGElement>) => void
  onInvalid?: (event: FormEvent<SVGSVGElement>) => void
  onInvalidCapture?: (event: FormEvent<SVGSVGElement>) => void
  onKeyDown?: (event: KeyboardEvent<SVGSVGElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<SVGSVGElement>) => void
  onKeyPress?: (event: KeyboardEvent<SVGSVGElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<SVGSVGElement>) => void
  onKeyUp?: (event: KeyboardEvent<SVGSVGElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<SVGSVGElement>) => void
  onLoad?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<SVGSVGElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<SVGSVGElement>) => void
  onMouseDown?: (event: MouseEvent<SVGSVGElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<SVGSVGElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<SVGSVGElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<SVGSVGElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<SVGSVGElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<SVGSVGElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<SVGSVGElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<SVGSVGElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<SVGSVGElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<SVGSVGElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<SVGSVGElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<SVGSVGElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<SVGSVGElement>) => void
  onPasteCapture?: (event: ClipboardEvent<SVGSVGElement>) => void
  onPause?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onPlay?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<SVGSVGElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<SVGSVGElement>) => void
  onPointerDown?: (event: PointerEvent<SVGSVGElement>) => void
  onPointerDownCapture?: (event: PointerEvent<SVGSVGElement>) => void
  onPointerEnter?: (event: PointerEvent<SVGSVGElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<SVGSVGElement>) => void
  onPointerLeave?: (event: PointerEvent<SVGSVGElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<SVGSVGElement>) => void
  onPointerMove?: (event: PointerEvent<SVGSVGElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<SVGSVGElement>) => void
  onPointerOut?: (event: PointerEvent<SVGSVGElement>) => void
  onPointerOutCapture?: (event: PointerEvent<SVGSVGElement>) => void
  onPointerOver?: (event: PointerEvent<SVGSVGElement>) => void
  onPointerOverCapture?: (event: PointerEvent<SVGSVGElement>) => void
  onPointerUp?: (event: PointerEvent<SVGSVGElement>) => void
  onPointerUpCapture?: (event: PointerEvent<SVGSVGElement>) => void
  onProgress?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onReset?: (event: FormEvent<SVGSVGElement>) => void
  onResetCapture?: (event: FormEvent<SVGSVGElement>) => void
  onScroll?: (event: UIEvent<SVGSVGElement>) => void
  onScrollCapture?: (event: UIEvent<SVGSVGElement>) => void
  onSeeked?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onSelect?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onStalled?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onSubmit?: (event: FormEvent<SVGSVGElement>) => void
  onSubmitCapture?: (event: FormEvent<SVGSVGElement>) => void
  onSuspend?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<SVGSVGElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<SVGSVGElement>) => void
  onTouchEnd?: (event: TouchEvent<SVGSVGElement>) => void
  onTouchEndCapture?: (event: TouchEvent<SVGSVGElement>) => void
  onTouchMove?: (event: TouchEvent<SVGSVGElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<SVGSVGElement>) => void
  onTouchStart?: (event: TouchEvent<SVGSVGElement>) => void
  onTouchStartCapture?: (event: TouchEvent<SVGSVGElement>) => void
  onTransitionEnd?: (event: TransitionEvent<SVGSVGElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<SVGSVGElement>) => void
  onVolumeChange?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<SVGSVGElement, Event>) => void
  onWheel?: (event: WheelEvent<SVGSVGElement>) => void
  onWheelCapture?: (event: WheelEvent<SVGSVGElement>) => void
  opacity?: 
    | number
    | string
  operator?: 
    | number
    | string
  order?: 
    | number
    | string
  orient?: 
    | number
    | string
  orientation?: 
    | number
    | string
  origin?: 
    | number
    | string
  overflow?: 
    | number
    | string
  overlinePosition?: 
    | number
    | string
  overlineThickness?: 
    | number
    | string
  paintOrder?: 
    | number
    | string
  panose1?: 
    | number
    | string
  pathLength?: 
    | number
    | string
  patternContentUnits?: string
  patternTransform?: 
    | number
    | string
  patternUnits?: string
  pointerEvents?: 
    | number
    | string
  points?: string
  pointsAtX?: 
    | number
    | string
  pointsAtY?: 
    | number
    | string
  pointsAtZ?: 
    | number
    | string
  preserveAlpha?: 
    | "false"
    | "true"
    | false
    | true
  preserveAspectRatio?: string
  primitiveUnits?: 
    | number
    | string
  r?: 
    | number
    | string
  radius?: 
    | number
    | string
  ref?: 
    | (instance: SVGSVGElement | null) => void
    | RefObject<SVGSVGElement>
    | string
  refX?: 
    | number
    | string
  refY?: 
    | number
    | string
  renderingIntent?: 
    | number
    | string
  repeatCount?: 
    | number
    | string
  repeatDur?: 
    | number
    | string
  requiredExtensions?: 
    | number
    | string
  requiredFeatures?: 
    | number
    | string
  restart?: 
    | number
    | string
  result?: string
  role?: string
  rotate?: 
    | number
    | string
  rx?: 
    | number
    | string
  ry?: 
    | number
    | string
  scale?: 
    | number
    | string
  seed?: 
    | number
    | string
  shapeRendering?: string
  slope?: 
    | number
    | string
  spacing?: 
    | number
    | string
  specularConstant?: 
    | number
    | string
  specularExponent?: 
    | number
    | string
  speed?: 
    | number
    | string
  spreadMethod?: string
  startOffset?: 
    | number
    | string
  stdDeviation?: 
    | number
    | string
  stemh?: 
    | number
    | string
  stemv?: 
    | number
    | string
  stitchTiles?: 
    | number
    | string
  stopColor?: string
  stopOpacity?: 
    | number
    | string
  strikethroughPosition?: 
    | number
    | string
  strikethroughThickness?: 
    | number
    | string
  string?: 
    | number
    | string
  stroke?: string
  strokeDasharray?: 
    | number
    | string
  strokeDashoffset?: 
    | number
    | string
  strokeLinecap?: 
    | "butt"
    | "inherit"
    | "round"
    | "square"
  strokeLinejoin?: 
    | "bevel"
    | "inherit"
    | "miter"
    | "round"
  strokeMiterlimit?: 
    | number
    | string
  strokeOpacity?: 
    | number
    | string
  strokeWidth?: 
    | number
    | string
  style?: CSSProperties
  surfaceScale?: 
    | number
    | string
  systemLanguage?: 
    | number
    | string
  tabIndex?: number
  tableValues?: 
    | number
    | string
  target?: string
  targetX?: 
    | number
    | string
  targetY?: 
    | number
    | string
  textAnchor?: string
  textDecoration?: 
    | number
    | string
  textLength?: 
    | number
    | string
  textRendering?: 
    | number
    | string
  titleAccess?: string
  to?: 
    | number
    | string
  transform?: string
  type?: string
  u1?: 
    | number
    | string
  u2?: 
    | number
    | string
  underlinePosition?: 
    | number
    | string
  underlineThickness?: 
    | number
    | string
  unicode?: 
    | number
    | string
  unicodeBidi?: 
    | number
    | string
  unicodeRange?: 
    | number
    | string
  unitsPerEm?: 
    | number
    | string
  vAlphabetic?: 
    | number
    | string
  vHanging?: 
    | number
    | string
  vIdeographic?: 
    | number
    | string
  vMathematical?: 
    | number
    | string
  values?: string
  vectorEffect?: 
    | number
    | string
  version?: string
  vertAdvY?: 
    | number
    | string
  vertOriginX?: 
    | number
    | string
  vertOriginY?: 
    | number
    | string
  viewBox?: string
  viewTarget?: 
    | number
    | string
  visibility?: 
    | number
    | string
  width?: 
    | number
    | string
  widths?: 
    | number
    | string
  wordSpacing?: 
    | number
    | string
  writingMode?: 
    | number
    | string
  x?: 
    | number
    | string
  x1?: 
    | number
    | string
  x2?: 
    | number
    | string
  xChannelSelector?: string
  xHeight?: 
    | number
    | string
  xlinkActuate?: string
  xlinkArcrole?: string
  xlinkHref?: string
  xlinkRole?: string
  xlinkShow?: string
  xlinkTitle?: string
  xlinkType?: string
  xmlBase?: string
  xmlLang?: string
  xmlSpace?: string
  xmlns?: string
  xmlnsXlink?: string
  y?: 
    | number
    | string
  y1?: 
    | number
    | string
  y2?: 
    | number
    | string
  yChannelSelector?: string
  z?: 
    | number
    | string
  zoomAndPan?: string
}
`;

exports[`Tab 1`] = `
{
  TouchRippleProps?: Partial<TouchRippleProps>
  about?: string
  accessKey?: string
  action?: 
    | (instance: ButtonBaseActions | null) => void
    | RefObject<ButtonBaseActions>
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  buttonRef?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  centerRipple?: boolean
  children?: ReactNode
  className?: string
  classes?: Partial<Record<TabClassKey, string>>
  color?: string
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  disableFocusRipple?: boolean
  disableRipple?: boolean
  disableTouchRipple?: boolean
  disabled?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  focusRipple?: boolean
  focusVisibleClassName?: string
  fullWidth?: boolean
  hidden?: boolean
  icon?: 
    | ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>
    | string
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  label?: ReactNode
  lang?: string
  onAbort?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLDivElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onBlur?: (event: FocusEvent<HTMLDivElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onChange?: ((event: ChangeEvent<{ checked: boolean; }>, value: any) => void) & ((event: FormEvent<HTMLDivElement>) => void)
  onChangeCapture?: (event: FormEvent<HTMLDivElement>) => void
  onClick?: ((event: any) => void) & ((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)
  onClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCut?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLDivElement>) => void
  onDragCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnd?: (event: DragEvent<HTMLDivElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnter?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragExit?: (event: DragEvent<HTMLDivElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeave?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragOver?: (event: DragEvent<HTMLDivElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragStart?: (event: DragEvent<HTMLDivElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDrop?: (event: DragEvent<HTMLDivElement>) => void
  onDropCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLDivElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onFocusVisible?: (event: FocusEvent<any>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onInput?: (event: FormEvent<HTMLDivElement>) => void
  onInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onInvalid?: (event: FormEvent<HTMLDivElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLDivElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPause?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onReset?: (event: FormEvent<HTMLDivElement>) => void
  onResetCapture?: (event: FormEvent<HTMLDivElement>) => void
  onScroll?: (event: UIEvent<HTMLDivElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLDivElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLDivElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLDivElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLDivElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLDivElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLDivElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLDivElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: HTMLDivElement | null) => void
    | RefObject<HTMLDivElement>
  resource?: string
  results?: number
  role?: string
  security?: string
  selected?: boolean
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  textColor?: string
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  value?: any
  vocab?: string
  wrapped?: boolean
}
`;

exports[`Table 1`] = `
{
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  cellPadding?: 
    | number
    | string
  cellSpacing?: 
    | number
    | string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<TableClassKey, string>>
  color?: string
  component?: 
    | "abbr"
    | "address"
    | "article"
    | "aside"
    | "b"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "caption"
    | "cite"
    | "code"
    | "dd"
    | "del"
    | "details"
    | "dfn"
    | "div"
    | "dt"
    | "em"
    | "figcaption"
    | "figure"
    | "footer"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "i"
    | "kbd"
    | "keygen"
    | "main"
    | "mark"
    | "menu"
    | "menuitem"
    | "meter"
    | "nav"
    | "noindex"
    | "noscript"
    | "output"
    | "p"
    | "picture"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "section"
    | "small"
    | "span"
    | "strong"
    | "sub"
    | "summary"
    | "sup"
    | "table"
    | "time"
    | "u"
    | "var"
    | "wbr"
    | "webview"
    | ComponentClass<TableBaseProps, any>
    | FunctionComponent<TableBaseProps>
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  data-id: string
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dense?: boolean
  dir?: string
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  onAbort?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLTableElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLTableElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLTableElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLTableElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLTableElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLTableElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLTableElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLTableElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLTableElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLTableElement>) => void
  onBlur?: (event: FocusEvent<HTMLTableElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLTableElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onChange?: (event: FormEvent<HTMLTableElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLTableElement>) => void
  onClick?: (event: MouseEvent<HTMLTableElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLTableElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLTableElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLTableElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLTableElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLTableElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLTableElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLTableElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLTableElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLTableElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLTableElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLTableElement>) => void
  onCut?: (event: ClipboardEvent<HTMLTableElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLTableElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLTableElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLTableElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLTableElement>) => void
  onDragCapture?: (event: DragEvent<HTMLTableElement>) => void
  onDragEnd?: (event: DragEvent<HTMLTableElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLTableElement>) => void
  onDragEnter?: (event: DragEvent<HTMLTableElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLTableElement>) => void
  onDragExit?: (event: DragEvent<HTMLTableElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLTableElement>) => void
  onDragLeave?: (event: DragEvent<HTMLTableElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLTableElement>) => void
  onDragOver?: (event: DragEvent<HTMLTableElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLTableElement>) => void
  onDragStart?: (event: DragEvent<HTMLTableElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLTableElement>) => void
  onDrop?: (event: DragEvent<HTMLTableElement>) => void
  onDropCapture?: (event: DragEvent<HTMLTableElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLTableElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLTableElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLTableElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLTableElement>) => void
  onInput?: (event: FormEvent<HTMLTableElement>) => void
  onInputCapture?: (event: FormEvent<HTMLTableElement>) => void
  onInvalid?: (event: FormEvent<HTMLTableElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLTableElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLTableElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLTableElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLTableElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLTableElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLTableElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLTableElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLTableElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLTableElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLTableElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLTableElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLTableElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLTableElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLTableElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLTableElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLTableElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLTableElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLTableElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLTableElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLTableElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLTableElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLTableElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLTableElement>) => void
  onPause?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLTableElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLTableElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLTableElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLTableElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLTableElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLTableElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLTableElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLTableElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLTableElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLTableElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLTableElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLTableElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLTableElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLTableElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLTableElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLTableElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onReset?: (event: FormEvent<HTMLTableElement>) => void
  onResetCapture?: (event: FormEvent<HTMLTableElement>) => void
  onScroll?: (event: UIEvent<HTMLTableElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLTableElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLTableElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLTableElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLTableElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLTableElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLTableElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLTableElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLTableElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLTableElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLTableElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLTableElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLTableElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLTableElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLTableElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLTableElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLTableElement>) => void
  padding?: 
    | "checkbox"
    | "default"
    | "none"
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  resource?: string
  results?: number
  role?: string
  security?: string
  size?: 
    | "medium"
    | "small"
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  stickyHeader?: boolean
  style?: CSSProperties
  summary?: string
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  vocab?: string
}
`;

exports[`TableBody 1`] = `
{
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<"root", string>>
  color?: string
  component?: 
    | "abbr"
    | "address"
    | "article"
    | "aside"
    | "b"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "caption"
    | "cite"
    | "code"
    | "dd"
    | "del"
    | "details"
    | "dfn"
    | "div"
    | "dt"
    | "em"
    | "figcaption"
    | "figure"
    | "footer"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "i"
    | "kbd"
    | "keygen"
    | "main"
    | "mark"
    | "menu"
    | "menuitem"
    | "meter"
    | "nav"
    | "noindex"
    | "noscript"
    | "output"
    | "p"
    | "picture"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "section"
    | "small"
    | "span"
    | "strong"
    | "sub"
    | "summary"
    | "sup"
    | "tbody"
    | "tfoot"
    | "thead"
    | "time"
    | "u"
    | "var"
    | "wbr"
    | "webview"
    | ComponentClass<TableBodyBaseProps, any>
    | FunctionComponent<TableBodyBaseProps>
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  data-id: string
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  onAbort?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLTableSectionElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLTableSectionElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLTableSectionElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLTableSectionElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLTableSectionElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLTableSectionElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLTableSectionElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLTableSectionElement>) => void
  onBlur?: (event: FocusEvent<HTMLTableSectionElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLTableSectionElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onChange?: (event: FormEvent<HTMLTableSectionElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLTableSectionElement>) => void
  onClick?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLTableSectionElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLTableSectionElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLTableSectionElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLTableSectionElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLTableSectionElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLTableSectionElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLTableSectionElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLTableSectionElement>) => void
  onCut?: (event: ClipboardEvent<HTMLTableSectionElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLTableSectionElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragCapture?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragEnd?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragEnter?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragExit?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragLeave?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragOver?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragStart?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDrop?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDropCapture?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLTableSectionElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLTableSectionElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onInput?: (event: FormEvent<HTMLTableSectionElement>) => void
  onInputCapture?: (event: FormEvent<HTMLTableSectionElement>) => void
  onInvalid?: (event: FormEvent<HTMLTableSectionElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLTableSectionElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLTableSectionElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLTableSectionElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLTableSectionElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLTableSectionElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLTableSectionElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLTableSectionElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLTableSectionElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLTableSectionElement>) => void
  onPause?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onReset?: (event: FormEvent<HTMLTableSectionElement>) => void
  onResetCapture?: (event: FormEvent<HTMLTableSectionElement>) => void
  onScroll?: (event: UIEvent<HTMLTableSectionElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLTableSectionElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLTableSectionElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLTableSectionElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLTableSectionElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLTableSectionElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLTableSectionElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLTableSectionElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLTableSectionElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLTableSectionElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLTableSectionElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLTableSectionElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLTableSectionElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLTableSectionElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLTableSectionElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLTableSectionElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  resource?: string
  results?: number
  role?: string
  security?: string
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  vocab?: string
}
`;

exports[`TableCell 1`] = `
{
  abbr?: string
  about?: string
  accessKey?: string
  align?: 
    | "center"
    | "inherit"
    | "justify"
    | "left"
    | "right"
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  bordered?: boolean
  children?: ReactNode
  className?: string
  classes?: Partial<Record<TableCellClassKey, string>>
  colSpan?: number
  color?: string
  component?: 
    | "abbr"
    | "address"
    | "article"
    | "aside"
    | "b"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "caption"
    | "cite"
    | "code"
    | "dd"
    | "del"
    | "details"
    | "dfn"
    | "div"
    | "dt"
    | "em"
    | "figcaption"
    | "figure"
    | "footer"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "i"
    | "kbd"
    | "keygen"
    | "main"
    | "mark"
    | "menu"
    | "menuitem"
    | "meter"
    | "nav"
    | "noindex"
    | "noscript"
    | "output"
    | "p"
    | "picture"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "section"
    | "small"
    | "span"
    | "strong"
    | "sub"
    | "summary"
    | "sup"
    | "td"
    | "th"
    | "time"
    | "u"
    | "var"
    | "wbr"
    | "webview"
    | ComponentClass<TableCellBaseProps, any>
    | FunctionComponent<TableCellBaseProps>
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  data-id: string
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  headers?: string
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  onAbort?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onAbortCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onAnimationEnd?: ((event: AnimationEvent<HTMLTableHeaderCellElement>) => void) & ((event: AnimationEvent<HTMLTableDataCellElement>) => void)
  onAnimationEndCapture?: ((event: AnimationEvent<HTMLTableHeaderCellElement>) => void) & ((event: AnimationEvent<HTMLTableDataCellElement>) => void)
  onAnimationIteration?: ((event: AnimationEvent<HTMLTableHeaderCellElement>) => void) & ((event: AnimationEvent<HTMLTableDataCellElement>) => void)
  onAnimationIterationCapture?: ((event: AnimationEvent<HTMLTableHeaderCellElement>) => void) & ((event: AnimationEvent<HTMLTableDataCellElement>) => void)
  onAnimationStart?: ((event: AnimationEvent<HTMLTableHeaderCellElement>) => void) & ((event: AnimationEvent<HTMLTableDataCellElement>) => void)
  onAnimationStartCapture?: ((event: AnimationEvent<HTMLTableHeaderCellElement>) => void) & ((event: AnimationEvent<HTMLTableDataCellElement>) => void)
  onAuxClick?: ((event: MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void) & ((event: MouseEvent<HTMLTableDataCellElement, MouseEvent>) => void)
  onAuxClickCapture?: ((event: MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void) & ((event: MouseEvent<HTMLTableDataCellElement, MouseEvent>) => void)
  onBeforeInput?: ((event: FormEvent<HTMLTableHeaderCellElement>) => void) & ((event: FormEvent<HTMLTableDataCellElement>) => void)
  onBeforeInputCapture?: ((event: FormEvent<HTMLTableHeaderCellElement>) => void) & ((event: FormEvent<HTMLTableDataCellElement>) => void)
  onBlur?: ((event: FocusEvent<HTMLTableHeaderCellElement>) => void) & ((event: FocusEvent<HTMLTableDataCellElement>) => void)
  onBlurCapture?: ((event: FocusEvent<HTMLTableHeaderCellElement>) => void) & ((event: FocusEvent<HTMLTableDataCellElement>) => void)
  onCanPlay?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onCanPlayCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onCanPlayThrough?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onCanPlayThroughCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onChange?: ((event: FormEvent<HTMLTableHeaderCellElement>) => void) & ((event: FormEvent<HTMLTableDataCellElement>) => void)
  onChangeCapture?: ((event: FormEvent<HTMLTableHeaderCellElement>) => void) & ((event: FormEvent<HTMLTableDataCellElement>) => void)
  onClick?: ((event: MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void) & ((event: MouseEvent<HTMLTableDataCellElement, MouseEvent>) => void)
  onClickCapture?: ((event: MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void) & ((event: MouseEvent<HTMLTableDataCellElement, MouseEvent>) => void)
  onCompositionEnd?: ((event: CompositionEvent<HTMLTableHeaderCellElement>) => void) & ((event: CompositionEvent<HTMLTableDataCellElement>) => void)
  onCompositionEndCapture?: ((event: CompositionEvent<HTMLTableHeaderCellElement>) => void) & ((event: CompositionEvent<HTMLTableDataCellElement>) => void)
  onCompositionStart?: ((event: CompositionEvent<HTMLTableHeaderCellElement>) => void) & ((event: CompositionEvent<HTMLTableDataCellElement>) => void)
  onCompositionStartCapture?: ((event: CompositionEvent<HTMLTableHeaderCellElement>) => void) & ((event: CompositionEvent<HTMLTableDataCellElement>) => void)
  onCompositionUpdate?: ((event: CompositionEvent<HTMLTableHeaderCellElement>) => void) & ((event: CompositionEvent<HTMLTableDataCellElement>) => void)
  onCompositionUpdateCapture?: ((event: CompositionEvent<HTMLTableHeaderCellElement>) => void) & ((event: CompositionEvent<HTMLTableDataCellElement>) => void)
  onContextMenu?: ((event: MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void) & ((event: MouseEvent<HTMLTableDataCellElement, MouseEvent>) => void)
  onContextMenuCapture?: ((event: MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void) & ((event: MouseEvent<HTMLTableDataCellElement, MouseEvent>) => void)
  onCopy?: ((event: ClipboardEvent<HTMLTableHeaderCellElement>) => void) & ((event: ClipboardEvent<HTMLTableDataCellElement>) => void)
  onCopyCapture?: ((event: ClipboardEvent<HTMLTableHeaderCellElement>) => void) & ((event: ClipboardEvent<HTMLTableDataCellElement>) => void)
  onCut?: ((event: ClipboardEvent<HTMLTableHeaderCellElement>) => void) & ((event: ClipboardEvent<HTMLTableDataCellElement>) => void)
  onCutCapture?: ((event: ClipboardEvent<HTMLTableHeaderCellElement>) => void) & ((event: ClipboardEvent<HTMLTableDataCellElement>) => void)
  onDoubleClick?: ((event: MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void) & ((event: MouseEvent<HTMLTableDataCellElement, MouseEvent>) => void)
  onDoubleClickCapture?: ((event: MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void) & ((event: MouseEvent<HTMLTableDataCellElement, MouseEvent>) => void)
  onDrag?: ((event: DragEvent<HTMLTableHeaderCellElement>) => void) & ((event: DragEvent<HTMLTableDataCellElement>) => void)
  onDragCapture?: ((event: DragEvent<HTMLTableHeaderCellElement>) => void) & ((event: DragEvent<HTMLTableDataCellElement>) => void)
  onDragEnd?: ((event: DragEvent<HTMLTableHeaderCellElement>) => void) & ((event: DragEvent<HTMLTableDataCellElement>) => void)
  onDragEndCapture?: ((event: DragEvent<HTMLTableHeaderCellElement>) => void) & ((event: DragEvent<HTMLTableDataCellElement>) => void)
  onDragEnter?: ((event: DragEvent<HTMLTableHeaderCellElement>) => void) & ((event: DragEvent<HTMLTableDataCellElement>) => void)
  onDragEnterCapture?: ((event: DragEvent<HTMLTableHeaderCellElement>) => void) & ((event: DragEvent<HTMLTableDataCellElement>) => void)
  onDragExit?: ((event: DragEvent<HTMLTableHeaderCellElement>) => void) & ((event: DragEvent<HTMLTableDataCellElement>) => void)
  onDragExitCapture?: ((event: DragEvent<HTMLTableHeaderCellElement>) => void) & ((event: DragEvent<HTMLTableDataCellElement>) => void)
  onDragLeave?: ((event: DragEvent<HTMLTableHeaderCellElement>) => void) & ((event: DragEvent<HTMLTableDataCellElement>) => void)
  onDragLeaveCapture?: ((event: DragEvent<HTMLTableHeaderCellElement>) => void) & ((event: DragEvent<HTMLTableDataCellElement>) => void)
  onDragOver?: ((event: DragEvent<HTMLTableHeaderCellElement>) => void) & ((event: DragEvent<HTMLTableDataCellElement>) => void)
  onDragOverCapture?: ((event: DragEvent<HTMLTableHeaderCellElement>) => void) & ((event: DragEvent<HTMLTableDataCellElement>) => void)
  onDragStart?: ((event: DragEvent<HTMLTableHeaderCellElement>) => void) & ((event: DragEvent<HTMLTableDataCellElement>) => void)
  onDragStartCapture?: ((event: DragEvent<HTMLTableHeaderCellElement>) => void) & ((event: DragEvent<HTMLTableDataCellElement>) => void)
  onDrop?: ((event: DragEvent<HTMLTableHeaderCellElement>) => void) & ((event: DragEvent<HTMLTableDataCellElement>) => void)
  onDropCapture?: ((event: DragEvent<HTMLTableHeaderCellElement>) => void) & ((event: DragEvent<HTMLTableDataCellElement>) => void)
  onDurationChange?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onDurationChangeCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onEmptied?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onEmptiedCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onEncrypted?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onEncryptedCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onEnded?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onEndedCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onError?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onErrorCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onFocus?: ((event: FocusEvent<HTMLTableHeaderCellElement>) => void) & ((event: FocusEvent<HTMLTableDataCellElement>) => void)
  onFocusCapture?: ((event: FocusEvent<HTMLTableHeaderCellElement>) => void) & ((event: FocusEvent<HTMLTableDataCellElement>) => void)
  onGotPointerCapture?: ((event: PointerEvent<HTMLTableHeaderCellElement>) => void) & ((event: PointerEvent<HTMLTableDataCellElement>) => void)
  onGotPointerCaptureCapture?: ((event: PointerEvent<HTMLTableHeaderCellElement>) => void) & ((event: PointerEvent<HTMLTableDataCellElement>) => void)
  onInput?: ((event: FormEvent<HTMLTableHeaderCellElement>) => void) & ((event: FormEvent<HTMLTableDataCellElement>) => void)
  onInputCapture?: ((event: FormEvent<HTMLTableHeaderCellElement>) => void) & ((event: FormEvent<HTMLTableDataCellElement>) => void)
  onInvalid?: ((event: FormEvent<HTMLTableHeaderCellElement>) => void) & ((event: FormEvent<HTMLTableDataCellElement>) => void)
  onInvalidCapture?: ((event: FormEvent<HTMLTableHeaderCellElement>) => void) & ((event: FormEvent<HTMLTableDataCellElement>) => void)
  onKeyDown?: ((event: KeyboardEvent<HTMLTableHeaderCellElement>) => void) & ((event: KeyboardEvent<HTMLTableDataCellElement>) => void)
  onKeyDownCapture?: ((event: KeyboardEvent<HTMLTableHeaderCellElement>) => void) & ((event: KeyboardEvent<HTMLTableDataCellElement>) => void)
  onKeyPress?: ((event: KeyboardEvent<HTMLTableHeaderCellElement>) => void) & ((event: KeyboardEvent<HTMLTableDataCellElement>) => void)
  onKeyPressCapture?: ((event: KeyboardEvent<HTMLTableHeaderCellElement>) => void) & ((event: KeyboardEvent<HTMLTableDataCellElement>) => void)
  onKeyUp?: ((event: KeyboardEvent<HTMLTableHeaderCellElement>) => void) & ((event: KeyboardEvent<HTMLTableDataCellElement>) => void)
  onKeyUpCapture?: ((event: KeyboardEvent<HTMLTableHeaderCellElement>) => void) & ((event: KeyboardEvent<HTMLTableDataCellElement>) => void)
  onLoad?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onLoadCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onLoadStart?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onLoadStartCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onLoadedData?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onLoadedDataCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onLoadedMetadata?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onLoadedMetadataCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onLostPointerCapture?: ((event: PointerEvent<HTMLTableHeaderCellElement>) => void) & ((event: PointerEvent<HTMLTableDataCellElement>) => void)
  onLostPointerCaptureCapture?: ((event: PointerEvent<HTMLTableHeaderCellElement>) => void) & ((event: PointerEvent<HTMLTableDataCellElement>) => void)
  onMouseDown?: ((event: MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void) & ((event: MouseEvent<HTMLTableDataCellElement, MouseEvent>) => void)
  onMouseDownCapture?: ((event: MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void) & ((event: MouseEvent<HTMLTableDataCellElement, MouseEvent>) => void)
  onMouseEnter?: ((event: MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void) & ((event: MouseEvent<HTMLTableDataCellElement, MouseEvent>) => void)
  onMouseLeave?: ((event: MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void) & ((event: MouseEvent<HTMLTableDataCellElement, MouseEvent>) => void)
  onMouseMove?: ((event: MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void) & ((event: MouseEvent<HTMLTableDataCellElement, MouseEvent>) => void)
  onMouseMoveCapture?: ((event: MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void) & ((event: MouseEvent<HTMLTableDataCellElement, MouseEvent>) => void)
  onMouseOut?: ((event: MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void) & ((event: MouseEvent<HTMLTableDataCellElement, MouseEvent>) => void)
  onMouseOutCapture?: ((event: MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void) & ((event: MouseEvent<HTMLTableDataCellElement, MouseEvent>) => void)
  onMouseOver?: ((event: MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void) & ((event: MouseEvent<HTMLTableDataCellElement, MouseEvent>) => void)
  onMouseOverCapture?: ((event: MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void) & ((event: MouseEvent<HTMLTableDataCellElement, MouseEvent>) => void)
  onMouseUp?: ((event: MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void) & ((event: MouseEvent<HTMLTableDataCellElement, MouseEvent>) => void)
  onMouseUpCapture?: ((event: MouseEvent<HTMLTableHeaderCellElement, MouseEvent>) => void) & ((event: MouseEvent<HTMLTableDataCellElement, MouseEvent>) => void)
  onPaste?: ((event: ClipboardEvent<HTMLTableHeaderCellElement>) => void) & ((event: ClipboardEvent<HTMLTableDataCellElement>) => void)
  onPasteCapture?: ((event: ClipboardEvent<HTMLTableHeaderCellElement>) => void) & ((event: ClipboardEvent<HTMLTableDataCellElement>) => void)
  onPause?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onPauseCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onPlay?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onPlayCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onPlaying?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onPlayingCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onPointerCancel?: ((event: PointerEvent<HTMLTableHeaderCellElement>) => void) & ((event: PointerEvent<HTMLTableDataCellElement>) => void)
  onPointerCancelCapture?: ((event: PointerEvent<HTMLTableHeaderCellElement>) => void) & ((event: PointerEvent<HTMLTableDataCellElement>) => void)
  onPointerDown?: ((event: PointerEvent<HTMLTableHeaderCellElement>) => void) & ((event: PointerEvent<HTMLTableDataCellElement>) => void)
  onPointerDownCapture?: ((event: PointerEvent<HTMLTableHeaderCellElement>) => void) & ((event: PointerEvent<HTMLTableDataCellElement>) => void)
  onPointerEnter?: ((event: PointerEvent<HTMLTableHeaderCellElement>) => void) & ((event: PointerEvent<HTMLTableDataCellElement>) => void)
  onPointerEnterCapture?: ((event: PointerEvent<HTMLTableHeaderCellElement>) => void) & ((event: PointerEvent<HTMLTableDataCellElement>) => void)
  onPointerLeave?: ((event: PointerEvent<HTMLTableHeaderCellElement>) => void) & ((event: PointerEvent<HTMLTableDataCellElement>) => void)
  onPointerLeaveCapture?: ((event: PointerEvent<HTMLTableHeaderCellElement>) => void) & ((event: PointerEvent<HTMLTableDataCellElement>) => void)
  onPointerMove?: ((event: PointerEvent<HTMLTableHeaderCellElement>) => void) & ((event: PointerEvent<HTMLTableDataCellElement>) => void)
  onPointerMoveCapture?: ((event: PointerEvent<HTMLTableHeaderCellElement>) => void) & ((event: PointerEvent<HTMLTableDataCellElement>) => void)
  onPointerOut?: ((event: PointerEvent<HTMLTableHeaderCellElement>) => void) & ((event: PointerEvent<HTMLTableDataCellElement>) => void)
  onPointerOutCapture?: ((event: PointerEvent<HTMLTableHeaderCellElement>) => void) & ((event: PointerEvent<HTMLTableDataCellElement>) => void)
  onPointerOver?: ((event: PointerEvent<HTMLTableHeaderCellElement>) => void) & ((event: PointerEvent<HTMLTableDataCellElement>) => void)
  onPointerOverCapture?: ((event: PointerEvent<HTMLTableHeaderCellElement>) => void) & ((event: PointerEvent<HTMLTableDataCellElement>) => void)
  onPointerUp?: ((event: PointerEvent<HTMLTableHeaderCellElement>) => void) & ((event: PointerEvent<HTMLTableDataCellElement>) => void)
  onPointerUpCapture?: ((event: PointerEvent<HTMLTableHeaderCellElement>) => void) & ((event: PointerEvent<HTMLTableDataCellElement>) => void)
  onProgress?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onProgressCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onRateChange?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onRateChangeCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onReset?: ((event: FormEvent<HTMLTableHeaderCellElement>) => void) & ((event: FormEvent<HTMLTableDataCellElement>) => void)
  onResetCapture?: ((event: FormEvent<HTMLTableHeaderCellElement>) => void) & ((event: FormEvent<HTMLTableDataCellElement>) => void)
  onScroll?: ((event: UIEvent<HTMLTableHeaderCellElement>) => void) & ((event: UIEvent<HTMLTableDataCellElement>) => void)
  onScrollCapture?: ((event: UIEvent<HTMLTableHeaderCellElement>) => void) & ((event: UIEvent<HTMLTableDataCellElement>) => void)
  onSeeked?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onSeekedCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onSeeking?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onSeekingCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onSelect?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onSelectCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onStalled?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onStalledCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onSubmit?: ((event: FormEvent<HTMLTableHeaderCellElement>) => void) & ((event: FormEvent<HTMLTableDataCellElement>) => void)
  onSubmitCapture?: ((event: FormEvent<HTMLTableHeaderCellElement>) => void) & ((event: FormEvent<HTMLTableDataCellElement>) => void)
  onSuspend?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onSuspendCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onTimeUpdate?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onTimeUpdateCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onTouchCancel?: ((event: TouchEvent<HTMLTableHeaderCellElement>) => void) & ((event: TouchEvent<HTMLTableDataCellElement>) => void)
  onTouchCancelCapture?: ((event: TouchEvent<HTMLTableHeaderCellElement>) => void) & ((event: TouchEvent<HTMLTableDataCellElement>) => void)
  onTouchEnd?: ((event: TouchEvent<HTMLTableHeaderCellElement>) => void) & ((event: TouchEvent<HTMLTableDataCellElement>) => void)
  onTouchEndCapture?: ((event: TouchEvent<HTMLTableHeaderCellElement>) => void) & ((event: TouchEvent<HTMLTableDataCellElement>) => void)
  onTouchMove?: ((event: TouchEvent<HTMLTableHeaderCellElement>) => void) & ((event: TouchEvent<HTMLTableDataCellElement>) => void)
  onTouchMoveCapture?: ((event: TouchEvent<HTMLTableHeaderCellElement>) => void) & ((event: TouchEvent<HTMLTableDataCellElement>) => void)
  onTouchStart?: ((event: TouchEvent<HTMLTableHeaderCellElement>) => void) & ((event: TouchEvent<HTMLTableDataCellElement>) => void)
  onTouchStartCapture?: ((event: TouchEvent<HTMLTableHeaderCellElement>) => void) & ((event: TouchEvent<HTMLTableDataCellElement>) => void)
  onTransitionEnd?: ((event: TransitionEvent<HTMLTableHeaderCellElement>) => void) & ((event: TransitionEvent<HTMLTableDataCellElement>) => void)
  onTransitionEndCapture?: ((event: TransitionEvent<HTMLTableHeaderCellElement>) => void) & ((event: TransitionEvent<HTMLTableDataCellElement>) => void)
  onVolumeChange?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onVolumeChangeCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onWaiting?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onWaitingCapture?: ((event: SyntheticEvent<HTMLTableHeaderCellElement, Event>) => void) & ((event: SyntheticEvent<HTMLTableDataCellElement, Event>) => void)
  onWheel?: ((event: WheelEvent<HTMLTableHeaderCellElement>) => void) & ((event: WheelEvent<HTMLTableDataCellElement>) => void)
  onWheelCapture?: ((event: WheelEvent<HTMLTableHeaderCellElement>) => void) & ((event: WheelEvent<HTMLTableDataCellElement>) => void)
  padding?: 
    | "checkbox"
    | "default"
    | "none"
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  resource?: string
  results?: number
  role?: string
  rowSpan?: number
  scope?: string
  security?: string
  size?: 
    | "medium"
    | "small"
  slot?: string
  sortDirection?: 
    | "asc"
    | "desc"
    | false
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  valign?: 
    | "baseline"
    | "bottom"
    | "middle"
    | "top"
  variant?: 
    | "body"
    | "footer"
    | "head"
  vocab?: string
}
`;

exports[`TableHead 1`] = `
{
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<"root", string>>
  color?: string
  component?: 
    | "abbr"
    | "address"
    | "article"
    | "aside"
    | "b"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "caption"
    | "cite"
    | "code"
    | "dd"
    | "del"
    | "details"
    | "dfn"
    | "div"
    | "dt"
    | "em"
    | "figcaption"
    | "figure"
    | "footer"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "i"
    | "kbd"
    | "keygen"
    | "main"
    | "mark"
    | "menu"
    | "menuitem"
    | "meter"
    | "nav"
    | "noindex"
    | "noscript"
    | "output"
    | "p"
    | "picture"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "section"
    | "small"
    | "span"
    | "strong"
    | "sub"
    | "summary"
    | "sup"
    | "tbody"
    | "tfoot"
    | "thead"
    | "time"
    | "u"
    | "var"
    | "wbr"
    | "webview"
    | ComponentClass<TableHeadBaseProps, any>
    | FunctionComponent<TableHeadBaseProps>
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  data-id: string
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  onAbort?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLTableSectionElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLTableSectionElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLTableSectionElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLTableSectionElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLTableSectionElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLTableSectionElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLTableSectionElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLTableSectionElement>) => void
  onBlur?: (event: FocusEvent<HTMLTableSectionElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLTableSectionElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onChange?: (event: FormEvent<HTMLTableSectionElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLTableSectionElement>) => void
  onClick?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLTableSectionElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLTableSectionElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLTableSectionElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLTableSectionElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLTableSectionElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLTableSectionElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLTableSectionElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLTableSectionElement>) => void
  onCut?: (event: ClipboardEvent<HTMLTableSectionElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLTableSectionElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragCapture?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragEnd?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragEnter?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragExit?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragLeave?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragOver?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragStart?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDrop?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDropCapture?: (event: DragEvent<HTMLTableSectionElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLTableSectionElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLTableSectionElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onInput?: (event: FormEvent<HTMLTableSectionElement>) => void
  onInputCapture?: (event: FormEvent<HTMLTableSectionElement>) => void
  onInvalid?: (event: FormEvent<HTMLTableSectionElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLTableSectionElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLTableSectionElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLTableSectionElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLTableSectionElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLTableSectionElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLTableSectionElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLTableSectionElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLTableSectionElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLTableSectionElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLTableSectionElement>) => void
  onPause?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLTableSectionElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onReset?: (event: FormEvent<HTMLTableSectionElement>) => void
  onResetCapture?: (event: FormEvent<HTMLTableSectionElement>) => void
  onScroll?: (event: UIEvent<HTMLTableSectionElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLTableSectionElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLTableSectionElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLTableSectionElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLTableSectionElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLTableSectionElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLTableSectionElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLTableSectionElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLTableSectionElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLTableSectionElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLTableSectionElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLTableSectionElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLTableSectionElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLTableSectionElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLTableSectionElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLTableSectionElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLTableSectionElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  resource?: string
  results?: number
  role?: string
  security?: string
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  vocab?: string
}
`;

exports[`TableRow 1`] = `
{
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<TableRowClassKey, string>>
  color?: string
  component?: 
    | "abbr"
    | "address"
    | "article"
    | "aside"
    | "b"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "caption"
    | "cite"
    | "code"
    | "dd"
    | "del"
    | "details"
    | "dfn"
    | "div"
    | "dt"
    | "em"
    | "figcaption"
    | "figure"
    | "footer"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "i"
    | "kbd"
    | "keygen"
    | "main"
    | "mark"
    | "menu"
    | "menuitem"
    | "meter"
    | "nav"
    | "noindex"
    | "noscript"
    | "output"
    | "p"
    | "picture"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "section"
    | "small"
    | "span"
    | "strong"
    | "sub"
    | "summary"
    | "sup"
    | "time"
    | "tr"
    | "u"
    | "var"
    | "wbr"
    | "webview"
    | ComponentClass<TableRowBaseProps, any>
    | FunctionComponent<TableRowBaseProps>
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  data-id: string
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  hidden?: boolean
  hover?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  onAbort?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLTableRowElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLTableRowElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLTableRowElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLTableRowElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLTableRowElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLTableRowElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLTableRowElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLTableRowElement>) => void
  onBlur?: (event: FocusEvent<HTMLTableRowElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLTableRowElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onChange?: (event: FormEvent<HTMLTableRowElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLTableRowElement>) => void
  onClick?: (event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLTableRowElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLTableRowElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLTableRowElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLTableRowElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLTableRowElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLTableRowElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLTableRowElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLTableRowElement>) => void
  onCut?: (event: ClipboardEvent<HTMLTableRowElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLTableRowElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLTableRowElement>) => void
  onDragCapture?: (event: DragEvent<HTMLTableRowElement>) => void
  onDragEnd?: (event: DragEvent<HTMLTableRowElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLTableRowElement>) => void
  onDragEnter?: (event: DragEvent<HTMLTableRowElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLTableRowElement>) => void
  onDragExit?: (event: DragEvent<HTMLTableRowElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLTableRowElement>) => void
  onDragLeave?: (event: DragEvent<HTMLTableRowElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLTableRowElement>) => void
  onDragOver?: (event: DragEvent<HTMLTableRowElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLTableRowElement>) => void
  onDragStart?: (event: DragEvent<HTMLTableRowElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLTableRowElement>) => void
  onDrop?: (event: DragEvent<HTMLTableRowElement>) => void
  onDropCapture?: (event: DragEvent<HTMLTableRowElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLTableRowElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLTableRowElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLTableRowElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLTableRowElement>) => void
  onInput?: (event: FormEvent<HTMLTableRowElement>) => void
  onInputCapture?: (event: FormEvent<HTMLTableRowElement>) => void
  onInvalid?: (event: FormEvent<HTMLTableRowElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLTableRowElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLTableRowElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLTableRowElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLTableRowElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLTableRowElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLTableRowElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLTableRowElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLTableRowElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLTableRowElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLTableRowElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLTableRowElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLTableRowElement>) => void
  onPause?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLTableRowElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLTableRowElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLTableRowElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLTableRowElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLTableRowElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLTableRowElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLTableRowElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLTableRowElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLTableRowElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLTableRowElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLTableRowElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLTableRowElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLTableRowElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLTableRowElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLTableRowElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLTableRowElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onReset?: (event: FormEvent<HTMLTableRowElement>) => void
  onResetCapture?: (event: FormEvent<HTMLTableRowElement>) => void
  onScroll?: (event: UIEvent<HTMLTableRowElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLTableRowElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLTableRowElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLTableRowElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLTableRowElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLTableRowElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLTableRowElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLTableRowElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLTableRowElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLTableRowElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLTableRowElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLTableRowElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLTableRowElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLTableRowElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLTableRowElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLTableRowElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLTableRowElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  resource?: string
  results?: number
  role?: string
  security?: string
  selected?: boolean
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  striped?: boolean
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  vocab?: string
}
`;

exports[`Tabs 1`] = `
{
  ScrollButtonComponent?: 
    | "a"
    | "abbr"
    | "address"
    | "animate"
    | "animateMotion"
    | "animateTransform"
    | "area"
    | "article"
    | "aside"
    | "audio"
    | "b"
    | "base"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "body"
    | "br"
    | "button"
    | "canvas"
    | "caption"
    | "circle"
    | "cite"
    | "clipPath"
    | "code"
    | "col"
    | "colgroup"
    | "data"
    | "datalist"
    | "dd"
    | "defs"
    | "del"
    | "desc"
    | "details"
    | "dfn"
    | "dialog"
    | "div"
    | "dl"
    | "dt"
    | "ellipse"
    | "em"
    | "embed"
    | "feBlend"
    | "feColorMatrix"
    | "feComponentTransfer"
    | "feComposite"
    | "feConvolveMatrix"
    | "feDiffuseLighting"
    | "feDisplacementMap"
    | "feDistantLight"
    | "feDropShadow"
    | "feFlood"
    | "feFuncA"
    | "feFuncB"
    | "feFuncG"
    | "feFuncR"
    | "feGaussianBlur"
    | "feImage"
    | "feMerge"
    | "feMergeNode"
    | "feMorphology"
    | "feOffset"
    | "fePointLight"
    | "feSpecularLighting"
    | "feSpotLight"
    | "feTile"
    | "feTurbulence"
    | "fieldset"
    | "figcaption"
    | "figure"
    | "filter"
    | "footer"
    | "foreignObject"
    | "form"
    | "g"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "hr"
    | "html"
    | "i"
    | "iframe"
    | "image"
    | "img"
    | "input"
    | "ins"
    | "kbd"
    | "keygen"
    | "label"
    | "legend"
    | "li"
    | "line"
    | "linearGradient"
    | "link"
    | "main"
    | "map"
    | "mark"
    | "marker"
    | "mask"
    | "menu"
    | "menuitem"
    | "meta"
    | "metadata"
    | "meter"
    | "mpath"
    | "nav"
    | "noindex"
    | "noscript"
    | "object"
    | "ol"
    | "optgroup"
    | "option"
    | "output"
    | "p"
    | "param"
    | "path"
    | "pattern"
    | "picture"
    | "polygon"
    | "polyline"
    | "pre"
    | "progress"
    | "q"
    | "radialGradient"
    | "rect"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "script"
    | "section"
    | "select"
    | "small"
    | "source"
    | "span"
    | "stop"
    | "strong"
    | "style"
    | "sub"
    | "summary"
    | "sup"
    | "svg"
    | "switch"
    | "symbol"
    | "table"
    | "tbody"
    | "td"
    | "template"
    | "text"
    | "textPath"
    | "textarea"
    | "tfoot"
    | "th"
    | "thead"
    | "time"
    | "title"
    | "tr"
    | "track"
    | "tspan"
    | "u"
    | "ul"
    | "use"
    | "var"
    | "video"
    | "view"
    | "wbr"
    | "webview"
    | ComponentClass<any, any>
    | FunctionComponent<any>
  TabIndicatorProps?: Partial<HTMLAttributes<HTMLDivElement>>
  TouchRippleProps?: Partial<TouchRippleProps>
  about?: string
  accessKey?: string
  action?: 
    | ((instance: TabsActions | null) => void) & ((instance: ButtonBaseActions | null) => void)
    | ((instance: TabsActions | null) => void) & RefObject<ButtonBaseActions>
    | RefObject<TabsActions> & ((instance: ButtonBaseActions | null) => void)
    | RefObject<TabsActions> & RefObject<ButtonBaseActions>
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoFocus?: boolean
  autoSave?: string
  buttonRef?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  centerRipple?: boolean
  centered?: boolean
  children?: ReactNode
  className?: string
  classes?: Partial<Record<TabsClassKey, string>>
  color?: string
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  disableRipple?: boolean
  disableTouchRipple?: boolean
  disabled?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  focusRipple?: boolean
  focusVisibleClassName?: string
  form?: string
  formAction?: string
  formEncType?: string
  formMethod?: string
  formNoValidate?: boolean
  formTarget?: string
  hidden?: boolean
  id?: string
  indicatorColor?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  name?: string
  onAbort?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLButtonElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onBlur?: (event: FocusEvent<HTMLButtonElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLButtonElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onChange?: ((event: ChangeEvent<{}>, value: any) => void) & ((event: FormEvent<HTMLButtonElement>) => void)
  onChangeCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLButtonElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onCut?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLButtonElement>) => void
  onDragCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragEnd?: (event: DragEvent<HTMLButtonElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragEnter?: (event: DragEvent<HTMLButtonElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragExit?: (event: DragEvent<HTMLButtonElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragLeave?: (event: DragEvent<HTMLButtonElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragOver?: (event: DragEvent<HTMLButtonElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragStart?: (event: DragEvent<HTMLButtonElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDrop?: (event: DragEvent<HTMLButtonElement>) => void
  onDropCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLButtonElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLButtonElement>) => void
  onFocusVisible?: (event: FocusEvent<any>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onInput?: (event: FormEvent<HTMLButtonElement>) => void
  onInputCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onInvalid?: (event: FormEvent<HTMLButtonElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onPause?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onReset?: (event: FormEvent<HTMLButtonElement>) => void
  onResetCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onScroll?: (event: UIEvent<HTMLButtonElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLButtonElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLButtonElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLButtonElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLButtonElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLButtonElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLButtonElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLButtonElement>) => void
  orientation?: 
    | "horizontal"
    | "vertical"
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: HTMLButtonElement | null) => void
    | RefObject<HTMLButtonElement>
  resource?: string
  results?: number
  role?: string
  scrollButtons?: 
    | "auto"
    | "desktop"
    | "off"
    | "on"
  security?: string
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  textColor?: string
  title?: string
  translate?: 
    | "no"
    | "yes"
  type?: 
    | "button"
    | "reset"
    | "submit"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  value: any
  variant?: 
    | "fullWidth"
    | "scrollable"
    | "standard"
  vocab?: string
  width?: string
}
`;

exports[`Text 1`] = `
{
  baseline?: boolean
  children?: ReactNode
  className?: string
  color?: 
    | "blue"
    | "green"
    | "grey"
    | "grey16"
    | "grey24"
    | "grey4"
    | "grey48"
    | "grey56"
    | "grey8"
    | "grey80"
    | "lightBlue"
    | "lightGreen"
    | "lightGrey"
    | "lightOrange"
    | "orange"
    | "purple"
    | "red"
    | "redPink"
    | "transparent"
    | "white"
  component?: 
    | "a"
    | "abbr"
    | "address"
    | "animate"
    | "animateMotion"
    | "animateTransform"
    | "area"
    | "article"
    | "aside"
    | "audio"
    | "b"
    | "base"
    | "bdi"
    | "bdo"
    | "big"
    | "blockquote"
    | "body"
    | "br"
    | "button"
    | "canvas"
    | "caption"
    | "circle"
    | "cite"
    | "clipPath"
    | "code"
    | "col"
    | "colgroup"
    | "data"
    | "datalist"
    | "dd"
    | "defs"
    | "del"
    | "desc"
    | "details"
    | "dfn"
    | "dialog"
    | "div"
    | "dl"
    | "dt"
    | "ellipse"
    | "em"
    | "embed"
    | "feBlend"
    | "feColorMatrix"
    | "feComponentTransfer"
    | "feComposite"
    | "feConvolveMatrix"
    | "feDiffuseLighting"
    | "feDisplacementMap"
    | "feDistantLight"
    | "feDropShadow"
    | "feFlood"
    | "feFuncA"
    | "feFuncB"
    | "feFuncG"
    | "feFuncR"
    | "feGaussianBlur"
    | "feImage"
    | "feMerge"
    | "feMergeNode"
    | "feMorphology"
    | "feOffset"
    | "fePointLight"
    | "feSpecularLighting"
    | "feSpotLight"
    | "feTile"
    | "feTurbulence"
    | "fieldset"
    | "figcaption"
    | "figure"
    | "filter"
    | "footer"
    | "foreignObject"
    | "form"
    | "g"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "head"
    | "header"
    | "hgroup"
    | "hr"
    | "html"
    | "i"
    | "iframe"
    | "image"
    | "img"
    | "input"
    | "ins"
    | "kbd"
    | "keygen"
    | "label"
    | "legend"
    | "li"
    | "line"
    | "linearGradient"
    | "link"
    | "main"
    | "map"
    | "mark"
    | "marker"
    | "mask"
    | "menu"
    | "menuitem"
    | "meta"
    | "metadata"
    | "meter"
    | "mpath"
    | "nav"
    | "noindex"
    | "noscript"
    | "object"
    | "ol"
    | "optgroup"
    | "option"
    | "output"
    | "p"
    | "param"
    | "path"
    | "pattern"
    | "picture"
    | "polygon"
    | "polyline"
    | "pre"
    | "progress"
    | "q"
    | "radialGradient"
    | "rect"
    | "rp"
    | "rt"
    | "ruby"
    | "s"
    | "samp"
    | "script"
    | "section"
    | "select"
    | "small"
    | "source"
    | "span"
    | "stop"
    | "strong"
    | "style"
    | "sub"
    | "summary"
    | "sup"
    | "svg"
    | "switch"
    | "symbol"
    | "table"
    | "tbody"
    | "td"
    | "template"
    | "text"
    | "textPath"
    | "textarea"
    | "tfoot"
    | "th"
    | "thead"
    | "time"
    | "title"
    | "tr"
    | "track"
    | "tspan"
    | "u"
    | "ul"
    | "use"
    | "var"
    | "video"
    | "view"
    | "wbr"
    | "webview"
    | ComponentClass<any, any>
    | FunctionComponent<any>
  size?: 
    | "large"
    | "medium"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
    | "xxxsmall"
  weight?: 
    | "medium"
    | "regular"
}
`;

exports[`TextField 1`] = `
{
  FormHelperTextProps?: Partial<FormHelperTextProps>
  InputLabelProps?: Partial<InputLabelProps>
  InputProps?: Partial<InputProps>
  SelectProps?: Partial<SelectProps>
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoComplete?: string
  autoCorrect?: string
  autoFocus?: boolean
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<"root", string>>
  color?: 
    | "primary"
    | "secondary"
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  data-id: string
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: unknown
  dir?: string
  disabled?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  error?: boolean
  fullWidth?: boolean
  helperText?: ReactNode
  hidden?: boolean
  hiddenLabel?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  inputProps?: {
    about?: string
    accessKey?: string
    aria-activedescendant?: string
    aria-atomic?: 
      | "false"
      | "true"
      | false
      | true
    aria-autocomplete?: 
      | "both"
      | "inline"
      | "list"
      | "none"
    aria-busy?: 
      | "false"
      | "true"
      | false
      | true
    aria-checked?: 
      | "false"
      | "mixed"
      | "true"
      | false
      | true
    aria-colcount?: number
    aria-colindex?: number
    aria-colspan?: number
    aria-controls?: string
    aria-current?: 
      | "date"
      | "false"
      | "location"
      | "page"
      | "step"
      | "time"
      | "true"
      | false
      | true
    aria-describedby?: string
    aria-details?: string
    aria-disabled?: 
      | "false"
      | "true"
      | false
      | true
    aria-dropeffect?: 
      | "copy"
      | "execute"
      | "link"
      | "move"
      | "none"
      | "popup"
    aria-errormessage?: string
    aria-expanded?: 
      | "false"
      | "true"
      | false
      | true
    aria-flowto?: string
    aria-grabbed?: 
      | "false"
      | "true"
      | false
      | true
    aria-haspopup?: 
      | "dialog"
      | "false"
      | "grid"
      | "listbox"
      | "menu"
      | "tree"
      | "true"
      | false
      | true
    aria-hidden?: 
      | "false"
      | "true"
      | false
      | true
    aria-invalid?: 
      | "false"
      | "grammar"
      | "spelling"
      | "true"
      | false
      | true
    aria-keyshortcuts?: string
    aria-label?: string
    aria-labelledby?: string
    aria-level?: number
    aria-live?: 
      | "assertive"
      | "off"
      | "polite"
    aria-modal?: 
      | "false"
      | "true"
      | false
      | true
    aria-multiline?: 
      | "false"
      | "true"
      | false
      | true
    aria-multiselectable?: 
      | "false"
      | "true"
      | false
      | true
    aria-orientation?: 
      | "horizontal"
      | "vertical"
    aria-owns?: string
    aria-placeholder?: string
    aria-posinset?: number
    aria-pressed?: 
      | "false"
      | "mixed"
      | "true"
      | false
      | true
    aria-readonly?: 
      | "false"
      | "true"
      | false
      | true
    aria-relevant?: 
      | "additions text"
      | "additions"
      | "all"
      | "removals"
      | "text"
    aria-required?: 
      | "false"
      | "true"
      | false
      | true
    aria-roledescription?: string
    aria-rowcount?: number
    aria-rowindex?: number
    aria-rowspan?: number
    aria-selected?: 
      | "false"
      | "true"
      | false
      | true
    aria-setsize?: number
    aria-sort?: 
      | "ascending"
      | "descending"
      | "none"
      | "other"
    aria-valuemax?: number
    aria-valuemin?: number
    aria-valuenow?: number
    aria-valuetext?: string
    autoCapitalize?: string
    autoCorrect?: string
    autoSave?: string
    children?: ReactNode
    className?: string
    color?: string
    contentEditable?: 
      | "false"
      | "inherit"
      | "true"
      | false
      | true
    contextMenu?: string
    dangerouslySetInnerHTML?: { __html: string; }
    datatype?: string
    defaultChecked?: boolean
    defaultValue?: 
      | number
      | string
      | string[]
    dir?: string
    draggable?: 
      | "false"
      | "true"
      | false
      | true
    hidden?: boolean
    id?: string
    inlist?: any
    inputMode?: 
      | "decimal"
      | "email"
      | "none"
      | "numeric"
      | "search"
      | "tel"
      | "text"
      | "url"
    is?: string
    itemID?: string
    itemProp?: string
    itemRef?: string
    itemScope?: boolean
    itemType?: string
    lang?: string
    onAbort?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onAbortCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onAnimationEnd?: (event: AnimationEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onAnimationEndCapture?: (event: AnimationEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onAnimationIteration?: (event: AnimationEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onAnimationIterationCapture?: (event: AnimationEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onAnimationStart?: (event: AnimationEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onAnimationStartCapture?: (event: AnimationEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onAuxClick?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onAuxClickCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onBeforeInput?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onBeforeInputCapture?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onBlur?: (event: FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onBlurCapture?: (event: FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCanPlay?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onCanPlayCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onCanPlayThrough?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onChange?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onChangeCapture?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onClick?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onClickCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onCompositionEnd?: (event: CompositionEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCompositionEndCapture?: (event: CompositionEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCompositionStart?: (event: CompositionEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCompositionStartCapture?: (event: CompositionEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCompositionUpdate?: (event: CompositionEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCompositionUpdateCapture?: (event: CompositionEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onContextMenu?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onContextMenuCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onCopy?: (event: ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCopyCapture?: (event: ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCut?: (event: ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onCutCapture?: (event: ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDoubleClick?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onDoubleClickCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onDrag?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragCapture?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragEnd?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragEndCapture?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragEnter?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragEnterCapture?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragExit?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragExitCapture?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragLeave?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragLeaveCapture?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragOver?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragOverCapture?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragStart?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDragStartCapture?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDrop?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDropCapture?: (event: DragEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onDurationChange?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onDurationChangeCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onEmptied?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onEmptiedCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onEncrypted?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onEncryptedCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onEnded?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onEndedCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onError?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onErrorCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onFocus?: (event: FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onFocusCapture?: (event: FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onGotPointerCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onGotPointerCaptureCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onInput?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onInputCapture?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onInvalid?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onInvalidCapture?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onKeyDown?: (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onKeyDownCapture?: (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onKeyPress?: (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onKeyPressCapture?: (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onKeyUp?: (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onKeyUpCapture?: (event: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onLoad?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onLoadCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onLoadStart?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onLoadStartCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onLoadedData?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onLoadedDataCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onLoadedMetadata?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onLostPointerCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onLostPointerCaptureCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onMouseDown?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseDownCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseEnter?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseLeave?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseMove?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseMoveCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseOut?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseOutCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseOver?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseOverCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseUp?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onMouseUpCapture?: (event: MouseEvent<HTMLInputElement | HTMLTextAreaElement, MouseEvent>) => void
    onPaste?: (event: ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPasteCapture?: (event: ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPause?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onPauseCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onPlay?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onPlayCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onPlaying?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onPlayingCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onPointerCancel?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerCancelCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerDown?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerDownCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerEnter?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerEnterCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerLeave?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerLeaveCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerMove?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerMoveCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerOut?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerOutCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerOver?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerOverCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerUp?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onPointerUpCapture?: (event: PointerEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onProgress?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onProgressCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onRateChange?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onRateChangeCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onReset?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onResetCapture?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onScroll?: (event: UIEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onScrollCapture?: (event: UIEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onSeeked?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onSeekedCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onSeeking?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onSeekingCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onSelect?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onSelectCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onStalled?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onStalledCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onSubmit?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onSubmitCapture?: (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onSuspend?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onSuspendCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onTimeUpdate?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onTimeUpdateCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onTouchCancel?: (event: TouchEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTouchCancelCapture?: (event: TouchEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTouchEnd?: (event: TouchEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTouchEndCapture?: (event: TouchEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTouchMove?: (event: TouchEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTouchMoveCapture?: (event: TouchEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTouchStart?: (event: TouchEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTouchStartCapture?: (event: TouchEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTransitionEnd?: (event: TransitionEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onTransitionEndCapture?: (event: TransitionEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onVolumeChange?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onVolumeChangeCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onWaiting?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onWaitingCapture?: (event: SyntheticEvent<HTMLInputElement | HTMLTextAreaElement, Event>) => void
    onWheel?: (event: WheelEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    onWheelCapture?: (event: WheelEvent<HTMLInputElement | HTMLTextAreaElement>) => void
    placeholder?: string
    prefix?: string
    property?: string
    radioGroup?: string
    resource?: string
    results?: number
    role?: string
    security?: string
    slot?: string
    spellCheck?: 
      | "false"
      | "true"
      | false
      | true
    style?: CSSProperties
    suppressContentEditableWarning?: boolean
    suppressHydrationWarning?: boolean
    tabIndex?: number
    title?: string
    translate?: 
      | "no"
      | "yes"
    typeof?: string
    unselectable?: 
      | "off"
      | "on"
    vocab?: string
  }
  inputRef?: 
    | (instance: any) => void
    | RefObject<any>
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  label?: ReactNode
  lang?: string
  margin?: 
    | "dense"
    | "none"
    | "normal"
  multiline?: boolean
  name?: string
  onAbort?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLDivElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onBlur?: (event: FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onChange?: (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLDivElement>) => void
  onClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCut?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLDivElement>) => void
  onDragCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnd?: (event: DragEvent<HTMLDivElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnter?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragExit?: (event: DragEvent<HTMLDivElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeave?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragOver?: (event: DragEvent<HTMLDivElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragStart?: (event: DragEvent<HTMLDivElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDrop?: (event: DragEvent<HTMLDivElement>) => void
  onDropCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onInput?: (event: FormEvent<HTMLDivElement>) => void
  onInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onInvalid?: (event: FormEvent<HTMLDivElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLDivElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPause?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onReset?: (event: FormEvent<HTMLDivElement>) => void
  onResetCapture?: (event: FormEvent<HTMLDivElement>) => void
  onScroll?: (event: UIEvent<HTMLDivElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLDivElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLDivElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLDivElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLDivElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLDivElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLDivElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLDivElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: HTMLDivElement | null) => void
    | RefObject<HTMLDivElement>
  required?: boolean
  resource?: string
  results?: number
  role?: string
  rows?: 
    | number
    | string
  rowsMax?: 
    | number
    | string
  security?: string
  select?: boolean
  size?: 
    | "medium"
    | "small"
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  type?: string
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  value?: unknown
  variant?: "standard"
  vocab?: string
}
`;

exports[`ThemeProvider 1`] = `
{
  children: ReactNode
  theme: 
    | (outerTheme: DefaultTheme) => DefaultTheme
    | Partial<DefaultTheme>
}
`;

exports[`ToggleButton 1`] = `
{
  TouchRippleProps?: Partial<TouchRippleProps>
  about?: string
  accessKey?: string
  action?: 
    | (instance: ButtonBaseActions | null) => void
    | RefObject<ButtonBaseActions>
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoFocus?: boolean
  autoSave?: string
  buttonRef?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  centerRipple?: boolean
  children?: ReactNode
  className?: string
  classes?: Partial<Record<ToggleButtonClassKey, string>>
  color?: string
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  disableFocusRipple?: boolean
  disableRipple?: boolean
  disableTouchRipple?: boolean
  disabled?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  focusRipple?: boolean
  focusVisibleClassName?: string
  form?: string
  formAction?: string
  formEncType?: string
  formMethod?: string
  formNoValidate?: boolean
  formTarget?: string
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  name?: string
  onAbort?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLButtonElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLButtonElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onBlur?: (event: FocusEvent<HTMLButtonElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLButtonElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onChange?: (event: FormEvent<HTMLButtonElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLButtonElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLButtonElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onCut?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLButtonElement>) => void
  onDragCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragEnd?: (event: DragEvent<HTMLButtonElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragEnter?: (event: DragEvent<HTMLButtonElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragExit?: (event: DragEvent<HTMLButtonElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragLeave?: (event: DragEvent<HTMLButtonElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragOver?: (event: DragEvent<HTMLButtonElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDragStart?: (event: DragEvent<HTMLButtonElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDrop?: (event: DragEvent<HTMLButtonElement>) => void
  onDropCapture?: (event: DragEvent<HTMLButtonElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLButtonElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLButtonElement>) => void
  onFocusVisible?: (event: FocusEvent<any>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onInput?: (event: FormEvent<HTMLButtonElement>) => void
  onInputCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onInvalid?: (event: FormEvent<HTMLButtonElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLButtonElement>) => void
  onPause?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLButtonElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLButtonElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onReset?: (event: FormEvent<HTMLButtonElement>) => void
  onResetCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onScroll?: (event: UIEvent<HTMLButtonElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLButtonElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLButtonElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLButtonElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLButtonElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLButtonElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLButtonElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLButtonElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLButtonElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLButtonElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLButtonElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: HTMLButtonElement | null) => void
    | RefObject<HTMLButtonElement>
  resource?: string
  results?: number
  role?: string
  security?: string
  selected?: boolean
  size?: 
    | "large"
    | "medium"
    | "small"
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  type?: 
    | "button"
    | "reset"
    | "submit"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  value?: any
  vocab?: string
}
`;

exports[`ToggleButtonGroup 1`] = `
{
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<ToggleButtonGroupClassKey, string>>
  color?: string
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  exclusive?: boolean
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  onAbort?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLDivElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onBlur?: (event: FocusEvent<HTMLDivElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onChange?: (event: MouseEvent<HTMLElement, MouseEvent>, value: any) => void
  onChangeCapture?: (event: FormEvent<HTMLDivElement>) => void
  onClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCut?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLDivElement>) => void
  onDragCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnd?: (event: DragEvent<HTMLDivElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnter?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragExit?: (event: DragEvent<HTMLDivElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeave?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragOver?: (event: DragEvent<HTMLDivElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragStart?: (event: DragEvent<HTMLDivElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDrop?: (event: DragEvent<HTMLDivElement>) => void
  onDropCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLDivElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onInput?: (event: FormEvent<HTMLDivElement>) => void
  onInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onInvalid?: (event: FormEvent<HTMLDivElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLDivElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPause?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onReset?: (event: FormEvent<HTMLDivElement>) => void
  onResetCapture?: (event: FormEvent<HTMLDivElement>) => void
  onScroll?: (event: UIEvent<HTMLDivElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLDivElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLDivElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLDivElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLDivElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLDivElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLDivElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLDivElement>) => void
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  resource?: string
  results?: number
  role?: string
  security?: string
  size?: 
    | "large"
    | "medium"
    | "small"
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  value?: any
  vocab?: string
}
`;

exports[`Tooltip 1`] = `
{
  PopperProps?: Partial<PopperProps>
  TransitionComponent?: 
    | ComponentClass<TransitionProps, any>
    | FunctionComponent<TransitionProps>
  TransitionProps?: {
    addEndListener?: EndHandler
    appear?: boolean
    enter?: boolean
    exit?: boolean
    in?: boolean
    mountOnEnter?: boolean
    onEnter?: EnterHandler
    onEntered?: EnterHandler
    onEntering?: EnterHandler
    onExit?: ExitHandler
    onExited?: ExitHandler
    onExiting?: ExitHandler
    style?: CSSProperties
    timeout?: 
      | number
      | { appear?: number | undefined; enter?: number | undefined; exit?: number | undefined; }
    unmountOnExit?: boolean
  }
  about?: string
  accessKey?: string
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  arrow?: boolean
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children: ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>
  className?: string
  classes?: Partial<Record<TooltipClassKey, string>>
  color?: string
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  disableFocusListener?: boolean
  disableHoverListener?: boolean
  disableTouchListener?: boolean
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  enterDelay?: number
  enterTouchDelay?: number
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  interactive?: boolean
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  leaveDelay?: number
  leaveTouchDelay?: number
  onAbort?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLDivElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLDivElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLDivElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onBlur?: (event: FocusEvent<HTMLDivElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onChange?: (event: FormEvent<HTMLDivElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLDivElement>) => void
  onClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onClose?: (event: ChangeEvent<{}>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLDivElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLDivElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCut?: (event: ClipboardEvent<HTMLDivElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLDivElement>) => void
  onDragCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnd?: (event: DragEvent<HTMLDivElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnter?: (event: DragEvent<HTMLDivElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragExit?: (event: DragEvent<HTMLDivElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeave?: (event: DragEvent<HTMLDivElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragOver?: (event: DragEvent<HTMLDivElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDragStart?: (event: DragEvent<HTMLDivElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDrop?: (event: DragEvent<HTMLDivElement>) => void
  onDropCapture?: (event: DragEvent<HTMLDivElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLDivElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLDivElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onInput?: (event: FormEvent<HTMLDivElement>) => void
  onInputCapture?: (event: FormEvent<HTMLDivElement>) => void
  onInvalid?: (event: FormEvent<HTMLDivElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLDivElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLDivElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLDivElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLDivElement, MouseEvent>) => void
  onOpen?: (event: ChangeEvent<{}>) => void
  onPaste?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLDivElement>) => void
  onPause?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLDivElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLDivElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onReset?: (event: FormEvent<HTMLDivElement>) => void
  onResetCapture?: (event: FormEvent<HTMLDivElement>) => void
  onScroll?: (event: UIEvent<HTMLDivElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLDivElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLDivElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLDivElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLDivElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLDivElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLDivElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLDivElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLDivElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLDivElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLDivElement>) => void
  open?: boolean
  placeholder?: string
  placement?: 
    | "bottom"
    | "bottom-end"
    | "bottom-start"
    | "left"
    | "left-end"
    | "left-start"
    | "right"
    | "right-end"
    | "right-start"
    | "top"
    | "top-end"
    | "top-start"
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  resource?: string
  results?: number
  role?: string
  security?: string
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title: ReactNode
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  vocab?: string
}
`;

exports[`Typography 1`] = `
{
  about?: string
  accessKey?: string
  align?: 
    | "center"
    | "inherit"
    | "justify"
    | "left"
    | "right"
  aria-activedescendant?: string
  aria-atomic?: 
    | "false"
    | "true"
    | false
    | true
  aria-autocomplete?: 
    | "both"
    | "inline"
    | "list"
    | "none"
  aria-busy?: 
    | "false"
    | "true"
    | false
    | true
  aria-checked?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-colcount?: number
  aria-colindex?: number
  aria-colspan?: number
  aria-controls?: string
  aria-current?: 
    | "date"
    | "false"
    | "location"
    | "page"
    | "step"
    | "time"
    | "true"
    | false
    | true
  aria-describedby?: string
  aria-details?: string
  aria-disabled?: 
    | "false"
    | "true"
    | false
    | true
  aria-dropeffect?: 
    | "copy"
    | "execute"
    | "link"
    | "move"
    | "none"
    | "popup"
  aria-errormessage?: string
  aria-expanded?: 
    | "false"
    | "true"
    | false
    | true
  aria-flowto?: string
  aria-grabbed?: 
    | "false"
    | "true"
    | false
    | true
  aria-haspopup?: 
    | "dialog"
    | "false"
    | "grid"
    | "listbox"
    | "menu"
    | "tree"
    | "true"
    | false
    | true
  aria-hidden?: 
    | "false"
    | "true"
    | false
    | true
  aria-invalid?: 
    | "false"
    | "grammar"
    | "spelling"
    | "true"
    | false
    | true
  aria-keyshortcuts?: string
  aria-label?: string
  aria-labelledby?: string
  aria-level?: number
  aria-live?: 
    | "assertive"
    | "off"
    | "polite"
  aria-modal?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiline?: 
    | "false"
    | "true"
    | false
    | true
  aria-multiselectable?: 
    | "false"
    | "true"
    | false
    | true
  aria-orientation?: 
    | "horizontal"
    | "vertical"
  aria-owns?: string
  aria-placeholder?: string
  aria-posinset?: number
  aria-pressed?: 
    | "false"
    | "mixed"
    | "true"
    | false
    | true
  aria-readonly?: 
    | "false"
    | "true"
    | false
    | true
  aria-relevant?: 
    | "additions text"
    | "additions"
    | "all"
    | "removals"
    | "text"
  aria-required?: 
    | "false"
    | "true"
    | false
    | true
  aria-roledescription?: string
  aria-rowcount?: number
  aria-rowindex?: number
  aria-rowspan?: number
  aria-selected?: 
    | "false"
    | "true"
    | false
    | true
  aria-setsize?: number
  aria-sort?: 
    | "ascending"
    | "descending"
    | "none"
    | "other"
  aria-valuemax?: number
  aria-valuemin?: number
  aria-valuenow?: number
  aria-valuetext?: string
  autoCapitalize?: string
  autoCorrect?: string
  autoSave?: string
  children?: ReactNode
  className?: string
  classes?: Partial<Record<TypographyClassKey, string>>
  color?: 
    | "error"
    | "inherit"
    | "initial"
    | "primary"
    | "secondary"
    | "textPrimary"
    | "textSecondary"
  contentEditable?: 
    | "false"
    | "inherit"
    | "true"
    | false
    | true
  contextMenu?: string
  dangerouslySetInnerHTML?: { __html: string; }
  data-id?: string
  datatype?: string
  defaultChecked?: boolean
  defaultValue?: 
    | number
    | string
    | string[]
  dir?: string
  display?: 
    | "block"
    | "initial"
    | "inline"
  draggable?: 
    | "false"
    | "true"
    | false
    | true
  gutterBottom?: boolean
  hidden?: boolean
  id?: string
  inlist?: any
  innerRef?: 
    | (instance: any) => void
    | RefObject<any>
  inputMode?: 
    | "decimal"
    | "email"
    | "none"
    | "numeric"
    | "search"
    | "tel"
    | "text"
    | "url"
  is?: string
  itemID?: string
  itemProp?: string
  itemRef?: string
  itemScope?: boolean
  itemType?: string
  lang?: string
  noWrap?: boolean
  onAbort?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onAbortCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onAnimationEnd?: (event: AnimationEvent<HTMLSpanElement>) => void
  onAnimationEndCapture?: (event: AnimationEvent<HTMLSpanElement>) => void
  onAnimationIteration?: (event: AnimationEvent<HTMLSpanElement>) => void
  onAnimationIterationCapture?: (event: AnimationEvent<HTMLSpanElement>) => void
  onAnimationStart?: (event: AnimationEvent<HTMLSpanElement>) => void
  onAnimationStartCapture?: (event: AnimationEvent<HTMLSpanElement>) => void
  onAuxClick?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onAuxClickCapture?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onBeforeInput?: (event: FormEvent<HTMLSpanElement>) => void
  onBeforeInputCapture?: (event: FormEvent<HTMLSpanElement>) => void
  onBlur?: (event: FocusEvent<HTMLSpanElement>) => void
  onBlurCapture?: (event: FocusEvent<HTMLSpanElement>) => void
  onCanPlay?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onCanPlayCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onCanPlayThrough?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onCanPlayThroughCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onChange?: (event: FormEvent<HTMLSpanElement>) => void
  onChangeCapture?: (event: FormEvent<HTMLSpanElement>) => void
  onClick?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onCompositionEnd?: (event: CompositionEvent<HTMLSpanElement>) => void
  onCompositionEndCapture?: (event: CompositionEvent<HTMLSpanElement>) => void
  onCompositionStart?: (event: CompositionEvent<HTMLSpanElement>) => void
  onCompositionStartCapture?: (event: CompositionEvent<HTMLSpanElement>) => void
  onCompositionUpdate?: (event: CompositionEvent<HTMLSpanElement>) => void
  onCompositionUpdateCapture?: (event: CompositionEvent<HTMLSpanElement>) => void
  onContextMenu?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onContextMenuCapture?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onCopy?: (event: ClipboardEvent<HTMLSpanElement>) => void
  onCopyCapture?: (event: ClipboardEvent<HTMLSpanElement>) => void
  onCut?: (event: ClipboardEvent<HTMLSpanElement>) => void
  onCutCapture?: (event: ClipboardEvent<HTMLSpanElement>) => void
  onDoubleClick?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onDoubleClickCapture?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onDrag?: (event: DragEvent<HTMLSpanElement>) => void
  onDragCapture?: (event: DragEvent<HTMLSpanElement>) => void
  onDragEnd?: (event: DragEvent<HTMLSpanElement>) => void
  onDragEndCapture?: (event: DragEvent<HTMLSpanElement>) => void
  onDragEnter?: (event: DragEvent<HTMLSpanElement>) => void
  onDragEnterCapture?: (event: DragEvent<HTMLSpanElement>) => void
  onDragExit?: (event: DragEvent<HTMLSpanElement>) => void
  onDragExitCapture?: (event: DragEvent<HTMLSpanElement>) => void
  onDragLeave?: (event: DragEvent<HTMLSpanElement>) => void
  onDragLeaveCapture?: (event: DragEvent<HTMLSpanElement>) => void
  onDragOver?: (event: DragEvent<HTMLSpanElement>) => void
  onDragOverCapture?: (event: DragEvent<HTMLSpanElement>) => void
  onDragStart?: (event: DragEvent<HTMLSpanElement>) => void
  onDragStartCapture?: (event: DragEvent<HTMLSpanElement>) => void
  onDrop?: (event: DragEvent<HTMLSpanElement>) => void
  onDropCapture?: (event: DragEvent<HTMLSpanElement>) => void
  onDurationChange?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onDurationChangeCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onEmptied?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onEmptiedCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onEncrypted?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onEncryptedCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onEnded?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onEndedCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onError?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onErrorCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onFocus?: (event: FocusEvent<HTMLSpanElement>) => void
  onFocusCapture?: (event: FocusEvent<HTMLSpanElement>) => void
  onGotPointerCapture?: (event: PointerEvent<HTMLSpanElement>) => void
  onGotPointerCaptureCapture?: (event: PointerEvent<HTMLSpanElement>) => void
  onInput?: (event: FormEvent<HTMLSpanElement>) => void
  onInputCapture?: (event: FormEvent<HTMLSpanElement>) => void
  onInvalid?: (event: FormEvent<HTMLSpanElement>) => void
  onInvalidCapture?: (event: FormEvent<HTMLSpanElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLSpanElement>) => void
  onKeyDownCapture?: (event: KeyboardEvent<HTMLSpanElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLSpanElement>) => void
  onKeyPressCapture?: (event: KeyboardEvent<HTMLSpanElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLSpanElement>) => void
  onKeyUpCapture?: (event: KeyboardEvent<HTMLSpanElement>) => void
  onLoad?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onLoadCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onLoadStart?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onLoadStartCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onLoadedData?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onLoadedDataCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onLoadedMetadata?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onLoadedMetadataCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onLostPointerCapture?: (event: PointerEvent<HTMLSpanElement>) => void
  onLostPointerCaptureCapture?: (event: PointerEvent<HTMLSpanElement>) => void
  onMouseDown?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onMouseDownCapture?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onMouseEnter?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onMouseLeave?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onMouseMove?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onMouseMoveCapture?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onMouseOut?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onMouseOutCapture?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onMouseOver?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onMouseOverCapture?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onMouseUp?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onMouseUpCapture?: (event: MouseEvent<HTMLSpanElement, MouseEvent>) => void
  onPaste?: (event: ClipboardEvent<HTMLSpanElement>) => void
  onPasteCapture?: (event: ClipboardEvent<HTMLSpanElement>) => void
  onPause?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onPauseCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onPlay?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onPlayCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onPlaying?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onPlayingCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onPointerCancel?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerCancelCapture?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerDown?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerDownCapture?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerEnter?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerEnterCapture?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerLeave?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerLeaveCapture?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerMove?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerMoveCapture?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerOut?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerOutCapture?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerOver?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerOverCapture?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerUp?: (event: PointerEvent<HTMLSpanElement>) => void
  onPointerUpCapture?: (event: PointerEvent<HTMLSpanElement>) => void
  onProgress?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onProgressCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onRateChange?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onRateChangeCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onReset?: (event: FormEvent<HTMLSpanElement>) => void
  onResetCapture?: (event: FormEvent<HTMLSpanElement>) => void
  onScroll?: (event: UIEvent<HTMLSpanElement>) => void
  onScrollCapture?: (event: UIEvent<HTMLSpanElement>) => void
  onSeeked?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onSeekedCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onSeeking?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onSeekingCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onSelect?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onSelectCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onStalled?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onStalledCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onSubmit?: (event: FormEvent<HTMLSpanElement>) => void
  onSubmitCapture?: (event: FormEvent<HTMLSpanElement>) => void
  onSuspend?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onSuspendCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onTimeUpdate?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onTimeUpdateCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onTouchCancel?: (event: TouchEvent<HTMLSpanElement>) => void
  onTouchCancelCapture?: (event: TouchEvent<HTMLSpanElement>) => void
  onTouchEnd?: (event: TouchEvent<HTMLSpanElement>) => void
  onTouchEndCapture?: (event: TouchEvent<HTMLSpanElement>) => void
  onTouchMove?: (event: TouchEvent<HTMLSpanElement>) => void
  onTouchMoveCapture?: (event: TouchEvent<HTMLSpanElement>) => void
  onTouchStart?: (event: TouchEvent<HTMLSpanElement>) => void
  onTouchStartCapture?: (event: TouchEvent<HTMLSpanElement>) => void
  onTransitionEnd?: (event: TransitionEvent<HTMLSpanElement>) => void
  onTransitionEndCapture?: (event: TransitionEvent<HTMLSpanElement>) => void
  onVolumeChange?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onVolumeChangeCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onWaiting?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onWaitingCapture?: (event: SyntheticEvent<HTMLSpanElement, Event>) => void
  onWheel?: (event: WheelEvent<HTMLSpanElement>) => void
  onWheelCapture?: (event: WheelEvent<HTMLSpanElement>) => void
  paragraph?: boolean
  placeholder?: string
  prefix?: string
  property?: string
  radioGroup?: string
  ref?: 
    | (instance: HTMLSpanElement | null) => void
    | RefObject<HTMLSpanElement>
  resource?: string
  results?: number
  role?: string
  security?: string
  slot?: string
  spellCheck?: 
    | "false"
    | "true"
    | false
    | true
  style?: CSSProperties
  suppressContentEditableWarning?: boolean
  suppressHydrationWarning?: boolean
  tabIndex?: number
  title?: string
  translate?: 
    | "no"
    | "yes"
  typeof?: string
  unselectable?: 
    | "off"
    | "on"
  variant?: 
    | "body1"
    | "body2"
    | "button"
    | "caption"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "inherit"
    | "overline"
    | "srOnly"
    | "subtitle1"
    | "subtitle2"
  variantMapping?: Partial<Record<Variant, string>>
  vocab?: string
}
`;

exports[`Zoom 1`] = `
{
  addEndListener?: EndHandler
  appear?: boolean
  children: ReactNode
  enter?: boolean
  exit?: boolean
  in?: boolean
  mountOnEnter?: boolean
  onEnter?: EnterHandler
  onEntered?: EnterHandler
  onEntering?: EnterHandler
  onExit?: ExitHandler
  onExited?: ExitHandler
  onExiting?: ExitHandler
  ref?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  style?: CSSProperties
  theme?: {
    breakpoints: {
      between: (start: number | "xs" | "sm" | "md" | "lg" | "xl", end: number | "xs" | "sm" | "md" | "lg" | "xl") => string
      down: (key: number | "xs" | "sm" | "md" | "lg" | "xl") => string
      keys: Breakpoint[]
      only: (key: Breakpoint) => string
      up: (key: number | "xs" | "sm" | "md" | "lg" | "xl") => string
      values: BreakpointValues
      width: (key: Breakpoint) => number
    }
    direction: 
      | "ltr"
      | "rtl"
    mixins: {
      gutters: (styles?: CSSProperties | undefined) => CSSProperties
      toolbar: CSSProperties
    }
    overrides?: Overrides
    palette: {
      action: {
        active: string
        disabled: string
        disabledBackground: string
        hover: string
        hoverOpacity: number
        selected: string
      }
      augmentColor: { (color: Partial<Color>, mainShade?: string | number | undefined, lightShade?: string | number | undefined, darkShade?: string | number | undefined): PaletteColor; (color: PaletteColorOptions): PaletteColor; }
      background: {
        default: string
        paper: string
      }
      common: {
        black: string
        white: string
      }
      contrastThreshold: number
      divider: string
      error: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      getContrastText: (background: string) => string
      grey: {
        100: string
        200: string
        300: string
        400: string
        50: string
        500: string
        600: string
        700: string
        800: string
        900: string
        A100: string
        A200: string
        A400: string
        A700: string
      }
      info: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      primary: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      secondary: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      success: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      text: {
        disabled: string
        hint: string
        primary: string
        secondary: string
      }
      tonalOffset: number
      type: 
        | "dark"
        | "light"
      warning: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
    }
    props?: ComponentsProps
    shadows: Shadows
    shape: {
      borderRadius: number
    }
    spacing: {
    }
    transitions: {
      create: (props: string | string[], options?: Partial<{ duration: ReactText; easing: string; delay: ReactText; }> | undefined) => string
      duration: {
        complex: number
        enteringScreen: number
        leavingScreen: number
        short: number
        shorter: number
        shortest: number
        standard: number
      }
      easing: {
        easeIn: string
        easeInOut: string
        easeOut: string
        sharp: string
      }
      getAutoHeightDuration: (height: number) => number
    }
    typography: {
      body1: CSSProperties
      body2: CSSProperties
      button: CSSProperties
      caption: CSSProperties
      fontFamily: string
      fontSize: number
      fontWeightBold: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      fontWeightLight: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      fontWeightMedium: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      fontWeightRegular: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      h1: CSSProperties
      h2: CSSProperties
      h3: CSSProperties
      h4: CSSProperties
      h5: CSSProperties
      h6: CSSProperties
      overline: CSSProperties
      pxToRem: (px: number) => string
      subtitle1: CSSProperties
      subtitle2: CSSProperties
    }
    zIndex: {
      appBar: number
      drawer: number
      mobileStepper: number
      modal: number
      snackbar: number
      speedDial: number
      tooltip: number
    }
  }
  timeout?: 
    | number
    | { appear?: number | undefined; enter?: number | undefined; exit?: number | undefined; }
  unmountOnExit?: boolean
}
`;
