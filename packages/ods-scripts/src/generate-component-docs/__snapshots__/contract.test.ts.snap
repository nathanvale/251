// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Accordion 1`] = `
{
  children: ReactNode
  className?: string
  data-id?: string
  defaultExpanded?: boolean
  expanded?: boolean
  id: string
  muiProps?: T | undefined
  onChange?: () => void
  size?: 
    | "medium"
    | "small"
  summary: ReactNode
}
`;

exports[`AccordionGroup 1`] = `
{
  children: ReactNode
  className?: string
  data-id?: string
  id?: string
}
`;

exports[`Alert 1`] = `
{
  children: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  icon?: ReactNode
  id?: string
  muiProps?: T | undefined
  onCloseClick?: () => void
  title?: ReactNode
  tone?: 
    | "caution"
    | "critical"
    | "info"
    | "neutral"
    | "positive"
    | "promote"
  variant?: 
    | "filled"
    | "standard"
}
`;

exports[`AlertBanner 1`] = `
{
  children: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  icon?: ReactNode
  id?: string
  muiProps?: T | undefined
  offset?: 
    | number
    | string
  onCloseClick?: () => void
  title?: ReactNode
  tone?: 
    | "caution"
    | "critical"
    | "info"
    | "neutral"
    | "positive"
    | "promote"
  variant?: 
    | "filled"
    | "standard"
}
`;

exports[`Box 1`] = `
{
  alignItems?: ResponsiveProp<
    | "center"
    | "flex-end"
    | "flex-start"
    | "stretch"
  >
  alignSelf?: ResponsiveProp<
    | "center"
    | "flex-end"
    | "flex-start"
    | "stretch"
  >
  backgroundColor?: 
    | "caution"
    | "cautionDark"
    | "cautionLight"
    | "critical"
    | "criticalDark"
    | "criticalLight"
    | "disabled"
    | "error"
    | "errorDark"
    | "errorLight"
    | "grey100"
    | "grey200"
    | "grey300"
    | "grey400"
    | "grey50"
    | "grey500"
    | "grey600"
    | "info"
    | "infoDark"
    | "infoLight"
    | "neutral"
    | "neutralDark"
    | "neutralLight"
    | "positive"
    | "positiveDark"
    | "positiveLight"
    | "primary"
    | "primaryB"
    | "primaryBDark"
    | "primaryBLight"
    | "primaryDark"
    | "primaryLight"
    | "promote"
    | "promoteB"
    | "promoteBDark"
    | "promoteBLight"
    | "promoteDark"
    | "promoteLight"
    | "secondary"
    | "secondaryB"
    | "secondaryBDark"
    | "secondaryBLight"
    | "secondaryDark"
    | "secondaryLight"
    | "success"
    | "successDark"
    | "successLight"
    | "transparent"
    | "warning"
    | "warningDark"
    | "warningLight"
    | "white"
  boxShadow?: 
    | "borderCritical"
    | "borderFormAccent"
    | "borderFormAccentLarge"
    | "borderFormHover"
    | "borderStandard"
    | "borderStandardInverted"
    | "borderStandardInvertedLarge"
    | "borderWeakPrimary"
    | "borderWeakPrimaryDisabled"
    | "borderWeakSecondary"
    | "borderWeakSecondaryDisabled"
    | "large"
    | "medium"
    | "outlineFocus"
    | "small"
  children?: ReactNode
  className?: string
  component?: 
    | "a"
    | "button"
    | "code"
    | "div"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "li"
    | "nav"
    | "ol"
    | "p"
    | "pre"
    | "span"
    | "ul"
  cursor?: string
  data-id?: string
  display?: ResponsiveProp<
    | "block"
    | "flex"
    | "inline"
    | "inline-block"
    | "inline-flex"
    | "list-item"
    | "none"
  >
  domProps?: Pick<AllHTMLAttributes<HTMLElement>, "size" | "className" | "disabled" | "id" | "cite" | "data" | "form" | "label" | "span" | "summary" | "title" | ... 341 more ... | "wmode"> | undefined
  flexDirection?: ResponsiveProp<
    | "column"
    | "column-reverse"
    | "row"
    | "row-reverse"
  >
  flexWrap?: ResponsiveProp<
    | "nowrap"
    | "wrap"
    | "wrap-reverse"
  >
  height?: "full"
  id?: string
  innerRef?: any
  justifyContent?: ResponsiveProp<
    | "center"
    | "flex-end"
    | "flex-start"
    | "space-between"
  >
  margin?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  marginBottom?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  marginLeft?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  marginRight?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  marginTop?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  marginX?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  marginY?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  onClick?: (event: MouseEvent<HTMLElement, MouseEvent>) => void
  overflow?: 
    | "auto"
    | "hidden"
    | "scroll"
    | "visible"
  padding?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  paddingBottom?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  paddingLeft?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  paddingRight?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  paddingTop?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  paddingX?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  paddingY?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  pointerEvents?: 
    | "-moz-initial"
    | "all"
    | "auto"
    | "fill"
    | "inherit"
    | "initial"
    | "none"
    | "painted"
    | "revert"
    | "stroke"
    | "unset"
    | "visible"
    | "visibleFill"
    | "visiblePainted"
    | "visibleStroke"
  position?: ResponsiveProp<
    | "-moz-initial"
    | "-webkit-sticky"
    | "absolute"
    | "fixed"
    | "inherit"
    | "initial"
    | "relative"
    | "revert"
    | "static"
    | "sticky"
    | "unset"
  >
  showAnts?: boolean
  style?: CSSProperties
  tabIndex?: number
  textAlign?: ResponsiveProp<
    | "center"
    | "left"
    | "right"
  >
  transform?: "touchable"
  transition?: "fast"
  width?: "full"
}
`;

exports[`Breadcrumb 1`] = `
{
  active?: boolean
  children?: ReactNode
  data-id?: string
  domProps?: AnchorHTMLAttributes<HTMLAnchorElement> | undefined
  href: string
  onClick?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  target?: string
}
`;

exports[`Breadcrumbs 1`] = `
{
  aria-label?: string
  children: 
    | ReactElement<BreadcrumbProps, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<...>)>
    | ReactElement<BreadcrumbProps, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<...>)>[]
  data-id?: string
  muiProps?: OverrideProps<BreadcrumbsTypeMap<{}, "nav">, "nav"> | undefined
}
`;

exports[`Button 1`] = `
{
  buttonRef?: 
    | (instance: unknown) => void
    | RefObject<unknown>
  children?: ReactNode
  className?: string
  classes?: Partial<Record<ButtonClassKey, string>>
  color?: 
    | "primary"
    | "secondary"
  component?: 
    | "a"
    | "button"
    | "input"
  data-id?: string
  disabled?: boolean
  fullWidth?: ResponsiveProp<boolean
  >
  href?: string
  icon?: ReactNode
  id?: string
  inverse?: boolean
  muiProps?: OverrideProps<ButtonTypeMap<{}, "button">, "button"> | undefined
  noTextPadding?: boolean
  onBlur?: (event: FocusEvent<HTMLButtonElement>) => void
  onClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onFocus?: (event: FocusEvent<HTMLButtonElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLButtonElement>) => void
  size?: 
    | "medium"
    | "small"
  spinner?: boolean
  target?: string
  type?: 
    | "button"
    | "reset"
    | "submit"
  variant?: 
    | "contained"
    | "outlined"
    | "text"
}
`;

exports[`Card 1`] = `
{
  backgroundColor?: 
    | "grey50"
    | "transparent"
    | "white"
  children?: ReactNode
  data-id?: string
  padding?: 
    | "large"
    | "medium"
    | "small"
}
`;

exports[`CardStackSection 1`] = `
{
  cardWidth?: 
    | "large"
    | "medium"
    | "small"
  children: 
    | ReactElement<CardProps | DividerCardProps, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<...>)>
    | ReactElement<CardProps | DividerCardProps, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<...>)>[]
  data-id?: string
  paddingY?: 
    | "medium"
    | "none"
    | "small"
  variant?: 
    | "card-centered"
    | "default"
    | "widget"
}
`;

exports[`Checkbox 1`] = `
{
  aria-label?: string
  aria-labelledby?: string
  checked?: boolean
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  helperText?: ReactNode
  id: string
  inputRef?: 
    | (instance: any) => void
    | RefObject<any>
  label: ReactNode
  muiProps?: CheckboxMuiPropsType | undefined
  name?: string
  onChange?: (event: ChangeEvent<HTMLInputElement>, checked: boolean) => void
  value?: 
    | number
    | string
}
`;

exports[`CheckboxBase 1`] = `
{
  aria-describedby?: string
  aria-label?: string
  aria-labelledby?: string
  checked?: boolean
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  id: string
  inputRef?: 
    | (instance: any) => void
    | RefObject<any>
  muiProps?: CheckboxProps | undefined
  name?: string
  onChange?: (event: ChangeEvent<HTMLInputElement>, checked: boolean) => void
  value?: 
    | number
    | string
}
`;

exports[`CheckboxGroup 1`] = `
{
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  groupComponent?: 
    | "div"
    | "fieldset"
    | "form"
    | "section"
    | "span"
  helperText?: string
  id: string
  label?: string
  labelComponent?: 
    | "abbr"
    | "cite"
    | "div"
    | "label"
    | "legend"
    | "p"
    | "pre"
    | "q"
    | "section"
    | "span"
  muiProps?: ControlGroupMuiProps | undefined
}
`;

exports[`ChevronButton 1`] = `
{
  children?: ReactNode
  data-id?: string
  domProps?: Pick<AllHTMLAttributes<HTMLButtonElement>, "size" | "className" | "disabled" | "id" | "cite" | "data" | "form" | "label" | "span" | "style" | ... 345 more ... | "wmode"> | undefined
  onClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  type?: 
    | "button"
    | "reset"
    | "submit"
  variant?: 
    | "primary"
    | "secondary"
}
`;

exports[`ChevronLink 1`] = `
{
  children?: ReactNode
  data-id?: string
  domProps?: AnchorHTMLAttributes<HTMLAnchorElement> | undefined
  href: string
  onClick?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  target?: string
  variant?: 
    | "primary"
    | "secondary"
}
`;

exports[`ChevronLinkRenderer 1`] = `
{
  children: (renderProps: ChevronLinkRenderProps) => ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<...>)>
  variant: 
    | "primary"
    | "secondary"
}
`;

exports[`Column 1`] = `
{
  alignX?: ResponsiveProp<
    | "center"
    | "left"
    | "right"
  >
  children?: ReactNode
  data-id?: string
  width?: 
    | "1/12"
    | "1/2"
    | "1/3"
    | "1/4"
    | "1/6"
    | "11/12"
    | "2/3"
    | "3/4"
    | "5/12"
    | "5/6"
    | "7/12"
    | "content"
    | "flex"
}
`;

exports[`Columns 1`] = `
{
  alignX?: ResponsiveProp<
    | "center"
    | "left"
    | "right"
  >
  alignY?: ResponsiveProp<
    | "bottom"
    | "center"
    | "top"
  >
  children: 
    | (ReactElement<ColumnProps, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<...>)> | null)[]
    | ReactElement<ColumnProps, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<...>)>
  collapseBelow?: 
    | "lg"
    | "md"
    | "sm"
    | "xl"
  data-id?: string
  space: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
}
`;

exports[`Components 1`] = `
{
}
`;

exports[`ControlGroup 1`] = `
{
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  groupComponent?: 
    | "div"
    | "fieldset"
    | "form"
    | "section"
    | "span"
  helperText?: string
  id: string
  label?: string
  labelComponent?: 
    | "abbr"
    | "cite"
    | "div"
    | "label"
    | "legend"
    | "p"
    | "pre"
    | "q"
    | "section"
    | "span"
  muiProps?: ControlGroupMuiProps | undefined
}
`;

exports[`DataTable 1`] = `
{
  alignX?: 
    | "center"
    | "left"
    | "right"
  aria-label?: string
  bordered?: boolean
  className?: string
  data?: ReactNode[][]
  data-id?: string
  headings?: ReactNode[]
  hover?: boolean
  maxHeight?: 
    | number
    | string
  muiProps?: any
  size?: 
    | "medium"
    | "small"
  stickyHeader?: boolean
  striped?: boolean
  textVariant?: 
    | "body"
    | "body-small"
}
`;

exports[`Dialog 1`] = `
{
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  disabled?: boolean
  hideClose?: boolean
  id: string
  maxWidth?: 
    | "lg"
    | "md"
    | "sm"
    | false
  muiProps?: MuiProps | undefined
  noFullScreenOnMobile?: boolean
  onClose?: () => void
  opaqueBackground?: boolean
  open?: boolean
  title: ReactNode
}
`;

exports[`Divider 1`] = `
{
  data-id?: string
}
`;

exports[`DividerCard 1`] = `
{
  backgroundColor?: 
    | "grey50"
    | "transparent"
    | "white"
  children?: ReactNode
  data-id?: string
  padding?: 
    | "large"
    | "medium"
    | "small"
  space?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
}
`;

exports[`Emphasis 1`] = `
{
  children: ReactNode
  data-id?: string
}
`;

exports[`FormControl 1`] = `
{
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  component?: 
    | "div"
    | "fieldset"
    | "form"
    | "section"
    | "span"
  data-id?: string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  fullWidth?: boolean
  id?: string
  muiProps?: OverrideProps<FormControlTypeMap<{}, "div">, "div"> | undefined
}
`;

exports[`FormControlLabel 1`] = `
{
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  control: ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)>
  data-id?: string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  id?: string
  label: ReactNode
  muiProps?: FormControlLabelProps | undefined
}
`;

exports[`FormHelperText 1`] = `
{
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  id: string
  muiProps?: OverrideProps<FormHelperTextTypeMap<{}, "p">, "p"> | undefined
}
`;

exports[`FormLabel 1`] = `
{
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  component?: 
    | "abbr"
    | "cite"
    | "div"
    | "label"
    | "legend"
    | "p"
    | "pre"
    | "q"
    | "section"
    | "span"
  data-id?: string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  id?: string
  muiProps?: OverrideProps<FormLabelTypeMap<{}, "label">, "label"> | undefined
}
`;

exports[`Heading 1`] = `
{
  align?: ResponsiveProp<
    | "center"
    | "left"
    | "right"
  >
  children: ReactNode
  component?: 
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
  data-id?: string
  truncate?: boolean
  variant: 
    | "h1"
    | "h2"
    | "h3"
    | "h4"
}
`;

exports[`HeadingChevronLink 1`] = `
{
  children?: ReactNode
  data-id?: string
  domProps?: AnchorHTMLAttributes<HTMLAnchorElement> | undefined
  href: string
  onClick?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  target?: string
}
`;

exports[`Hidden 1`] = `
{
  above?: 
    | "lg"
    | "md"
    | "sm"
    | "xs"
  below?: 
    | "lg"
    | "md"
    | "sm"
    | "xl"
  children: ReactNode
  inline?: boolean
}
`;

exports[`IconButton 1`] = `
{
  aria-label?: string
  children: ReactElement<SvgIconProps, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<...>)>
  className?: string
  classes?: Record<string, string>
  color?: 
    | "inherit"
    | "neutral"
    | "primary"
  data-id?: string
  disabled?: boolean
  id?: string
  muiProps?: OverrideProps<IconButtonTypeMap<{}, "button">, "button"> | undefined
  noIconPadding?: boolean
  onBlur?: (event: FocusEvent<HTMLButtonElement>) => void
  onClick?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onClickCapture?: (event: MouseEvent<HTMLButtonElement, MouseEvent>) => void
  onFocus?: (event: FocusEvent<HTMLButtonElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyPress?: (event: KeyboardEvent<HTMLButtonElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLButtonElement>) => void
}
`;

exports[`Inline 1`] = `
{
  alignX?: ResponsiveProp<
    | "center"
    | "left"
    | "right"
  >
  alignY?: ResponsiveProp<
    | "bottom"
    | "center"
    | "top"
  >
  children: ReactNode
  collapseBelow?: 
    | "lg"
    | "md"
    | "sm"
    | "xl"
  data-id?: string
  space?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
}
`;

exports[`InputAdornment 1`] = `
{
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  component?: 
    | ComponentClass<{}, any>
    | FunctionComponent<{}>
  data-id?: string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  id?: string
  muiProps?: OverrideProps<InputAdornmentTypeMap<{}, "div">, "div"> | undefined
  position: 
    | "end"
    | "start"
}
`;

exports[`List 1`] = `
{
  children: ReactNode
  data-id?: string
  space?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
  tone?: 
    | "critical"
    | "neutral"
    | "neutralDark"
    | "neutralLight"
    | "positive"
  type?: 
    | "circle"
    | "decimal"
    | "decimal-stylised"
    | "disc"
    | "lower-alpha"
    | "lower-roman"
    | "upper-alpha"
    | "upper-roman"
  variant?: 
    | "body"
    | "body-small"
    | "subtitle"
    | "subtitle-small"
  weight?: 
    | "medium"
    | "regular"
}
`;

exports[`ListItem 1`] = `
{
  children: ReactNode
  data-id?: string
  helperText?: ReactNode
  icon?: ReactNode
}
`;

exports[`MarkdownLite 1`] = `
{
  children: string
}
`;

exports[`OriginThemeProvider 1`] = `
{
  children: ReactNode
  linkComponent?: 
    | ComponentClass<LinkComponentProps, any>
    | FunctionComponent<LinkComponentProps>
  muiTheme?: {
    breakpoints: {
      between: (start: number | "xs" | "sm" | "md" | "lg" | "xl", end: number | "xs" | "sm" | "md" | "lg" | "xl") => string
      down: (key: number | "xs" | "sm" | "md" | "lg" | "xl") => string
      keys: ("xs" | "sm" | "md" | "lg" | "xl")[]
      only: (key: "xs" | "sm" | "md" | "lg" | "xl") => string
      up: (key: number | "xs" | "sm" | "md" | "lg" | "xl") => string
      values: BreakpointValues
      width: (key: "xs" | "sm" | "md" | "lg" | "xl") => number
    }
    direction: 
      | "ltr"
      | "rtl"
    mixins: {
      gutters: (styles?: CSSProperties | undefined) => CSSProperties
      toolbar: CSSProperties
    }
    overrides?: Overrides
    palette: {
      action: {
        activatedOpacity: number
        active: string
        disabled: string
        disabledBackground: string
        disabledOpacity: number
        focus: string
        focusOpacity: number
        hover: string
        hoverOpacity: number
        selected: string
        selectedOpacity: number
      }
      augmentColor: { (color: Partial<Color>, mainShade?: string | number | undefined, lightShade?: string | number | undefined, darkShade?: string | number | undefined): PaletteColor; (color: PaletteColorOptions): PaletteColor; }
      background: {
        default: string
        paper: string
      }
      common: {
        black: string
        white: string
      }
      contrastThreshold: number
      divider: string
      error: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      getColorVariantCSSColor: (variant: "disabled" | "caution" | "critical" | "grey300" | "info" | "neutral" | "neutralDark" | "neutralLight" | "positive" | "positiveLight" | "primary" | "primaryB" | "promote" | "promoteB" | ... 37 more ... | "promoteBDark") => string
      getContrastText: (background: string) => string
      grey: {
        100: string
        200: string
        300: string
        400: string
        50: string
        500: string
        600: string
        700: string
        800: string
        900: string
        A100: string
        A200: string
        A400: string
        A700: string
      }
      info: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      primary: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      primaryB: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      promoteB: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      secondary: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      secondaryB: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      success: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
      text: {
        disabled: string
        hint: string
        primary: string
        secondary: string
      }
      tonalOffset: 
        | number
        | { light: number; dark: number; }
      type: 
        | "dark"
        | "light"
      warning: {
        contrastText: string
        dark: string
        light: string
        main: string
      }
    }
    props?: ComponentsProps
    shadows: Shadows
    shape: {
      borderRadius: number
    }
    spacing: {
    }
    transitions: {
      create: (props: string | string[], options?: Partial<{ duration: ReactText; easing: string; delay: ReactText; }> | undefined) => string
      duration: {
        complex: number
        enteringScreen: number
        leavingScreen: number
        short: number
        shorter: number
        shortest: number
        standard: number
      }
      easing: {
        easeIn: string
        easeInOut: string
        easeOut: string
        sharp: string
      }
      getAutoHeightDuration: (height: number) => number
    }
    typography: {
      basekickActive: boolean
      body1: CSSProperties
      body2: CSSProperties
      button: CSSProperties
      caption: CSSProperties
      fontFamily: string
      fontSize: number
      fontWeightBold: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      fontWeightLight: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      fontWeightMedium: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      fontWeightRegular: 
        | "-moz-initial"
        | "bold"
        | "bolder"
        | "inherit"
        | "initial"
        | "lighter"
        | "normal"
        | "revert"
        | "unset"
        | number
      h1: CSSProperties
      h2: CSSProperties
      h3: CSSProperties
      h4: CSSProperties
      h5: CSSProperties
      h6: CSSProperties
      overline: CSSProperties
      pxToRem: (px: number) => string
      subtitle1: CSSProperties
      subtitle2: CSSProperties
    }
    unstable_strictMode?: boolean
    zIndex: {
      appBar: number
      drawer: number
      mobileStepper: number
      modal: number
      snackbar: number
      speedDial: number
      tooltip: number
    }
  }
}
`;

exports[`Placeholder 1`] = `
{
  data-id?: string
  height?: ResponsiveProp<
    | number
    | string
  >
  label?: string
  minWidth?: ResponsiveProp<
    | number
    | string
  >
  shape?: 
    | "rectangle"
    | "round"
  width?: ResponsiveProp<
    | number
    | string
  >
}
`;

exports[`Radio 1`] = `
{
  aria-label?: string
  aria-labelledby?: string
  checked?: boolean
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  helperText?: ReactNode
  id: string
  inputRef?: 
    | (instance: any) => void
    | RefObject<any>
  label: ReactNode
  muiProps?: RadioMuiPropsType | undefined
  name?: string
  onChange?: (event: ChangeEvent<HTMLInputElement>, checked: boolean) => void
  value?: 
    | number
    | string
}
`;

exports[`RadioBase 1`] = `
{
  aria-describedby?: string
  aria-label?: string
  aria-labelledby?: string
  checked?: boolean
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  id: string
  inputRef?: 
    | (instance: any) => void
    | RefObject<any>
  muiProps?: RadioProps | undefined
  name?: string
  onChange?: (event: ChangeEvent<HTMLInputElement>, checked: boolean) => void
  value?: 
    | number
    | string
}
`;

exports[`RadioGroup 1`] = `
{
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  defaultValue?: 
    | number
    | string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  groupComponent?: 
    | "div"
    | "fieldset"
    | "form"
    | "section"
    | "span"
  helperText?: string
  id?: string
  label?: string
  labelComponent?: 
    | "abbr"
    | "cite"
    | "div"
    | "label"
    | "legend"
    | "p"
    | "pre"
    | "q"
    | "section"
    | "span"
  muiProps?: RadioGroupMuiProps | undefined
  name: string
  onChange?: (event: ChangeEvent<HTMLInputElement>, value?: string | undefined) => void
  value?: 
    | number
    | string
}
`;

exports[`RadioGroupBase 1`] = `
{
  aria-describedby?: string
  aria-label?: string
  aria-labelledby?: string
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  defaultValue?: 
    | number
    | string
  disabled?: boolean
  error?: boolean
  focused?: boolean
  id?: string
  muiProps?: RadioGroupProps | undefined
  name: string
  onChange?: (event: ChangeEvent<HTMLInputElement>, value?: string | undefined) => void
  value?: 
    | number
    | string
}
`;

exports[`Section 1`] = `
{
  backgroundColor?: 
    | "grey50"
    | "transparent"
    | "white"
  children: ReactNode
  data-id?: string
  fluidity?: ResponsiveProp<boolean
  >
  hideGutter?: ResponsiveProp<boolean
  >
  paddingY?: 
    | "medium"
    | "none"
    | "small"
  stretchY?: boolean
}
`;

exports[`SelectField 1`] = `
{
  aria-describedby?: string
  aria-label?: string
  aria-labelledby?: string
  children?: 
    | ReactElement<"optgroup" | "option", string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<...>)>
    | ReactElement<"optgroup" | "option", string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<...>)>[]
  className?: string
  classes?: Record<string, string>
  data-id?: string
  defaultValue?: 
    | number
    | string
  disabled?: boolean
  displayEmpty?: boolean
  domProps?: HTMLAttributes<HTMLInputElement> | undefined
  emptyAriaLabel?: string
  error?: boolean
  helperText?: ReactNode
  hideHelperTextSpace?: boolean
  id: string
  inputRef?: 
    | (instance: any) => void
    | RefObject<any>
  label?: string
  maxLength?: 
    | number
    | string
  muiProps?: any
  name?: string
  onBlur?: (event: FocusEvent<HTMLInputElement>) => void
  onChange?: (event: ChangeEvent<HTMLInputElement>, value?: string | undefined) => void
  onFocus?: (event: FocusEvent<HTMLInputElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLInputElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLInputElement>) => void
  options?: OptionType[]
  size?: 
    | "medium"
    | "small"
  type?: string
  value?: 
    | number
    | string
  variant?: 
    | "filled"
    | "outlined"
}
`;

exports[`Spinner 1`] = `
{
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  color?: 
    | "inherit"
    | "primary"
    | "secondary"
  data-id?: string
  disabled?: boolean
  id?: string
  size?: 
    | "large"
    | "medium"
    | "small"
    | "xsmall"
}
`;

exports[`Stack 1`] = `
{
  alignX?: ResponsiveProp<
    | "center"
    | "left"
    | "right"
  >
  children: ReactNode
  className?: string
  component?: 
    | "div"
    | "ol"
    | "ul"
  data-id?: string
  dividers?: boolean
  space?: ResponsiveProp<
    | "large"
    | "medium"
    | "none"
    | "small"
    | "xlarge"
    | "xsmall"
    | "xxlarge"
    | "xxsmall"
    | "xxxlarge"
  >
}
`;

exports[`Strong 1`] = `
{
  children: ReactNode
  data-id?: string
}
`;

exports[`SvgIcon 1`] = `
{
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  disabled?: boolean
  id?: string
  muiProps?: OverrideProps<SvgIconTypeMap<{}, "svg">, "svg"> | undefined
  ref?: 
    | (instance: any) => void
    | RefObject<any>
  size?: 
    | "inherit"
    | "large"
    | "medium"
    | "small"
  titleAccess?: string
  tone?: 
    | "caution"
    | "critical"
    | "disabled"
    | "grey300"
    | "info"
    | "inherit"
    | "neutral"
    | "neutralDark"
    | "neutralLight"
    | "positive"
    | "positiveLight"
    | "primary"
    | "primaryB"
    | "promote"
    | "promoteB"
    | "secondary"
    | "secondaryB"
    | "white"
  viewBox?: string
}
`;

exports[`Tab 1`] = `
{
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  disabled?: boolean
  icon?: ReactNode
  id?: string
  label: ReactNode
  muiProps?: OverrideProps<TabTypeMap<{}, "div">, "div"> | undefined
  value?: 
    | number
    | string
}
`;

exports[`TabPanel 1`] = `
{
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  disabled?: boolean
  hidden?: boolean
  id?: string
  tabId?: string
  value?: 
    | number
    | string
}
`;

exports[`Table 1`] = `
{
  alignX?: 
    | "center"
    | "left"
    | "right"
  aria-label?: string
  bordered?: boolean
  children?: ReactNode
  className?: string
  data-id?: string
  hover?: boolean
  maxHeight?: 
    | number
    | string
  muiProps?: T | undefined
  size?: 
    | "medium"
    | "small"
  stickyHeader?: boolean
  striped?: boolean
  textVariant?: 
    | "body"
    | "body-small"
}
`;

exports[`TableBody 1`] = `
{
  children?: ReactNode
  data-id?: string
  muiProps?: T | undefined
}
`;

exports[`TableCell 1`] = `
{
  alignX?: 
    | "center"
    | "left"
    | "right"
  alignY?: 
    | "bottom"
    | "center"
    | "top"
  children?: ReactNode
  className?: string
  colSpan?: number
  data-id?: string
  muiProps?: T | undefined
  rowSpan?: number
  scope?: string
}
`;

exports[`TableHead 1`] = `
{
  children?: ReactNode
  data-id?: string
  muiProps?: T | undefined
}
`;

exports[`TableRow 1`] = `
{
  children?: ReactNode
  className?: string
  data-id?: string
  muiProps?: T | undefined
}
`;

exports[`Tabs 1`] = `
{
  aria-label?: string
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  defaultValue?: 
    | number
    | string
  disabled?: boolean
  id?: string
  muiProps?: OverrideProps<TabsTypeMap<{}, ExtendButtonBase<ButtonBaseTypeMap<{}, "button">>>, ExtendButtonBase<ButtonBaseTypeMap<{}, "button">>> | undefined
  onChange?: (event: ChangeEvent<{}>, newValue: ReactText) => void
  scrollButtons?: 
    | "auto"
    | "off"
    | "on"
  value?: 
    | number
    | string
  variant?: 
    | "fullWidth"
    | "scrollable"
    | "standard"
}
`;

exports[`Text 1`] = `
{
  align?: ResponsiveProp<
    | "center"
    | "left"
    | "right"
  >
  children?: ReactNode
  component?: 
    | "a"
    | "button"
    | "code"
    | "div"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "li"
    | "nav"
    | "ol"
    | "p"
    | "pre"
    | "span"
    | "ul"
  data-id?: string
  inline?: boolean
  tone?: 
    | "critical"
    | "neutral"
    | "neutralDark"
    | "neutralLight"
    | "positive"
  truncate?: boolean
  variant?: 
    | "body"
    | "body-small"
    | "caption"
    | "overline-text"
    | "subtitle"
    | "subtitle-small"
  weight?: 
    | "medium"
    | "regular"
}
`;

exports[`TextAreaField 1`] = `
{
  aria-describedby?: string
  aria-label?: string
  aria-labelledby?: string
  className?: string
  classes?: Record<string, string>
  data-id?: string
  defaultValue?: 
    | number
    | string
  disabled?: boolean
  domProps?: HTMLAttributes<HTMLTextAreaElement> | undefined
  error?: boolean
  helperText?: ReactNode
  hideHelperTextSpace?: boolean
  id: string
  inputRef?: 
    | (instance: any) => void
    | RefObject<any>
  label?: string
  maxLength?: 
    | number
    | string
  muiProps?: StandardTextFieldProps | FilledTextFieldProps | OutlinedTextFieldProps | undefined
  name?: string
  onBlur?: (event: FocusEvent<HTMLInputElement>) => void
  onChange?: (event: ChangeEvent<HTMLInputElement>, value?: string | undefined) => void
  onFocus?: (event: FocusEvent<HTMLInputElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLInputElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLInputElement>) => void
  placeholder?: string
  rows?: 
    | number
    | string
  rowsMax?: 
    | number
    | string
  size?: 
    | "medium"
    | "small"
  type?: string
  value?: 
    | number
    | string
  variant?: 
    | "filled"
    | "outlined"
}
`;

exports[`TextContextProvider 1`] = `
{
  children?: ReactNode
  defaults?: {
    inline?: boolean
    tone?: 
      | "critical"
      | "neutral"
      | "neutralDark"
      | "neutralLight"
      | "positive"
    variant: 
      | "body"
      | "body-small"
      | "caption"
      | "overline-text"
      | "subtitle"
      | "subtitle-small"
    weight: 
      | "medium"
      | "regular"
  }
  inline?: boolean
  tone?: 
    | "critical"
    | "neutral"
    | "neutralDark"
    | "neutralLight"
    | "positive"
  variant?: 
    | "body"
    | "body-small"
    | "caption"
    | "overline-text"
    | "subtitle"
    | "subtitle-small"
  weight?: 
    | "medium"
    | "regular"
}
`;

exports[`TextField 1`] = `
{
  aria-describedby?: string
  aria-label?: string
  aria-labelledby?: string
  className?: string
  classes?: Record<string, string>
  data-id?: string
  defaultValue?: 
    | number
    | string
  disabled?: boolean
  domProps?: HTMLAttributes<HTMLInputElement> | undefined
  endIcon?: ReactNode
  error?: boolean
  helperText?: ReactNode
  hideHelperTextSpace?: boolean
  id: string
  inputRef?: 
    | (instance: any) => void
    | RefObject<any>
  label?: string
  maxLength?: 
    | number
    | string
  muiProps?: StandardTextFieldProps | FilledTextFieldProps | OutlinedTextFieldProps | undefined
  name?: string
  onBlur?: (event: FocusEvent<HTMLInputElement>) => void
  onChange?: (event: ChangeEvent<HTMLInputElement>, value?: string | undefined) => void
  onFocus?: (event: FocusEvent<HTMLInputElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLInputElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLInputElement>) => void
  placeholder?: string
  size?: 
    | "medium"
    | "small"
  startIcon?: ReactNode
  type?: string
  value?: 
    | number
    | string
  variant?: 
    | "filled"
    | "outlined"
}
`;

exports[`TextFieldBase 1`] = `
{
  SelectProps?: Partial<SelectProps>
  aria-describedby?: string
  aria-label?: string
  aria-labelledby?: string
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  defaultValue?: 
    | number
    | string
  disabled?: boolean
  domProps?: HTMLAttributes<HTMLInputElement | HTMLTextAreaElement> | undefined
  endAdornment?: ReactNode
  error?: boolean
  helperText?: ReactNode
  hideHelperTextSpace?: boolean
  id: string
  inputRef?: 
    | (instance: any) => void
    | RefObject<any>
  label?: string
  maxLength?: 
    | number
    | string
  muiProps?: StandardTextFieldProps | FilledTextFieldProps | OutlinedTextFieldProps | undefined
  multiline?: boolean
  name?: string
  onBlur?: (event: FocusEvent<HTMLInputElement>) => void
  onChange?: (event: ChangeEvent<HTMLInputElement>, value?: string | undefined) => void
  onFocus?: (event: FocusEvent<HTMLInputElement>) => void
  onKeyDown?: (event: KeyboardEvent<HTMLInputElement>) => void
  onKeyUp?: (event: KeyboardEvent<HTMLInputElement>) => void
  placeholder?: string
  select?: boolean
  size?: 
    | "medium"
    | "small"
  startAdornment?: ReactNode
  type?: string
  value?: 
    | number
    | string
  variant?: 
    | "filled"
    | "outlined"
}
`;

exports[`TextLink 1`] = `
{
  children?: ReactNode
  data-id?: string
  domProps?: AnchorHTMLAttributes<HTMLAnchorElement> | undefined
  href: string
  onClick?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  target?: string
}
`;

exports[`TextLinkRenderer 1`] = `
{
  children: (renderProps: TextLinkRenderProps) => ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<...>)>
}
`;

exports[`ToggleButton 1`] = `
{
  aria-label?: string
  children: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  disabled?: boolean
  id?: string
  muiProps?: MuiProps<OverrideProps<ToggleButtonTypeMap<{}, "button">, "button">> | undefined
  selected?: boolean
  value: 
    | number
    | string
}
`;

exports[`ToggleButtonGroup 1`] = `
{
  aria-label?: string
  children?: ReactNode
  className?: string
  classes?: Record<string, string>
  data-id?: string
  defaultValue?: 
    | number
    | string
  id: string
  muiProps?: ToggleButtonGroupProps | undefined
  onChange?: (event: MouseEvent<HTMLElement, MouseEvent>, value: any) => void
  options?: 
    | OptionType[]
    | string[]
  size?: 
    | "medium"
    | "small"
  value?: 
    | number
    | string
  width?: 
    | "content"
    | "full"
}
`;

exports[`TrackedLink 1`] = `
{
  children?: ReactNode
  data-id?: string
  domProps?: AnchorHTMLAttributes<HTMLAnchorElement> | undefined
  href: string
  onClick?: (event: MouseEvent<HTMLAnchorElement, MouseEvent>) => void
  target?: string
  trackingLabel: ReactNode
  trackingType: string
}
`;

exports[`TrackingDisable 1`] = `
{
  children: ReactNode
}
`;

exports[`TrackingProvider 1`] = `
{
  children: ReactNode
  onTrackingCapture: TrackingEventHandler
}
`;

exports[`useTextStyles 1`] = `
{
  inline?: boolean
  tone?: 
    | "critical"
    | "neutral"
    | "neutralDark"
    | "neutralLight"
    | "positive"
  variant: 
    | "body"
    | "body-small"
    | "caption"
    | "overline-text"
    | "subtitle"
    | "subtitle-small"
  weight: 
    | "medium"
    | "regular"
}
`;

exports[`useTracking 1`] = `
{
  children: ReactNode
  data-id: string
  postClickState?: string
  type: string
}
`;
